const flask = [
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "add_template_filter",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.add_template_filter">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_template_filter\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.add_template_filter" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template filter.  Works exactly like the\n   <a class="reference internal" href="#flask.Flask.template_filter" title="flask.Flask.template_filter">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      template_filter()\n     </span>\n    </code>\n   </a>\n   decorator.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the optional name of the filter, otherwise the\nfunction name will be used.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        f\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "add_template_global",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.add_template_global">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_template_global\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.add_template_global" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template global function. Works exactly like the\n   <a class="reference internal" href="#flask.Flask.template_global" title="flask.Flask.template_global">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      template_global()\n     </span>\n    </code>\n   </a>\n   decorator.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the optional name of the global function, otherwise the\nfunction name will be used.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        f\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "add_template_test",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.add_template_test">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_template_test\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.add_template_test" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template test.  Works exactly like the\n   <a class="reference internal" href="#flask.Flask.template_test" title="flask.Flask.template_test">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      template_test()\n     </span>\n    </code>\n   </a>\n   decorator.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the optional name of the test, otherwise the\nfunction name will be used.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        f\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "add_url_rule",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.add_url_rule">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_url_rule\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     endpoint\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     view_func\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     provide_automatic_options\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.add_url_rule" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a rule for routing incoming requests and building\nURLs. The\n   <a class="reference internal" href="#flask.Flask.route" title="flask.Flask.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   decorator is a shortcut to call this\nwith the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     view_func\n    </span>\n   </code>\n   argument. These are equivalent:\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">"/"</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>\n    <span class="o">...</span>\n</pre>\n   </div>\n  </div>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>\n    <span class="o">...</span>\n\n<span class="n">app</span><span class="o">.</span><span class="n">add_url_rule</span><span class="p">(</span><span class="s2">"/"</span><span class="p">,</span> <span class="n">view_func</span><span class="o">=</span><span class="n">index</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   See\n   <a class="reference internal" href="#url-route-registrations">\n    <span class="std std-ref">\n     URL Route Registrations\n    </span>\n   </a>\n   .\n  </p>\n  <p>\n   The endpoint name for the route defaults to the name of the view\nfunction if the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     endpoint\n    </span>\n   </code>\n   parameter isn\u2019t passed. An error\nwill be raised if a function has already been registered for the\nendpoint.\n  </p>\n  <p>\n   The\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods\n    </span>\n   </code>\n   parameter defaults to\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     ["GET"]\n    </span>\n   </code>\n   .\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     HEAD\n    </span>\n   </code>\n   is\nalways added automatically, and\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     OPTIONS\n    </span>\n   </code>\n   is added\nautomatically by default.\n  </p>\n  <p>\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     view_func\n    </span>\n   </code>\n   does not necessarily need to be passed, but if the\nrule should participate in routing an endpoint name must be\nassociated with a view function at some point with the\n   <a class="reference internal" href="#flask.Flask.endpoint" title="flask.Flask.endpoint">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      endpoint()\n     </span>\n    </code>\n   </a>\n   decorator.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span><span class="o">.</span><span class="n">add_url_rule</span><span class="p">(</span><span class="s2">"/"</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="s2">"index"</span><span class="p">)</span>\n\n<span class="nd">@app</span><span class="o">.</span><span class="n">endpoint</span><span class="p">(</span><span class="s2">"index"</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>\n    <span class="o">...</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   If\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     view_func\n    </span>\n   </code>\n   has a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     required_methods\n    </span>\n   </code>\n   attribute, those\nmethods are added to the passed and automatic methods. If it\nhas a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     provide_automatic_methods\n    </span>\n   </code>\n   attribute, it is used as the\ndefault if the parameter is not passed.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 The URL rule string.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        endpoint\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 The endpoint name to associate with the rule\nand view function. Used when routing and building URLs.\nDefaults to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         view_func.__name__\n        </span>\n       </code>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        view_func\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <em>\n        WSGIApplication\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Awaitable" title="(in Python v3.11)">\n        <em>\n         Awaitable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <em>\n        WSGIApplication\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       ) \u2013 The view function to associate with the\nendpoint name.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        provide_automatic_options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 Add the\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         OPTIONS\n        </span>\n       </code>\n       method and\nrespond to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         OPTIONS\n        </span>\n       </code>\n       requests automatically.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Extra options passed to the\n       <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/routing/#werkzeug.routing.Rule" title="(in Werkzeug v2.2.x)">\n        <code class="xref py py-class docutils literal notranslate">\n         <span class="pre">\n          Rule\n         </span>\n        </code>\n       </a>\n       object.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "after_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.after_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    after_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.after_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a function to run after each request to this object.\n  </p>\n  <p>\n   The function is called with the response object, and must return\na response object. This allows the functions to modify or\nreplace the response before it is sent.\n  </p>\n  <p>\n   If a function raises an exception, any remaining\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     after_request\n    </span>\n   </code>\n   functions will not be called. Therefore, this\nshould not be used for actions that must execute, such as to\nclose resources. Use\n   <a class="reference internal" href="#flask.Flask.teardown_request" title="flask.Flask.teardown_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      teardown_request()\n     </span>\n    </code>\n   </a>\n   for that.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_after_request\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_after_request\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "app_context",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.app_context">\n  <span class="sig-name descname">\n   <span class="pre">\n    app_context\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.app_context" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create an\n   <a class="reference internal" href="#flask.ctx.AppContext" title="flask.ctx.AppContext">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      AppContext\n     </span>\n    </code>\n   </a>\n   . Use as a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block to push the context, which will make\n   <a class="reference internal" href="#flask.current_app" title="flask.current_app">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      current_app\n     </span>\n    </code>\n   </a>\n   point at this application.\n  </p>\n  <p>\n   An application context is automatically pushed by\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     RequestContext.push()\n    </span>\n   </code>\n   when handling a request, and when running a CLI command. Use\nthis to manually create a context outside of these situations.\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>\n    <span class="n">init_db</span><span class="p">()</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   See\n   <a class="reference internal" href="../appcontext/">\n    <span class="doc">\n     The Application Context\n    </span>\n   </a>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.ctx.AppContext" title="flask.ctx.AppContext">\n      flask.ctx.AppContext\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "async_to_sync",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.async_to_sync">\n  <span class="sig-name descname">\n   <span class="pre">\n    async_to_sync\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     func\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.async_to_sync" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Return a sync function that will run the coroutine function.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">result</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">async_to_sync</span><span class="p">(</span><span class="n">func</span><span class="p">)(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   Override this method to change how the app converts async code\nto be synchronously callable.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      func\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <em>\n      [\n     </em>\n     <em>\n      ...\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Coroutine" title="(in Python v3.11)">\n      <em>\n       Coroutine\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[\u2026],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "auto_find_instance_path",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.auto_find_instance_path">\n  <span class="sig-name descname">\n   <span class="pre">\n    auto_find_instance_path\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.auto_find_instance_path" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     instance\n    </span>\n   </code>\n   next to your main file or\nthe package.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.8.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "before_first_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.before_first_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    before_first_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.before_first_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Registers a function to be run before the first request to this\ninstance of the application.\n  </p>\n  <p>\n   The function will be called without any arguments and its return\nvalue is ignored.\n  </p>\n  <div class="deprecated">\n   <p>\n    <span class="versionmodified deprecated">\n     Deprecated since version 2.2:\n    </span>\n    Will be removed in Flask 2.3. Run setup code when creating\nthe application instead.\n   </p>\n  </div>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.8.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.app.T_before_first_request\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.app.T_before_first_request\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "before_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.before_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    before_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.before_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a function to run before each request.\n  </p>\n  <p>\n   For example, this can be used to open a database connection, or\nto load the logged in user from the session.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">before_request</span>\n<span class="k">def</span> <span class="nf">load_user</span><span class="p">():</span>\n    <span class="k">if</span> <span class="s2">"user_id"</span> <span class="ow">in</span> <span class="n">session</span><span class="p">:</span>\n        <span class="n">g</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="s2">"user_id"</span><span class="p">])</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   The function will be called without any arguments. If it returns\na non-\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   value, the value is handled as if it was the\nreturn value from the view, and further request handling is\nstopped.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_before_request\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_before_request\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "context_processor",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.context_processor">\n  <span class="sig-name descname">\n   <span class="pre">\n    context_processor\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.context_processor" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Registers a template context processor function.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_template_context_processor\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_template_context_processor\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "create_global_jinja_loader",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.create_global_jinja_loader">\n  <span class="sig-name descname">\n   <span class="pre">\n    create_global_jinja_loader\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.create_global_jinja_loader" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It\u2019s\ndiscouraged to override this function.  Instead one should override\nthe\n   <a class="reference internal" href="#flask.Flask.jinja_loader" title="flask.Flask.jinja_loader">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      jinja_loader()\n     </span>\n    </code>\n   </a>\n   function instead.\n  </p>\n  <p>\n   The global loader dispatches between the loaders of the application\nand the individual blueprints.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     flask.templating.DispatchingJinjaLoader\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "create_jinja_environment",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.create_jinja_environment">\n  <span class="sig-name descname">\n   <span class="pre">\n    create_jinja_environment\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.create_jinja_environment" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create the Jinja environment based on\n   <a class="reference internal" href="#flask.Flask.jinja_options" title="flask.Flask.jinja_options">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      jinja_options\n     </span>\n    </code>\n   </a>\n   and the various Jinja-related methods of the app. Changing\n   <a class="reference internal" href="#flask.Flask.jinja_options" title="flask.Flask.jinja_options">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      jinja_options\n     </span>\n    </code>\n   </a>\n   after this will have no effect. Also adds\nFlask-related globals and filters to the environment.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.11:\n     </span>\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       Environment.auto_reload\n      </span>\n     </code>\n     set in accordance with\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       TEMPLATES_AUTO_RELOAD\n      </span>\n     </code>\n     configuration option.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.5.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     flask.templating.Environment\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "create_url_adapter",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.create_url_adapter">\n  <span class="sig-name descname">\n   <span class="pre">\n    create_url_adapter\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     request\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.create_url_adapter" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set\nup so the request is passed explicitly.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.0:\n     </span>\n     <a class="reference internal" href="../config/#SERVER_NAME" title="SERVER_NAME">\n      <code class="xref py py-data docutils literal notranslate">\n       <span class="pre">\n        SERVER_NAME\n       </span>\n      </code>\n     </a>\n     no longer implicitly enables subdomain\nmatching. Use\n     <code class="xref py py-attr docutils literal notranslate">\n      <span class="pre">\n       subdomain_matching\n      </span>\n     </code>\n     instead.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.9:\n     </span>\n     This can now also be called without a request object when the\nURL adapter is created for the application context.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.6.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      request\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference internal" href="#flask.Request" title="flask.wrappers.Request">\n      <em>\n       flask.wrappers.Request\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/routing/#werkzeug.routing.MapAdapter" title="(in Werkzeug v2.2.x)">\n      werkzeug.routing.map.MapAdapter\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "delete",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.delete">\n  <span class="sig-name descname">\n   <span class="pre">\n    delete\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.delete" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Flask.route" title="flask.Flask.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["DELETE"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "dispatch_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.dispatch_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    dispatch_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.dispatch_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call\n   <a class="reference internal" href="#flask.make_response" title="flask.make_response">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      make_response()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.7:\n     </span>\n     This no longer does the exception handling, this code was\nmoved to the new\n     <a class="reference internal" href="#flask.Flask.full_dispatch_request" title="flask.Flask.full_dispatch_request">\n      <code class="xref py py-meth docutils literal notranslate">\n       <span class="pre">\n        full_dispatch_request()\n       </span>\n      </code>\n     </a>\n     .\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]], WSGIApplication]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "do_teardown_appcontext",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.do_teardown_appcontext">\n  <span class="sig-name descname">\n   <span class="pre">\n    do_teardown_appcontext\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     exc=&lt;object\n    </span>\n    <span class="pre">\n     object&gt;\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.do_teardown_appcontext" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Called right before the application context is popped.\n  </p>\n  <p>\n   When handling a request, the application context is popped\nafter the request context. See\n   <a class="reference internal" href="#flask.Flask.do_teardown_request" title="flask.Flask.do_teardown_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      do_teardown_request()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <p>\n   This calls all functions decorated with\n   <a class="reference internal" href="#flask.Flask.teardown_appcontext" title="flask.Flask.teardown_appcontext">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      teardown_appcontext()\n     </span>\n    </code>\n   </a>\n   . Then the\n   <a class="reference internal" href="#flask.appcontext_tearing_down" title="flask.appcontext_tearing_down">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      appcontext_tearing_down\n     </span>\n    </code>\n   </a>\n   signal is sent.\n  </p>\n  <p>\n   This is called by\n   <a class="reference internal" href="#flask.ctx.AppContext.pop" title="flask.ctx.AppContext.pop">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      AppContext.pop()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      exc\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#BaseException" title="(in Python v3.11)">\n      <em>\n       BaseException\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "do_teardown_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.do_teardown_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    do_teardown_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     exc=&lt;object\n    </span>\n    <span class="pre">\n     object&gt;\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.do_teardown_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Called after the request is dispatched and the response is\nreturned, right before the request context is popped.\n  </p>\n  <p>\n   This calls all functions decorated with\n   <a class="reference internal" href="#flask.Flask.teardown_request" title="flask.Flask.teardown_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      teardown_request()\n     </span>\n    </code>\n   </a>\n   , and\n   <a class="reference internal" href="#flask.Blueprint.teardown_request" title="flask.Blueprint.teardown_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Blueprint.teardown_request()\n     </span>\n    </code>\n   </a>\n   if a blueprint handled the request. Finally, the\n   <a class="reference internal" href="#flask.request_tearing_down" title="flask.request_tearing_down">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      request_tearing_down\n     </span>\n    </code>\n   </a>\n   signal is sent.\n  </p>\n  <p>\n   This is called by\n   <a class="reference internal" href="#flask.ctx.RequestContext.pop" title="flask.ctx.RequestContext.pop">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      RequestContext.pop()\n     </span>\n    </code>\n   </a>\n   ,\nwhich may be delayed during testing to maintain access to\nresources.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      exc\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#BaseException" title="(in Python v3.11)">\n      <em>\n       BaseException\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 An unhandled exception raised while dispatching the\nrequest. Detected from the current exception information if\nnot passed. Passed to each teardown function.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.9:\n     </span>\n     Added the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       exc\n      </span>\n     </code>\n     argument.\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "endpoint",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.endpoint">\n  <span class="sig-name descname">\n   <span class="pre">\n    endpoint\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     endpoint\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.endpoint" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Decorate a view function to register it for the given\nendpoint. Used if a rule is added without a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     view_func\n    </span>\n   </code>\n   with\n   <a class="reference internal" href="#flask.Flask.add_url_rule" title="flask.Flask.add_url_rule">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      add_url_rule()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span><span class="o">.</span><span class="n">add_url_rule</span><span class="p">(</span><span class="s2">"/ex"</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="s2">"example"</span><span class="p">)</span>\n\n<span class="nd">@app</span><span class="o">.</span><span class="n">endpoint</span><span class="p">(</span><span class="s2">"example"</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">example</span><span class="p">():</span>\n    <span class="o">...</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      endpoint\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     ) \u2013 The endpoint name to associate with the view\nfunction.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.F], flask.scaffold.F]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "ensure_sync",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.ensure_sync">\n  <span class="sig-name descname">\n   <span class="pre">\n    ensure_sync\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     func\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.ensure_sync" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Ensure that the function is synchronous for WSGI workers.\nPlain\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     def\n    </span>\n   </code>\n   functions are returned as-is.\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     async\n    </span>\n    <span class="pre">\n     def\n    </span>\n   </code>\n   functions are wrapped to run and wait for the response.\n  </p>\n  <p>\n   Override this method to change how the app runs async views.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      func\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "errorhandler",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.errorhandler">\n  <span class="sig-name descname">\n   <span class="pre">\n    errorhandler\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     code_or_exception\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.errorhandler" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a function to handle errors by code or exception class.\n  </p>\n  <p>\n   A decorator that is used to register a function given an\nerror code.  Example:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">errorhandler</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">page_not_found</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>\n    <span class="k">return</span> <span class="s1">\'This page does not exist\'</span><span class="p">,</span> <span class="mi">404</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   You can also register handlers for arbitrary exceptions:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">errorhandler</span><span class="p">(</span><span class="n">DatabaseError</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">special_exception_handler</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>\n    <span class="k">return</span> <span class="s1">\'Database connection failed\'</span><span class="p">,</span> <span class="mi">500</span>\n</pre>\n   </div>\n  </div>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7:\n     </span>\n     Use\n     <a class="reference internal" href="#flask.Flask.register_error_handler" title="flask.Flask.register_error_handler">\n      <code class="xref py py-meth docutils literal notranslate">\n       <span class="pre">\n        register_error_handler()\n       </span>\n      </code>\n     </a>\n     instead of modifying\n     <a class="reference internal" href="#flask.Flask.error_handler_spec" title="flask.Flask.error_handler_spec">\n      <code class="xref py py-attr docutils literal notranslate">\n       <span class="pre">\n        error_handler_spec\n       </span>\n      </code>\n     </a>\n     directly, for application wide error\nhandlers.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7:\n     </span>\n     One can now additionally also register custom exception types\nthat do not necessarily have to be a subclass of the\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.HTTPException" title="(in Werkzeug v2.2.x)">\n      <code class="xref py py-class docutils literal notranslate">\n       <span class="pre">\n        HTTPException\n       </span>\n      </code>\n     </a>\n     class.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      code_or_exception\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Type" title="(in Python v3.11)">\n      <em>\n       Type\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#Exception" title="(in Python v3.11)">\n      <em>\n       Exception\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      <em>\n       int\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 the code as integer for the handler, or\nan arbitrary exception\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_error_handler], flask.scaffold.T_error_handler]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "full_dispatch_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.full_dispatch_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    full_dispatch_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.full_dispatch_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.wrappers.Response">\n      flask.wrappers.Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "get",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.get">\n  <span class="sig-name descname">\n   <span class="pre">\n    get\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.get" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Flask.route" title="flask.Flask.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["GET"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "get_send_file_max_age",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.get_send_file_max_age">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_send_file_max_age\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     filename\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.get_send_file_max_age" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Used by\n   <a class="reference internal" href="#flask.send_file" title="flask.send_file">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      send_file()\n     </span>\n    </code>\n   </a>\n   to determine the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     max_age\n    </span>\n   </code>\n   cache\nvalue for a given file path if it wasn\u2019t passed.\n  </p>\n  <p>\n   By default, this returns\n   <a class="reference internal" href="../config/#SEND_FILE_MAX_AGE_DEFAULT" title="SEND_FILE_MAX_AGE_DEFAULT">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      SEND_FILE_MAX_AGE_DEFAULT\n     </span>\n    </code>\n   </a>\n   from\nthe configuration of\n   <a class="reference internal" href="#flask.current_app" title="flask.current_app">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      current_app\n     </span>\n    </code>\n   </a>\n   . This defaults\nto\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   , which tells the browser to use conditional requests\ninstead of a timed cache, which is usually preferable.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0:\n     </span>\n     The default configuration is\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       None\n      </span>\n     </code>\n     instead of 12 hours.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      filename\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "handle_exception",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.handle_exception">\n  <span class="sig-name descname">\n   <span class="pre">\n    handle_exception\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     e\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.handle_exception" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Handle an exception that did not have an error handler\nassociated with it, or that was raised from an error handler.\nThis always causes a 500\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     InternalServerError\n    </span>\n   </code>\n   .\n  </p>\n  <p>\n   Always sends the\n   <a class="reference internal" href="#flask.got_request_exception" title="flask.got_request_exception">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      got_request_exception\n     </span>\n    </code>\n   </a>\n   signal.\n  </p>\n  <p>\n   If\n   <a class="reference internal" href="#flask.Flask.propagate_exceptions" title="flask.Flask.propagate_exceptions">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      propagate_exceptions\n     </span>\n    </code>\n   </a>\n   is\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   , such as in debug\nmode, the error will be re-raised so that the debugger can\ndisplay it. Otherwise, the original exception is logged, and\nan\n   <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.InternalServerError" title="(in Werkzeug v2.2.x)">\n    <code class="xref py py-exc docutils literal notranslate">\n     <span class="pre">\n      InternalServerError\n     </span>\n    </code>\n   </a>\n   is returned.\n  </p>\n  <p>\n   If an error handler is registered for\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     InternalServerError\n    </span>\n   </code>\n   or\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     500\n    </span>\n   </code>\n   , it will be used. For consistency, the handler will\nalways receive the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     InternalServerError\n    </span>\n   </code>\n   . The original\nunhandled exception is available as\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     e.original_exception\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.1.0:\n     </span>\n     Always passes the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       InternalServerError\n      </span>\n     </code>\n     instance to the\nhandler, setting\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       original_exception\n      </span>\n     </code>\n     to the unhandled\nerror.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.1.0:\n     </span>\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       after_request\n      </span>\n     </code>\n     functions and other finalization is done\neven for the default 500 response when there is no handler.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.3.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      e\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#Exception" title="(in Python v3.11)">\n      <em>\n       Exception\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.wrappers.Response">\n      flask.wrappers.Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "handle_http_exception",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.handle_http_exception">\n  <span class="sig-name descname">\n   <span class="pre">\n    handle_http_exception\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     e\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.handle_http_exception" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.0.3:\n     </span>\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       RoutingException\n      </span>\n     </code>\n     , used internally for actions such as\n slash redirects during routing, is not passed to error\n handlers.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.0:\n     </span>\n     Exceptions are looked up by code\n     <em>\n      and\n     </em>\n     by MRO, so\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       HTTPException\n      </span>\n     </code>\n     subclasses can be handled with a catch-all\nhandler for the base\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       HTTPException\n      </span>\n     </code>\n     .\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.3.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      e\n     </strong>\n     (\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.HTTPException" title="(in Werkzeug v2.2.x)">\n      <em>\n       werkzeug.exceptions.HTTPException\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.HTTPException" title="(in Werkzeug v2.2.x)">\n      werkzeug.exceptions.HTTPException\n     </a>\n     ,\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]], WSGIApplication]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "handle_url_build_error",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.handle_url_build_error">\n  <span class="sig-name descname">\n   <span class="pre">\n    handle_url_build_error\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     error\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     endpoint\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     values\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.handle_url_build_error" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Called by\n   <a class="reference internal" href="#flask.Flask.url_for" title="flask.Flask.url_for">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      url_for()\n     </span>\n    </code>\n   </a>\n   if a\n   <code class="xref py py-exc docutils literal notranslate">\n    <span class="pre">\n     BuildError\n    </span>\n   </code>\n   was raised. If this returns\na value, it will be returned by\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     url_for\n    </span>\n   </code>\n   , otherwise the error\nwill be re-raised.\n  </p>\n  <p>\n   Each function in\n   <a class="reference internal" href="#flask.Flask.url_build_error_handlers" title="flask.Flask.url_build_error_handlers">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      url_build_error_handlers\n     </span>\n    </code>\n   </a>\n   is called with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     error\n    </span>\n   </code>\n   ,\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     endpoint\n    </span>\n   </code>\n   and\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     values\n    </span>\n   </code>\n   . If a function returns\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   or raises a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     BuildError\n    </span>\n   </code>\n   , it is skipped. Otherwise,\nits return value is returned by\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     url_for\n    </span>\n   </code>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        error\n       </strong>\n       (\n       <em>\n        werkzeug.routing.exceptions.BuildError\n       </em>\n       ) \u2013 The active\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         BuildError\n        </span>\n       </code>\n       being handled.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        endpoint\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 The endpoint being built.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        values\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Dict" title="(in Python v3.11)">\n        <em>\n         Dict\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 The keyword arguments passed to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         url_for\n        </span>\n       </code>\n       .\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "handle_user_exception",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.handle_user_exception">\n  <span class="sig-name descname">\n   <span class="pre">\n    handle_user_exception\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     e\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.handle_user_exception" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This method is called whenever an exception occurs that\nshould be handled. A special case is\n   <code class="xref py py-class docutils literal notranslate">\n    <span class="pre">\n     HTTPException\n    </span>\n   </code>\n   which is forwarded to the\n   <a class="reference internal" href="#flask.Flask.handle_http_exception" title="flask.Flask.handle_http_exception">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      handle_http_exception()\n     </span>\n    </code>\n   </a>\n   method. This function will either\nreturn a response value or reraise the exception with the same\ntraceback.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.0:\n     </span>\n     Key errors raised from request data like\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       form\n      </span>\n     </code>\n     show the\nbad key in debug mode rather than a generic bad request\nmessage.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      e\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#Exception" title="(in Python v3.11)">\n      <em>\n       Exception\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.HTTPException" title="(in Werkzeug v2.2.x)">\n      werkzeug.exceptions.HTTPException\n     </a>\n     ,\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]], WSGIApplication]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "inject_url_defaults",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.inject_url_defaults">\n  <span class="sig-name descname">\n   <span class="pre">\n    inject_url_defaults\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     endpoint\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     values\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.inject_url_defaults" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        endpoint\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        values\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict" title="(in Python v3.11)">\n        <em>\n         dict\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "iter_blueprints",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.iter_blueprints">\n  <span class="sig-name descname">\n   <span class="pre">\n    iter_blueprints\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.iter_blueprints" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Iterates over all blueprints by the order they were registered.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.11.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.ValuesView" title="(in Python v3.11)">\n      <em>\n       ValuesView\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Blueprint" title="flask.Blueprint">\n      Blueprint\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "log_exception",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.log_exception">\n  <span class="sig-name descname">\n   <span class="pre">\n    log_exception\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     exc_info\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.log_exception" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Logs an exception.  This is called by\n   <a class="reference internal" href="#flask.Flask.handle_exception" title="flask.Flask.handle_exception">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      handle_exception()\n     </span>\n    </code>\n   </a>\n   if debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the\n   <a class="reference internal" href="#flask.Flask.logger" title="flask.Flask.logger">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      logger\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.8.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      exc_info\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#type" title="(in Python v3.11)">\n      <em>\n       type\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#BaseException" title="(in Python v3.11)">\n      <em>\n       BaseException\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/types.html#types.TracebackType" title="(in Python v3.11)">\n      <em>\n       types.TracebackType\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <em>\n      None\n     </em>\n     <em>\n      ,\n     </em>\n     <em>\n      None\n     </em>\n     <em>\n      ,\n     </em>\n     <em>\n      None\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "make_aborter",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.make_aborter">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_aborter\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.make_aborter" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create the object to assign to\n   <a class="reference internal" href="#flask.Flask.aborter" title="flask.Flask.aborter">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      aborter\n     </span>\n    </code>\n   </a>\n   . That object\nis called by\n   <a class="reference internal" href="#flask.abort" title="flask.abort">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      flask.abort()\n     </span>\n    </code>\n   </a>\n   to raise HTTP errors, and can\nbe called directly as well.\n  </p>\n  <p>\n   By default, this creates an instance of\n   <a class="reference internal" href="#flask.Flask.aborter_class" title="flask.Flask.aborter_class">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      aborter_class\n     </span>\n    </code>\n   </a>\n   ,\nwhich defaults to\n   <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.Aborter" title="(in Werkzeug v2.2.x)">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      werkzeug.exceptions.Aborter\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <div class="versionadded">\n   <p>\n    <span class="versionmodified added">\n     New in version 2.2.\n    </span>\n   </p>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.Aborter" title="(in Werkzeug v2.2.x)">\n      werkzeug.exceptions.Aborter\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "make_config",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.make_config">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_config\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     instance_relative\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.make_config" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Used to create the config attribute by the Flask constructor.\nThe\n   <cite>\n    instance_relative\n   </cite>\n   parameter is passed in from the constructor\nof Flask (there named\n   <cite>\n    instance_relative_config\n   </cite>\n   ) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.8.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      instance_relative\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      <em>\n       bool\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.Config" title="flask.config.Config">\n      flask.config.Config\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "make_default_options_response",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.make_default_options_response">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_default_options_response\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.make_default_options_response" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This method is called to create the default\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     OPTIONS\n    </span>\n   </code>\n   response.\nThis can be changed through subclassing to change the default\nbehavior of\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     OPTIONS\n    </span>\n   </code>\n   responses.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.wrappers.Response">\n      flask.wrappers.Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "make_response",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.make_response">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_response\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rv\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.make_response" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Convert the return value from a view function to an instance of\n   <a class="reference internal" href="#flask.Flask.response_class" title="flask.Flask.response_class">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      response_class\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      rv\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      <em>\n       Response\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      <em>\n       Response\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <em>\n      Headers\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <em>\n      ...\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <em>\n      ...\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      <em>\n       Response\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      <em>\n       int\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      <em>\n       Response\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      <em>\n       int\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <em>\n      Headers\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <em>\n      ...\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <em>\n      ...\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <em>\n      WSGIApplication\n     </em>\n     <em>\n      ]\n     </em>\n     ) \u2013\n     <p>\n      the return value from the view function. The view function\nmust return a response. Returning\n      <code class="docutils literal notranslate">\n       <span class="pre">\n        None\n       </span>\n      </code>\n      , or the view ending\nwithout returning, is not allowed. The following types are allowed\nfor\n      <code class="docutils literal notranslate">\n       <span class="pre">\n        view_rv\n       </span>\n      </code>\n      :\n     </p>\n     <dl class="simple">\n      <dt>\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         str\n        </span>\n       </code>\n      </dt>\n      <dd>\n       <p>\n        A response object is created with the string encoded to UTF-8\nas the body.\n       </p>\n      </dd>\n      <dt>\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         bytes\n        </span>\n       </code>\n      </dt>\n      <dd>\n       <p>\n        A response object is created with the bytes as the body.\n       </p>\n      </dd>\n      <dt>\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         dict\n        </span>\n       </code>\n      </dt>\n      <dd>\n       <p>\n        A dictionary that will be jsonify\u2019d before being returned.\n       </p>\n      </dd>\n      <dt>\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         list\n        </span>\n       </code>\n      </dt>\n      <dd>\n       <p>\n        A list that will be jsonify\u2019d before being returned.\n       </p>\n      </dd>\n      <dt>\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         generator\n        </span>\n       </code>\n       or\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         iterator\n        </span>\n       </code>\n      </dt>\n      <dd>\n       <p>\n        A generator that returns\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          str\n         </span>\n        </code>\n        or\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          bytes\n         </span>\n        </code>\n        to be\nstreamed as the response.\n       </p>\n      </dd>\n      <dt>\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         tuple\n        </span>\n       </code>\n      </dt>\n      <dd>\n       <p>\n        Either\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          (body,\n         </span>\n         <span class="pre">\n          status,\n         </span>\n         <span class="pre">\n          headers)\n         </span>\n        </code>\n        ,\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          (body,\n         </span>\n         <span class="pre">\n          status)\n         </span>\n        </code>\n        , or\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          (body,\n         </span>\n         <span class="pre">\n          headers)\n         </span>\n        </code>\n        , where\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          body\n         </span>\n        </code>\n        is any of the other types\nallowed here,\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          status\n         </span>\n        </code>\n        is a string or an integer, and\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          headers\n         </span>\n        </code>\n        is a dictionary or a list of\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          (key,\n         </span>\n         <span class="pre">\n          value)\n         </span>\n        </code>\n        tuples. If\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          body\n         </span>\n        </code>\n        is a\n        <a class="reference internal" href="#flask.Flask.response_class" title="flask.Flask.response_class">\n         <code class="xref py py-attr docutils literal notranslate">\n          <span class="pre">\n           response_class\n          </span>\n         </code>\n        </a>\n        instance,\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          status\n         </span>\n        </code>\n        overwrites the exiting value and\n        <code class="docutils literal notranslate">\n         <span class="pre">\n          headers\n         </span>\n        </code>\n        are\nextended.\n       </p>\n      </dd>\n      <dt>\n       <a class="reference internal" href="#flask.Flask.response_class" title="flask.Flask.response_class">\n        <code class="xref py py-attr docutils literal notranslate">\n         <span class="pre">\n          response_class\n         </span>\n        </code>\n       </a>\n      </dt>\n      <dd>\n       <p>\n        The object is returned unchanged.\n       </p>\n      </dd>\n      <dt>\n       other\n       <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/wrappers/#werkzeug.wrappers.Response" title="(in Werkzeug v2.2.x)">\n        <code class="xref py py-class docutils literal notranslate">\n         <span class="pre">\n          Response\n         </span>\n        </code>\n       </a>\n       class\n      </dt>\n      <dd>\n       <p>\n        The object is coerced to\n        <a class="reference internal" href="#flask.Flask.response_class" title="flask.Flask.response_class">\n         <code class="xref py py-attr docutils literal notranslate">\n          <span class="pre">\n           response_class\n          </span>\n         </code>\n        </a>\n        .\n       </p>\n      </dd>\n      <dt>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#callable" title="(in Python v3.11)">\n        <code class="xref py py-func docutils literal notranslate">\n         <span class="pre">\n          callable()\n         </span>\n        </code>\n       </a>\n      </dt>\n      <dd>\n       <p>\n        The function is called as a WSGI application. The result is\nused to create a response object.\n       </p>\n      </dd>\n     </dl>\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.wrappers.Response">\n      flask.wrappers.Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <div class="versionchanged">\n   <p>\n    <span class="versionmodified changed">\n     Changed in version 2.2:\n    </span>\n    A generator will be converted to a streaming response.\nA list will be converted to a JSON response.\n   </p>\n  </div>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.1:\n     </span>\n     A dict will be converted to a JSON response.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.9:\n     </span>\n     Previously a tuple was interpreted as the arguments for the\nresponse object.\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "make_shell_context",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.make_shell_context">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_shell_context\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.make_shell_context" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.11.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict" title="(in Python v3.11)">\n      dict\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "open_instance_resource",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.open_instance_resource">\n  <span class="sig-name descname">\n   <span class="pre">\n    open_instance_resource\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     resource\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     mode\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     \'rb\'\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.open_instance_resource" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Opens a resource from the application\u2019s instance folder\n(\n   <a class="reference internal" href="#flask.Flask.instance_path" title="flask.Flask.instance_path">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      instance_path\n     </span>\n    </code>\n   </a>\n   ).  Otherwise works like\n   <a class="reference internal" href="#flask.Flask.open_resource" title="flask.Flask.open_resource">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      open_resource()\n     </span>\n    </code>\n   </a>\n   .  Instance resources can also be opened for\nwriting.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        resource\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        mode\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 resource file opening mode, default is \u2018rb\u2019.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.IO" title="(in Python v3.11)">\n      <em>\n       IO\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "open_resource",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.open_resource">\n  <span class="sig-name descname">\n   <span class="pre">\n    open_resource\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     resource\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     mode\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     \'rb\'\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.open_resource" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Open a resource file relative to\n   <a class="reference internal" href="#flask.Flask.root_path" title="flask.Flask.root_path">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      root_path\n     </span>\n    </code>\n   </a>\n   for\nreading.\n  </p>\n  <p>\n   For example, if the file\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     schema.sql\n    </span>\n   </code>\n   is next to the file\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     app.py\n    </span>\n   </code>\n   where the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     Flask\n    </span>\n   </code>\n   app is defined, it can be opened\nwith:\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">open_resource</span><span class="p">(</span><span class="s2">"schema.sql"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>\n    <span class="n">conn</span><span class="o">.</span><span class="n">executescript</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        resource\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 Path to the resource relative to\n       <a class="reference internal" href="#flask.Flask.root_path" title="flask.Flask.root_path">\n        <code class="xref py py-attr docutils literal notranslate">\n         <span class="pre">\n          root_path\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        mode\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 Open the file in this mode. Only reading is\nsupported, valid values are \u201cr\u201d (or \u201crt\u201d) and \u201crb\u201d.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.IO" title="(in Python v3.11)">\n      <em>\n       IO\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "patch",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.patch">\n  <span class="sig-name descname">\n   <span class="pre">\n    patch\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.patch" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Flask.route" title="flask.Flask.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["PATCH"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "post",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.post">\n  <span class="sig-name descname">\n   <span class="pre">\n    post\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.post" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Flask.route" title="flask.Flask.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["POST"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "preprocess_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.preprocess_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    preprocess_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.preprocess_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Called before the request is dispatched. Calls\n   <a class="reference internal" href="#flask.Flask.url_value_preprocessors" title="flask.Flask.url_value_preprocessors">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      url_value_preprocessors\n     </span>\n    </code>\n   </a>\n   registered with the app and the\ncurrent blueprint (if any). Then calls\n   <a class="reference internal" href="#flask.Flask.before_request_funcs" title="flask.Flask.before_request_funcs">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      before_request_funcs\n     </span>\n    </code>\n   </a>\n   registered with the app and the blueprint.\n  </p>\n  <p>\n   If any\n   <a class="reference internal" href="#flask.Flask.before_request" title="flask.Flask.before_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      before_request()\n     </span>\n    </code>\n   </a>\n   handler returns a non-None value, the\nvalue is handled as if it was the return value from the view, and\nfurther request handling is stopped.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]], WSGIApplication]]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "process_response",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.process_response">\n  <span class="sig-name descname">\n   <span class="pre">\n    process_response\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     response\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.process_response" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Can be overridden in order to modify the response object\nbefore it\u2019s sent to the WSGI server.  By default this will\ncall all the\n   <a class="reference internal" href="#flask.Flask.after_request" title="flask.Flask.after_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      after_request()\n     </span>\n    </code>\n   </a>\n   decorated functions.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.5:\n     </span>\n     As of Flask 0.5 the functions registered for after request\nexecution are called in reverse order of registration.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      response\n     </strong>\n     (\n     <a class="reference internal" href="#flask.Response" title="flask.wrappers.Response">\n      <em>\n       flask.wrappers.Response\n      </em>\n     </a>\n     ) \u2013 a\n     <a class="reference internal" href="#flask.Flask.response_class" title="flask.Flask.response_class">\n      <code class="xref py py-attr docutils literal notranslate">\n       <span class="pre">\n        response_class\n       </span>\n      </code>\n     </a>\n     object.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     a new response object or the same, has to be an\ninstance of\n     <a class="reference internal" href="#flask.Flask.response_class" title="flask.Flask.response_class">\n      <code class="xref py py-attr docutils literal notranslate">\n       <span class="pre">\n        response_class\n       </span>\n      </code>\n     </a>\n     .\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.wrappers.Response">\n      flask.wrappers.Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "put",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.put">\n  <span class="sig-name descname">\n   <span class="pre">\n    put\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.put" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Flask.route" title="flask.Flask.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["PUT"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "redirect",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.redirect">\n  <span class="sig-name descname">\n   <span class="pre">\n    redirect\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     location\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     code\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     302\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.redirect" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create a redirect response object.\n  </p>\n  <p>\n   This is called by\n   <a class="reference internal" href="#flask.redirect" title="flask.redirect">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      flask.redirect()\n     </span>\n    </code>\n   </a>\n   , and can be called\ndirectly as well.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        location\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 The URL to redirect to.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        code\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       ) \u2013 The status code for the redirect.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/wrappers/#werkzeug.wrappers.Response" title="(in Werkzeug v2.2.x)">\n      werkzeug.wrappers.response.Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <div class="versionadded">\n   <p>\n    <span class="versionmodified added">\n     New in version 2.2:\n    </span>\n    Moved from\n    <code class="docutils literal notranslate">\n     <span class="pre">\n      flask.redirect\n     </span>\n    </code>\n    , which calls this method.\n   </p>\n  </div>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "register_blueprint",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.register_blueprint">\n  <span class="sig-name descname">\n   <span class="pre">\n    register_blueprint\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     blueprint\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.register_blueprint" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a\n   <a class="reference internal" href="#flask.Blueprint" title="flask.Blueprint">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      Blueprint\n     </span>\n    </code>\n   </a>\n   on the application. Keyword\narguments passed to this method will override the defaults set on the\nblueprint.\n  </p>\n  <p>\n   Calls the blueprint\u2019s\n   <a class="reference internal" href="#flask.Blueprint.register" title="flask.Blueprint.register">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      register()\n     </span>\n    </code>\n   </a>\n   method after\nrecording the blueprint in the application\u2019s\n   <a class="reference internal" href="#flask.Flask.blueprints" title="flask.Flask.blueprints">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      blueprints\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        blueprint\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Blueprint" title="flask.Blueprint">\n        <em>\n         Blueprint\n        </em>\n       </a>\n       ) \u2013 The blueprint to register.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        url_prefix\n       </strong>\n       \u2013 Blueprint routes will be prefixed with this.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        subdomain\n       </strong>\n       \u2013 Blueprint routes will match on this subdomain.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        url_defaults\n       </strong>\n       \u2013 Blueprint routes will use these default values for\nview arguments.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Additional keyword arguments are passed to\n       <a class="reference internal" href="#flask.blueprints.BlueprintSetupState" title="flask.blueprints.BlueprintSetupState">\n        <code class="xref py py-class docutils literal notranslate">\n         <span class="pre">\n          BlueprintSetupState\n         </span>\n        </code>\n       </a>\n       . They can be\naccessed in\n       <a class="reference internal" href="#flask.Blueprint.record" title="flask.Blueprint.record">\n        <code class="xref py py-meth docutils literal notranslate">\n         <span class="pre">\n          record()\n         </span>\n        </code>\n       </a>\n       callbacks.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0.1:\n     </span>\n     The\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       name\n      </span>\n     </code>\n     option can be used to change the (pre-dotted)\nname the blueprint is registered with. This allows the same\nblueprint to be registered multiple times with unique names\nfor\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       url_for\n      </span>\n     </code>\n     .\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7.\n     </span>\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "register_error_handler",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.register_error_handler">\n  <span class="sig-name descname">\n   <span class="pre">\n    register_error_handler\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     code_or_exception\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.register_error_handler" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Alternative error attach function to the\n   <a class="reference internal" href="#flask.Flask.errorhandler" title="flask.Flask.errorhandler">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      errorhandler()\n     </span>\n    </code>\n   </a>\n   decorator that is more straightforward to use for non decorator\nusage.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        code_or_exception\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Type" title="(in Python v3.11)">\n        <em>\n         Type\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#Exception" title="(in Python v3.11)">\n        <em>\n         Exception\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        f\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <em>\n        WSGIApplication\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "request_context",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.request_context">\n  <span class="sig-name descname">\n   <span class="pre">\n    request_context\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     environ\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.request_context" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create a\n   <a class="reference internal" href="#flask.ctx.RequestContext" title="flask.ctx.RequestContext">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      RequestContext\n     </span>\n    </code>\n   </a>\n   representing a\nWSGI environment. Use a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block to push the context,\nwhich will make\n   <a class="reference internal" href="#flask.request" title="flask.request">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      request\n     </span>\n    </code>\n   </a>\n   point at this request.\n  </p>\n  <p>\n   See\n   <a class="reference internal" href="../reqcontext/">\n    <span class="doc">\n     The Request Context\n    </span>\n   </a>\n   .\n  </p>\n  <p>\n   Typically you should not call this from your own code. A request\ncontext is automatically pushed by the\n   <a class="reference internal" href="#flask.Flask.wsgi_app" title="flask.Flask.wsgi_app">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      wsgi_app()\n     </span>\n    </code>\n   </a>\n   when\nhandling a request. Use\n   <a class="reference internal" href="#flask.Flask.test_request_context" title="flask.Flask.test_request_context">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      test_request_context()\n     </span>\n    </code>\n   </a>\n   to create\nan environment and context instead of this method.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      environ\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict" title="(in Python v3.11)">\n      <em>\n       dict\n      </em>\n     </a>\n     ) \u2013 a WSGI environment\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.ctx.RequestContext" title="flask.ctx.RequestContext">\n      flask.ctx.RequestContext\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "route",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.route">\n  <span class="sig-name descname">\n   <span class="pre">\n    route\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.route" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Decorate a view function to register it with the given URL\nrule and options. Calls\n   <a class="reference internal" href="#flask.Flask.add_url_rule" title="flask.Flask.add_url_rule">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      add_url_rule()\n     </span>\n    </code>\n   </a>\n   , which has more\ndetails about the implementation.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">"/"</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>\n    <span class="k">return</span> <span class="s2">"Hello, World!"</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   See\n   <a class="reference internal" href="#url-route-registrations">\n    <span class="std std-ref">\n     URL Route Registrations\n    </span>\n   </a>\n   .\n  </p>\n  <p>\n   The endpoint name for the route defaults to the name of the view\nfunction if the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     endpoint\n    </span>\n   </code>\n   parameter isn\u2019t passed.\n  </p>\n  <p>\n   The\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods\n    </span>\n   </code>\n   parameter defaults to\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     ["GET"]\n    </span>\n   </code>\n   .\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     HEAD\n    </span>\n   </code>\n   and\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     OPTIONS\n    </span>\n   </code>\n   are added automatically.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 The URL rule string.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Extra options passed to the\n       <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/routing/#werkzeug.routing.Rule" title="(in Werkzeug v2.2.x)">\n        <code class="xref py py-class docutils literal notranslate">\n         <span class="pre">\n          Rule\n         </span>\n        </code>\n       </a>\n       object.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "run",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.run">\n  <span class="sig-name descname">\n   <span class="pre">\n    run\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     host\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     port\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     debug\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     load_dotenv\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     True\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.run" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Runs the application on a local development server.\n  </p>\n  <p>\n   Do not use\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     run()\n    </span>\n   </code>\n   in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see\n   <a class="reference internal" href="../deploying/">\n    <span class="doc">\n     Deploying to Production\n    </span>\n   </a>\n   for WSGI server recommendations.\n  </p>\n  <p>\n   If the\n   <a class="reference internal" href="#flask.Flask.debug" title="flask.Flask.debug">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      debug\n     </span>\n    </code>\n   </a>\n   flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened.\n  </p>\n  <p>\n   If you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     use_evalex=False\n    </span>\n   </code>\n   as parameter.  This will keep the debugger\u2019s\ntraceback screen active, but disable code execution.\n  </p>\n  <p>\n   It is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the\n   <strong class="command">\n    flask\n   </strong>\n   command line script\u2019s\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     run\n    </span>\n   </code>\n   support.\n  </p>\n  <div class="admonition-keep-in-mind admonition">\n   <p class="admonition-title">\n    Keep in Mind\n   </p>\n   <p>\n    Flask will suppress any server error with a generic error page\nunless it is in debug mode.  As such to enable just the\ninteractive debugger without the code reloading, you have to\ninvoke\n    <a class="reference internal" href="#flask.Flask.run" title="flask.Flask.run">\n     <code class="xref py py-meth docutils literal notranslate">\n      <span class="pre">\n       run()\n      </span>\n     </code>\n    </a>\n    with\n    <code class="docutils literal notranslate">\n     <span class="pre">\n      debug=True\n     </span>\n    </code>\n    and\n    <code class="docutils literal notranslate">\n     <span class="pre">\n      use_reloader=False\n     </span>\n    </code>\n    .\nSetting\n    <code class="docutils literal notranslate">\n     <span class="pre">\n      use_debugger\n     </span>\n    </code>\n    to\n    <code class="docutils literal notranslate">\n     <span class="pre">\n      True\n     </span>\n    </code>\n    without being in debug mode\nwon\u2019t catch any exceptions because there won\u2019t be any to\ncatch.\n   </p>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        host\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the hostname to listen on. Set this to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         \'0.0.0.0\'\n        </span>\n       </code>\n       to\nhave the server available externally as well. Defaults to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         \'127.0.0.1\'\n        </span>\n       </code>\n       or the host in the\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         SERVER_NAME\n        </span>\n       </code>\n       config variable\nif present.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        port\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the port of the webserver. Defaults to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         5000\n        </span>\n       </code>\n       or the\nport defined in the\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         SERVER_NAME\n        </span>\n       </code>\n       config variable if present.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        debug\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 if given, enable or disable debug mode. See\n       <a class="reference internal" href="#flask.Flask.debug" title="flask.Flask.debug">\n        <code class="xref py py-attr docutils literal notranslate">\n         <span class="pre">\n          debug\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        load_dotenv\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Load the nearest\n       <code class="file docutils literal notranslate">\n        <span class="pre">\n         .env\n        </span>\n       </code>\n       and\n       <code class="file docutils literal notranslate">\n        <span class="pre">\n         .flaskenv\n        </span>\n       </code>\n       files to set environment variables. Will also change the working\ndirectory to the directory containing the first file found.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 the options to be forwarded to the underlying Werkzeug\nserver. See\n       <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/serving/#werkzeug.serving.run_simple" title="(in Werkzeug v2.2.x)">\n        <code class="xref py py-func docutils literal notranslate">\n         <span class="pre">\n          werkzeug.serving.run_simple()\n         </span>\n        </code>\n       </a>\n       for more\ninformation.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.0:\n     </span>\n     If installed, python-dotenv will be used to load environment\nvariables from\n     <code class="file docutils literal notranslate">\n      <span class="pre">\n       .env\n      </span>\n     </code>\n     and\n     <code class="file docutils literal notranslate">\n      <span class="pre">\n       .flaskenv\n      </span>\n     </code>\n     files.\n    </p>\n    <p>\n     The\n     <span class="target" id="index-0">\n     </span>\n     <code class="xref std std-envvar docutils literal notranslate">\n      <span class="pre">\n       FLASK_DEBUG\n      </span>\n     </code>\n     environment variable will override\n     <a class="reference internal" href="#flask.Flask.debug" title="flask.Flask.debug">\n      <code class="xref py py-attr docutils literal notranslate">\n       <span class="pre">\n        debug\n       </span>\n      </code>\n     </a>\n     .\n    </p>\n    <p>\n     Threaded mode is enabled by default.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.10:\n     </span>\n     The default port is now picked from the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       SERVER_NAME\n      </span>\n     </code>\n     variable.\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "select_jinja_autoescape",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.select_jinja_autoescape">\n  <span class="sig-name descname">\n   <span class="pre">\n    select_jinja_autoescape\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     filename\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.select_jinja_autoescape" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   if autoescaping should be active for the given\ntemplate name. If no template name is given, returns\n   <cite>\n    True\n   </cite>\n   .\n  </p>\n  <div class="versionchanged">\n   <p>\n    <span class="versionmodified changed">\n     Changed in version 2.2:\n    </span>\n    Autoescaping is now enabled by default for\n    <code class="docutils literal notranslate">\n     <span class="pre">\n      .svg\n     </span>\n    </code>\n    files.\n   </p>\n  </div>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.5.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      filename\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "send_static_file",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.send_static_file">\n  <span class="sig-name descname">\n   <span class="pre">\n    send_static_file\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     filename\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.send_static_file" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   The view function used to serve files from\n   <a class="reference internal" href="#flask.Flask.static_folder" title="flask.Flask.static_folder">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      static_folder\n     </span>\n    </code>\n   </a>\n   . A route is automatically registered for\nthis view at\n   <a class="reference internal" href="#flask.Flask.static_url_path" title="flask.Flask.static_url_path">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      static_url_path\n     </span>\n    </code>\n   </a>\n   if\n   <a class="reference internal" href="#flask.Flask.static_folder" title="flask.Flask.static_folder">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      static_folder\n     </span>\n    </code>\n   </a>\n   is\nset.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.5.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      filename\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "shell_context_processor",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.shell_context_processor">\n  <span class="sig-name descname">\n   <span class="pre">\n    shell_context_processor\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.shell_context_processor" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Registers a shell context processor function.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.11.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.app.T_shell_context_processor\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.app.T_shell_context_processor\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "should_ignore_error",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.should_ignore_error">\n  <span class="sig-name descname">\n   <span class="pre">\n    should_ignore_error\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     error\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.should_ignore_error" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   then the teardown handlers will not be\npassed the error.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      error\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#BaseException" title="(in Python v3.11)">\n      <em>\n       BaseException\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "teardown_appcontext",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.teardown_appcontext">\n  <span class="sig-name descname">\n   <span class="pre">\n    teardown_appcontext\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.teardown_appcontext" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Registers a function to be called when the application\ncontext is popped. The application context is typically popped\nafter the request context for each request, at the end of CLI\ncommands, or after a manually pushed context ends.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>\n    <span class="o">...</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   When the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block exits (or\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     ctx.pop()\n    </span>\n   </code>\n   is called), the\nteardown functions are called just before the app context is\nmade inactive. Since a request context typically also manages an\napplication context it would also be called when you pop a\nrequest context.\n  </p>\n  <p>\n   When a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n   <a class="reference internal" href="#flask.Flask.errorhandler" title="flask.Flask.errorhandler">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      errorhandler()\n     </span>\n    </code>\n   </a>\n   is registered, it will handle the exception\nand the teardown will not receive it.\n  </p>\n  <p>\n   Teardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     try\n    </span>\n   </code>\n   /\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     except\n    </span>\n   </code>\n   block and log any errors.\n  </p>\n  <p>\n   The return values of teardown functions are ignored.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.app.T_teardown\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.app.T_teardown\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "teardown_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.teardown_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    teardown_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.teardown_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a function to be called when the request context is\npopped. Typically this happens at the end of each request, but\ncontexts may be pushed manually as well during testing.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">test_request_context</span><span class="p">():</span>\n    <span class="o">...</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   When the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block exits (or\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     ctx.pop()\n    </span>\n   </code>\n   is called), the\nteardown functions are called just before the request context is\nmade inactive.\n  </p>\n  <p>\n   When a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n   <a class="reference internal" href="#flask.Flask.errorhandler" title="flask.Flask.errorhandler">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      errorhandler()\n     </span>\n    </code>\n   </a>\n   is registered, it will handle the exception\nand the teardown will not receive it.\n  </p>\n  <p>\n   Teardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     try\n    </span>\n   </code>\n   /\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     except\n    </span>\n   </code>\n   block and log any errors.\n  </p>\n  <p>\n   The return values of teardown functions are ignored.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_teardown\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_teardown\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "template_filter",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.template_filter">\n  <span class="sig-name descname">\n   <span class="pre">\n    template_filter\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.template_filter" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">template_filter</span><span class="p">()</span>\n<span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>\n    <span class="k">return</span> <span class="n">s</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      name\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 the optional name of the filter, otherwise the\nfunction name will be used.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.app.T_template_filter], flask.app.T_template_filter]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "template_global",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.template_global">\n  <span class="sig-name descname">\n   <span class="pre">\n    template_global\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.template_global" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">template_global</span><span class="p">()</span>\n<span class="k">def</span> <span class="nf">double</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>\n    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">n</span>\n</pre>\n   </div>\n  </div>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      name\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 the optional name of the global function, otherwise the\nfunction name will be used.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.app.T_template_global], flask.app.T_template_global]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "template_test",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.template_test">\n  <span class="sig-name descname">\n   <span class="pre">\n    template_test\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.template_test" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">template_test</span><span class="p">()</span>\n<span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>\n    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>\n        <span class="k">return</span> <span class="kc">True</span>\n    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>\n        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>\n            <span class="k">return</span> <span class="kc">False</span>\n    <span class="k">return</span> <span class="kc">True</span>\n</pre>\n   </div>\n  </div>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      name\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 the optional name of the test, otherwise the\nfunction name will be used.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.app.T_template_test], flask.app.T_template_test]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "test_cli_runner",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.test_cli_runner">\n  <span class="sig-name descname">\n   <span class="pre">\n    test_cli_runner\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.test_cli_runner" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create a CLI runner for testing CLI commands.\nSee\n   <a class="reference internal" href="../testing/#testing-cli">\n    <span class="std std-ref">\n     Running Commands with the CLI Runner\n    </span>\n   </a>\n   .\n  </p>\n  <p>\n   Returns an instance of\n   <a class="reference internal" href="#flask.Flask.test_cli_runner_class" title="flask.Flask.test_cli_runner_class">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      test_cli_runner_class\n     </span>\n    </code>\n   </a>\n   , by default\n   <a class="reference internal" href="#flask.testing.FlaskCliRunner" title="flask.testing.FlaskCliRunner">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      FlaskCliRunner\n     </span>\n    </code>\n   </a>\n   . The Flask app object is\npassed as the first argument.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 1.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      kwargs\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.testing.FlaskCliRunner" title="flask.testing.FlaskCliRunner">\n      FlaskCliRunner\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "test_client",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.test_client">\n  <span class="sig-name descname">\n   <span class="pre">\n    test_client\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     use_cookies\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     True\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.test_client" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Creates a test client for this application.  For information\nabout unit testing head over to\n   <a class="reference internal" href="../testing/">\n    <span class="doc">\n     Testing Flask Applications\n    </span>\n   </a>\n   .\n  </p>\n  <p>\n   Note that if you are testing for assertions or exceptions in your\napplication code, you must set\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     app.testing\n    </span>\n    <span class="pre">\n     =\n    </span>\n    <span class="pre">\n     True\n    </span>\n   </code>\n   in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the\n   <a class="reference internal" href="#flask.Flask.testing" title="flask.Flask.testing">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      testing\n     </span>\n    </code>\n   </a>\n   attribute.  For example:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span><span class="o">.</span><span class="n">testing</span> <span class="o">=</span> <span class="kc">True</span>\n<span class="n">client</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   The test client can be used in a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block to defer the closing down\nof the context until the end of the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block.  This is useful if\nyou want to access the context locals for testing:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span> <span class="k">as</span> <span class="n">c</span><span class="p">:</span>\n    <span class="n">rv</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">\'/?vodka=42\'</span><span class="p">)</span>\n    <span class="k">assert</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="s1">\'vodka\'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">\'42\'</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   Additionally, you may pass optional keyword arguments that will then\nbe passed to the application\u2019s\n   <a class="reference internal" href="#flask.Flask.test_client_class" title="flask.Flask.test_client_class">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      test_client_class\n     </span>\n    </code>\n   </a>\n   constructor.\nFor example:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="kn">from</span> <span class="nn">flask.testing</span> <span class="kn">import</span> <span class="n">FlaskClient</span>\n\n<span class="k">class</span> <span class="nc">CustomClient</span><span class="p">(</span><span class="n">FlaskClient</span><span class="p">):</span>\n    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>\n        <span class="bp">self</span><span class="o">.</span><span class="n">_authentication</span> <span class="o">=</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">"authentication"</span><span class="p">)</span>\n        <span class="nb">super</span><span class="p">(</span><span class="n">CustomClient</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>\n\n<span class="n">app</span><span class="o">.</span><span class="n">test_client_class</span> <span class="o">=</span> <span class="n">CustomClient</span>\n<span class="n">client</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">(</span><span class="n">authentication</span><span class="o">=</span><span class="s1">\'Basic ....\'</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   See\n   <a class="reference internal" href="#flask.testing.FlaskClient" title="flask.testing.FlaskClient">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      FlaskClient\n     </span>\n    </code>\n   </a>\n   for more information.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.11:\n     </span>\n     Added\n     <cite>\n      **kwargs\n     </cite>\n     to support passing additional keyword arguments to\nthe constructor of\n     <a class="reference internal" href="#flask.Flask.test_client_class" title="flask.Flask.test_client_class">\n      <code class="xref py py-attr docutils literal notranslate">\n       <span class="pre">\n        test_client_class\n       </span>\n      </code>\n     </a>\n     .\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7:\n     </span>\n     The\n     <cite>\n      use_cookies\n     </cite>\n     parameter was added as well as the ability\nto override the client to be used by setting the\n     <a class="reference internal" href="#flask.Flask.test_client_class" title="flask.Flask.test_client_class">\n      <code class="xref py py-attr docutils literal notranslate">\n       <span class="pre">\n        test_client_class\n       </span>\n      </code>\n     </a>\n     attribute.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.4:\n     </span>\n     added support for\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       with\n      </span>\n     </code>\n     block usage for the client.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        use_cookies\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.testing.FlaskClient" title="flask.testing.FlaskClient">\n      FlaskClient\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "test_request_context",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.test_request_context">\n  <span class="sig-name descname">\n   <span class="pre">\n    test_request_context\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.test_request_context" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create a\n   <a class="reference internal" href="#flask.ctx.RequestContext" title="flask.ctx.RequestContext">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      RequestContext\n     </span>\n    </code>\n   </a>\n   for a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request.\n  </p>\n  <p>\n   See\n   <a class="reference internal" href="../reqcontext/">\n    <span class="doc">\n     The Request Context\n    </span>\n   </a>\n   .\n  </p>\n  <p>\n   Use a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block to push the context, which will make\n   <a class="reference internal" href="#flask.request" title="flask.request">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      request\n     </span>\n    </code>\n   </a>\n   point at the request for the created\nenvironment.\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">test_request_context</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>\n    <span class="n">generate_report</span><span class="p">()</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   When using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation.\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">ctx</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">test_request_context</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>\n<span class="n">ctx</span><span class="o">.</span><span class="n">push</span><span class="p">()</span>\n<span class="o">...</span>\n<span class="n">ctx</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   Takes the same arguments as Werkzeug\u2019s\n   <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/test/#werkzeug.test.EnvironBuilder" title="(in Werkzeug v2.2.x)">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      EnvironBuilder\n     </span>\n    </code>\n   </a>\n   , with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        path\n       </strong>\n       \u2013 URL path being requested.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        base_url\n       </strong>\n       \u2013 Base URL where the app is being served, which\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         path\n        </span>\n       </code>\n       is relative to. If not given, built from\n       <a class="reference internal" href="../config/#PREFERRED_URL_SCHEME" title="PREFERRED_URL_SCHEME">\n        <code class="xref py py-data docutils literal notranslate">\n         <span class="pre">\n          PREFERRED_URL_SCHEME\n         </span>\n        </code>\n       </a>\n       ,\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         subdomain\n        </span>\n       </code>\n       ,\n       <a class="reference internal" href="../config/#SERVER_NAME" title="SERVER_NAME">\n        <code class="xref py py-data docutils literal notranslate">\n         <span class="pre">\n          SERVER_NAME\n         </span>\n        </code>\n       </a>\n       , and\n       <a class="reference internal" href="../config/#APPLICATION_ROOT" title="APPLICATION_ROOT">\n        <code class="xref py py-data docutils literal notranslate">\n         <span class="pre">\n          APPLICATION_ROOT\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        subdomain\n       </strong>\n       \u2013 Subdomain name to append to\n       <a class="reference internal" href="../config/#SERVER_NAME" title="SERVER_NAME">\n        <code class="xref py py-data docutils literal notranslate">\n         <span class="pre">\n          SERVER_NAME\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        url_scheme\n       </strong>\n       \u2013 Scheme to use instead of\n       <a class="reference internal" href="../config/#PREFERRED_URL_SCHEME" title="PREFERRED_URL_SCHEME">\n        <code class="xref py py-data docutils literal notranslate">\n         <span class="pre">\n          PREFERRED_URL_SCHEME\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        data\n       </strong>\n       \u2013 The request body, either as a string or a dict of\nform keys and values.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        json\n       </strong>\n       \u2013 If given, this is serialized as JSON and passed as\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         data\n        </span>\n       </code>\n       . Also defaults\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         content_type\n        </span>\n       </code>\n       to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         application/json\n        </span>\n       </code>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 other positional arguments passed to\n       <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/test/#werkzeug.test.EnvironBuilder" title="(in Werkzeug v2.2.x)">\n        <code class="xref py py-class docutils literal notranslate">\n         <span class="pre">\n          EnvironBuilder\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 other keyword arguments passed to\n       <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/test/#werkzeug.test.EnvironBuilder" title="(in Werkzeug v2.2.x)">\n        <code class="xref py py-class docutils literal notranslate">\n         <span class="pre">\n          EnvironBuilder\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.ctx.RequestContext" title="flask.ctx.RequestContext">\n      flask.ctx.RequestContext\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "trap_http_exception",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.trap_http_exception">\n  <span class="sig-name descname">\n   <span class="pre">\n    trap_http_exception\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     e\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.trap_http_exception" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Checks if an HTTP exception should be trapped or not.  By default\nthis will return\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     False\n    </span>\n   </code>\n   for all exceptions except for a bad request\nkey error if\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     TRAP_BAD_REQUEST_ERRORS\n    </span>\n   </code>\n   is set to\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   .  It\nalso returns\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   if\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     TRAP_HTTP_EXCEPTIONS\n    </span>\n   </code>\n   is set to\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   .\n  </p>\n  <p>\n   This is called for all HTTP exceptions raised by a view function.\nIf it returns\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.0:\n     </span>\n     Bad request errors are not trapped by default in debug mode.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.8.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      e\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#Exception" title="(in Python v3.11)">\n      <em>\n       Exception\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "update_template_context",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.update_template_context">\n  <span class="sig-name descname">\n   <span class="pre">\n    update_template_context\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     context\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.update_template_context" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      context\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict" title="(in Python v3.11)">\n      <em>\n       dict\n      </em>\n     </a>\n     ) \u2013 the context as a dictionary that is updated in place\nto add extra variables.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "url_defaults",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.url_defaults">\n  <span class="sig-name descname">\n   <span class="pre">\n    url_defaults\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.url_defaults" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Callback function for URL defaults for all view functions of the\napplication.  It\u2019s called with the endpoint and values and should\nupdate the values passed in place.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_url_defaults\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_url_defaults\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "url_for",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.url_for">\n  <span class="sig-name descname">\n   <span class="pre">\n    url_for\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     endpoint\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     _anchor\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     _method\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     _scheme\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     _external\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     values\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.url_for" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Generate a URL to the given endpoint with the given values.\n  </p>\n  <p>\n   This is called by\n   <a class="reference internal" href="#flask.url_for" title="flask.url_for">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      flask.url_for()\n     </span>\n    </code>\n   </a>\n   , and can be called\ndirectly as well.\n  </p>\n  <p>\n   An\n   <em>\n    endpoint\n   </em>\n   is the name of a URL rule, usually added with\n   <a class="reference internal" href="#flask.Flask.route" title="flask.Flask.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      @app.route()\n     </span>\n    </code>\n   </a>\n   , and usually the same name as the\nview function. A route defined in a\n   <a class="reference internal" href="#flask.Blueprint" title="flask.Blueprint">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      Blueprint\n     </span>\n    </code>\n   </a>\n   will prepend the blueprint\u2019s name separated by a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     .\n    </span>\n   </code>\n   to the\nendpoint.\n  </p>\n  <p>\n   In some cases, such as email messages, you want URLs to include\nthe scheme and domain, like\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     https://example.com/hello\n    </span>\n   </code>\n   . When\nnot in an active request, URLs will be external by default, but\nthis requires setting\n   <a class="reference internal" href="../config/#SERVER_NAME" title="SERVER_NAME">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      SERVER_NAME\n     </span>\n    </code>\n   </a>\n   so Flask knows what\ndomain to use.\n   <a class="reference internal" href="../config/#APPLICATION_ROOT" title="APPLICATION_ROOT">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      APPLICATION_ROOT\n     </span>\n    </code>\n   </a>\n   and\n   <a class="reference internal" href="../config/#PREFERRED_URL_SCHEME" title="PREFERRED_URL_SCHEME">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      PREFERRED_URL_SCHEME\n     </span>\n    </code>\n   </a>\n   should also be configured as\nneeded. This config is only used when not in an active request.\n  </p>\n  <p>\n   Functions can be decorated with\n   <a class="reference internal" href="#flask.Flask.url_defaults" title="flask.Flask.url_defaults">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      url_defaults()\n     </span>\n    </code>\n   </a>\n   to modify\nkeyword arguments before the URL is built.\n  </p>\n  <p>\n   If building fails for some reason, such as an unknown endpoint\nor incorrect values, the app\u2019s\n   <a class="reference internal" href="#flask.Flask.handle_url_build_error" title="flask.Flask.handle_url_build_error">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      handle_url_build_error()\n     </span>\n    </code>\n   </a>\n   method is called. If that returns a string, that is returned,\notherwise a\n   <code class="xref py py-exc docutils literal notranslate">\n    <span class="pre">\n     BuildError\n    </span>\n   </code>\n   is raised.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        endpoint\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 The endpoint name associated with the URL to\ngenerate. If this starts with a\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         .\n        </span>\n       </code>\n       , the current blueprint\nname (if any) will be used.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        _anchor\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 If given, append this as\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         #anchor\n        </span>\n       </code>\n       to the URL.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        _method\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 If given, generate the URL associated with this\nmethod for the endpoint.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        _scheme\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 If given, the URL will have this scheme if it\nis external.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        _external\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 If given, prefer the URL to be internal\n(False) or require it to be external (True). External URLs\ninclude the scheme and domain. When not in an active\nrequest, URLs are external by default.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        values\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Values to use for the variable parts of the URL\nrule. Unknown keys are appended as query string arguments,\nlike\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         ?a=b&amp;c=d\n        </span>\n       </code>\n       .\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <div class="versionadded">\n   <p>\n    <span class="versionmodified added">\n     New in version 2.2:\n    </span>\n    Moved from\n    <code class="docutils literal notranslate">\n     <span class="pre">\n      flask.url_for\n     </span>\n    </code>\n    , which calls this method.\n   </p>\n  </div>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "url_value_preprocessor",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.url_value_preprocessor">\n  <span class="sig-name descname">\n   <span class="pre">\n    url_value_preprocessor\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.url_value_preprocessor" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before the\n   <a class="reference internal" href="#flask.Flask.before_request" title="flask.Flask.before_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      before_request()\n     </span>\n    </code>\n   </a>\n   functions.\n  </p>\n  <p>\n   The function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it in\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     g\n    </span>\n   </code>\n   rather than pass it to\nevery view.\n  </p>\n  <p>\n   The function is passed the endpoint name and values dict. The return\nvalue is ignored.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_url_value_preprocessor\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_url_value_preprocessor\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Object",
    type: ["py", "method"],
    name: "wsgi_app",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Flask.wsgi_app">\n  <span class="sig-name descname">\n   <span class="pre">\n    wsgi_app\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     environ\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     start_response\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Flask.wsgi_app" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   The actual WSGI application. This is not implemented in\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     __call__()\n    </span>\n   </code>\n   so that middlewares can be applied without\nlosing a reference to the app object. Instead of doing this:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span> <span class="o">=</span> <span class="n">MyMiddleware</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   It\u2019s a better idea to do this instead:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span><span class="o">.</span><span class="n">wsgi_app</span> <span class="o">=</span> <span class="n">MyMiddleware</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">wsgi_app</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   Then you still have the original application object around and\ncan continue to call methods on it.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.7:\n     </span>\n     Teardown events for the request and app contexts are called\neven if an unhandled error occurs. Other events may not be\ncalled depending on when an error occurs during dispatch.\nSee\n     <a class="reference internal" href="../reqcontext/#callbacks-and-errors">\n      <span class="std std-ref">\n       Callbacks and Errors\n      </span>\n     </a>\n     .\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        environ\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict" title="(in Python v3.11)">\n        <em>\n         dict\n        </em>\n       </a>\n       ) \u2013 A WSGI environment.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        start_response\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       ) \u2013 A callable accepting a status code,\na list of headers, and an optional exception context to\nstart the response.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "add_app_template_filter",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.add_app_template_filter">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_app_template_filter\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.add_app_template_filter" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template filter, available application wide.  Like\n   <a class="reference internal" href="#flask.Flask.add_template_filter" title="flask.Flask.add_template_filter">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.add_template_filter()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.  Works exactly\nlike the\n   <a class="reference internal" href="#flask.Blueprint.app_template_filter" title="flask.Blueprint.app_template_filter">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      app_template_filter()\n     </span>\n    </code>\n   </a>\n   decorator.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the optional name of the filter, otherwise the\nfunction name will be used.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        f\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "add_app_template_global",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.add_app_template_global">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_app_template_global\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.add_app_template_global" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template global, available application wide.  Like\n   <a class="reference internal" href="#flask.Flask.add_template_global" title="flask.Flask.add_template_global">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.add_template_global()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.  Works exactly\nlike the\n   <a class="reference internal" href="#flask.Blueprint.app_template_global" title="flask.Blueprint.app_template_global">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      app_template_global()\n     </span>\n    </code>\n   </a>\n   decorator.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the optional name of the global, otherwise the\nfunction name will be used.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        f\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "add_app_template_test",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.add_app_template_test">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_app_template_test\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.add_app_template_test" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template test, available application wide.  Like\n   <a class="reference internal" href="#flask.Flask.add_template_test" title="flask.Flask.add_template_test">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.add_template_test()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.  Works exactly\nlike the\n   <a class="reference internal" href="#flask.Blueprint.app_template_test" title="flask.Blueprint.app_template_test">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      app_template_test()\n     </span>\n    </code>\n   </a>\n   decorator.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the optional name of the test, otherwise the\nfunction name will be used.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        f\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "add_url_rule",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.add_url_rule">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_url_rule\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     endpoint\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     view_func\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     provide_automatic_options\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.add_url_rule" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Like\n   <a class="reference internal" href="#flask.Flask.add_url_rule" title="flask.Flask.add_url_rule">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.add_url_rule()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.  The endpoint for\nthe\n   <a class="reference internal" href="#flask.url_for" title="flask.url_for">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      url_for()\n     </span>\n    </code>\n   </a>\n   function is prefixed with the name of the blueprint.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        endpoint\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        view_func\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <em>\n        WSGIApplication\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Awaitable" title="(in Python v3.11)">\n        <em>\n         Awaitable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <em>\n        WSGIApplication\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        provide_automatic_options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "after_app_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.after_app_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    after_app_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.after_app_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Like\n   <a class="reference internal" href="#flask.Flask.after_request" title="flask.Flask.after_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.after_request()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.  Such a function\nis executed after each request, even if outside of the blueprint.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.blueprints.T_after_request\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.blueprints.T_after_request\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "after_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.after_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    after_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.after_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a function to run after each request to this object.\n  </p>\n  <p>\n   The function is called with the response object, and must return\na response object. This allows the functions to modify or\nreplace the response before it is sent.\n  </p>\n  <p>\n   If a function raises an exception, any remaining\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     after_request\n    </span>\n   </code>\n   functions will not be called. Therefore, this\nshould not be used for actions that must execute, such as to\nclose resources. Use\n   <a class="reference internal" href="#flask.Blueprint.teardown_request" title="flask.Blueprint.teardown_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      teardown_request()\n     </span>\n    </code>\n   </a>\n   for that.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_after_request\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_after_request\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "app_context_processor",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.app_context_processor">\n  <span class="sig-name descname">\n   <span class="pre">\n    app_context_processor\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.app_context_processor" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Like\n   <a class="reference internal" href="#flask.Flask.context_processor" title="flask.Flask.context_processor">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.context_processor()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.  Such a\nfunction is executed each request, even if outside of the blueprint.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.blueprints.T_template_context_processor\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.blueprints.T_template_context_processor\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "app_errorhandler",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.app_errorhandler">\n  <span class="sig-name descname">\n   <span class="pre">\n    app_errorhandler\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     code\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.app_errorhandler" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Like\n   <a class="reference internal" href="#flask.Flask.errorhandler" title="flask.Flask.errorhandler">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.errorhandler()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.  This\nhandler is used for all requests, even if outside of the blueprint.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      code\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Type" title="(in Python v3.11)">\n      <em>\n       Type\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#Exception" title="(in Python v3.11)">\n      <em>\n       Exception\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      <em>\n       int\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.blueprints.T_error_handler], flask.blueprints.T_error_handler]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "app_template_filter",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.app_template_filter">\n  <span class="sig-name descname">\n   <span class="pre">\n    app_template_filter\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.app_template_filter" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template filter, available application wide.  Like\n   <a class="reference internal" href="#flask.Flask.template_filter" title="flask.Flask.template_filter">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.template_filter()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      name\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 the optional name of the filter, otherwise the\nfunction name will be used.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.blueprints.T_template_filter], flask.blueprints.T_template_filter]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "app_template_global",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.app_template_global">\n  <span class="sig-name descname">\n   <span class="pre">\n    app_template_global\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.app_template_global" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template global, available application wide.  Like\n   <a class="reference internal" href="#flask.Flask.template_global" title="flask.Flask.template_global">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.template_global()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      name\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 the optional name of the global, otherwise the\nfunction name will be used.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.blueprints.T_template_global], flask.blueprints.T_template_global]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "app_template_test",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.app_template_test">\n  <span class="sig-name descname">\n   <span class="pre">\n    app_template_test\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.app_template_test" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a custom template test, available application wide.  Like\n   <a class="reference internal" href="#flask.Flask.template_test" title="flask.Flask.template_test">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.template_test()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      name\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 the optional name of the test, otherwise the\nfunction name will be used.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.blueprints.T_template_test], flask.blueprints.T_template_test]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "app_url_defaults",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.app_url_defaults">\n  <span class="sig-name descname">\n   <span class="pre">\n    app_url_defaults\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.app_url_defaults" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Same as\n   <a class="reference internal" href="#flask.Blueprint.url_defaults" title="flask.Blueprint.url_defaults">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      url_defaults()\n     </span>\n    </code>\n   </a>\n   but application wide.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.blueprints.T_url_defaults\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.blueprints.T_url_defaults\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "app_url_value_preprocessor",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.app_url_value_preprocessor">\n  <span class="sig-name descname">\n   <span class="pre">\n    app_url_value_preprocessor\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.app_url_value_preprocessor" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Same as\n   <a class="reference internal" href="#flask.Blueprint.url_value_preprocessor" title="flask.Blueprint.url_value_preprocessor">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      url_value_preprocessor()\n     </span>\n    </code>\n   </a>\n   but application wide.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.blueprints.T_url_value_preprocessor\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.blueprints.T_url_value_preprocessor\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "before_app_first_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.before_app_first_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    before_app_first_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.before_app_first_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Like\n   <a class="reference internal" href="#flask.Flask.before_first_request" title="flask.Flask.before_first_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.before_first_request()\n     </span>\n    </code>\n   </a>\n   .  Such a function is\nexecuted before the first request to the application.\n  </p>\n  <div class="deprecated">\n   <p>\n    <span class="versionmodified deprecated">\n     Deprecated since version 2.2:\n    </span>\n    Will be removed in Flask 2.3. Run setup code when creating\nthe application instead.\n   </p>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.blueprints.T_before_first_request\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.blueprints.T_before_first_request\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "before_app_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.before_app_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    before_app_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.before_app_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Like\n   <a class="reference internal" href="#flask.Flask.before_request" title="flask.Flask.before_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.before_request()\n     </span>\n    </code>\n   </a>\n   .  Such a function is executed\nbefore each request, even if outside of a blueprint.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.blueprints.T_before_request\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.blueprints.T_before_request\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "before_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.before_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    before_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.before_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a function to run before each request.\n  </p>\n  <p>\n   For example, this can be used to open a database connection, or\nto load the logged in user from the session.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">before_request</span>\n<span class="k">def</span> <span class="nf">load_user</span><span class="p">():</span>\n    <span class="k">if</span> <span class="s2">"user_id"</span> <span class="ow">in</span> <span class="n">session</span><span class="p">:</span>\n        <span class="n">g</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="s2">"user_id"</span><span class="p">])</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   The function will be called without any arguments. If it returns\na non-\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   value, the value is handled as if it was the\nreturn value from the view, and further request handling is\nstopped.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_before_request\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_before_request\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "context_processor",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.context_processor">\n  <span class="sig-name descname">\n   <span class="pre">\n    context_processor\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.context_processor" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Registers a template context processor function.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_template_context_processor\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_template_context_processor\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "delete",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.delete">\n  <span class="sig-name descname">\n   <span class="pre">\n    delete\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.delete" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Blueprint.route" title="flask.Blueprint.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["DELETE"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "endpoint",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.endpoint">\n  <span class="sig-name descname">\n   <span class="pre">\n    endpoint\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     endpoint\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.endpoint" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Decorate a view function to register it for the given\nendpoint. Used if a rule is added without a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     view_func\n    </span>\n   </code>\n   with\n   <a class="reference internal" href="#flask.Blueprint.add_url_rule" title="flask.Blueprint.add_url_rule">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      add_url_rule()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span><span class="o">.</span><span class="n">add_url_rule</span><span class="p">(</span><span class="s2">"/ex"</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="s2">"example"</span><span class="p">)</span>\n\n<span class="nd">@app</span><span class="o">.</span><span class="n">endpoint</span><span class="p">(</span><span class="s2">"example"</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">example</span><span class="p">():</span>\n    <span class="o">...</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      endpoint\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     ) \u2013 The endpoint name to associate with the view\nfunction.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.F], flask.scaffold.F]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "errorhandler",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.errorhandler">\n  <span class="sig-name descname">\n   <span class="pre">\n    errorhandler\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     code_or_exception\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.errorhandler" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a function to handle errors by code or exception class.\n  </p>\n  <p>\n   A decorator that is used to register a function given an\nerror code.  Example:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">errorhandler</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">page_not_found</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>\n    <span class="k">return</span> <span class="s1">\'This page does not exist\'</span><span class="p">,</span> <span class="mi">404</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   You can also register handlers for arbitrary exceptions:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">errorhandler</span><span class="p">(</span><span class="n">DatabaseError</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">special_exception_handler</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>\n    <span class="k">return</span> <span class="s1">\'Database connection failed\'</span><span class="p">,</span> <span class="mi">500</span>\n</pre>\n   </div>\n  </div>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7:\n     </span>\n     Use\n     <a class="reference internal" href="#flask.Blueprint.register_error_handler" title="flask.Blueprint.register_error_handler">\n      <code class="xref py py-meth docutils literal notranslate">\n       <span class="pre">\n        register_error_handler()\n       </span>\n      </code>\n     </a>\n     instead of modifying\n     <a class="reference internal" href="#flask.Blueprint.error_handler_spec" title="flask.Blueprint.error_handler_spec">\n      <code class="xref py py-attr docutils literal notranslate">\n       <span class="pre">\n        error_handler_spec\n       </span>\n      </code>\n     </a>\n     directly, for application wide error\nhandlers.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7:\n     </span>\n     One can now additionally also register custom exception types\nthat do not necessarily have to be a subclass of the\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.HTTPException" title="(in Werkzeug v2.2.x)">\n      <code class="xref py py-class docutils literal notranslate">\n       <span class="pre">\n        HTTPException\n       </span>\n      </code>\n     </a>\n     class.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      code_or_exception\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Type" title="(in Python v3.11)">\n      <em>\n       Type\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#Exception" title="(in Python v3.11)">\n      <em>\n       Exception\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      <em>\n       int\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 the code as integer for the handler, or\nan arbitrary exception\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_error_handler], flask.scaffold.T_error_handler]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "get",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.get">\n  <span class="sig-name descname">\n   <span class="pre">\n    get\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.get" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Blueprint.route" title="flask.Blueprint.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["GET"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "get_send_file_max_age",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.get_send_file_max_age">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_send_file_max_age\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     filename\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.get_send_file_max_age" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Used by\n   <a class="reference internal" href="#flask.send_file" title="flask.send_file">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      send_file()\n     </span>\n    </code>\n   </a>\n   to determine the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     max_age\n    </span>\n   </code>\n   cache\nvalue for a given file path if it wasn\u2019t passed.\n  </p>\n  <p>\n   By default, this returns\n   <a class="reference internal" href="../config/#SEND_FILE_MAX_AGE_DEFAULT" title="SEND_FILE_MAX_AGE_DEFAULT">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      SEND_FILE_MAX_AGE_DEFAULT\n     </span>\n    </code>\n   </a>\n   from\nthe configuration of\n   <a class="reference internal" href="#flask.current_app" title="flask.current_app">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      current_app\n     </span>\n    </code>\n   </a>\n   . This defaults\nto\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   , which tells the browser to use conditional requests\ninstead of a timed cache, which is usually preferable.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0:\n     </span>\n     The default configuration is\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       None\n      </span>\n     </code>\n     instead of 12 hours.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      filename\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "make_setup_state",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.make_setup_state">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_setup_state\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     first_registration\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.make_setup_state" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Creates an instance of\n   <a class="reference internal" href="#flask.blueprints.BlueprintSetupState" title="flask.blueprints.BlueprintSetupState">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      BlueprintSetupState()\n     </span>\n    </code>\n   </a>\n   object that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n        <em>\n         Flask\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict" title="(in Python v3.11)">\n        <em>\n         dict\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        first_registration\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.blueprints.BlueprintSetupState" title="flask.blueprints.BlueprintSetupState">\n      flask.blueprints.BlueprintSetupState\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "open_resource",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.open_resource">\n  <span class="sig-name descname">\n   <span class="pre">\n    open_resource\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     resource\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     mode\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     \'rb\'\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.open_resource" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Open a resource file relative to\n   <a class="reference internal" href="#flask.Blueprint.root_path" title="flask.Blueprint.root_path">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      root_path\n     </span>\n    </code>\n   </a>\n   for\nreading.\n  </p>\n  <p>\n   For example, if the file\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     schema.sql\n    </span>\n   </code>\n   is next to the file\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     app.py\n    </span>\n   </code>\n   where the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     Flask\n    </span>\n   </code>\n   app is defined, it can be opened\nwith:\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">open_resource</span><span class="p">(</span><span class="s2">"schema.sql"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>\n    <span class="n">conn</span><span class="o">.</span><span class="n">executescript</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        resource\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 Path to the resource relative to\n       <a class="reference internal" href="#flask.Blueprint.root_path" title="flask.Blueprint.root_path">\n        <code class="xref py py-attr docutils literal notranslate">\n         <span class="pre">\n          root_path\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        mode\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 Open the file in this mode. Only reading is\nsupported, valid values are \u201cr\u201d (or \u201crt\u201d) and \u201crb\u201d.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.IO" title="(in Python v3.11)">\n      <em>\n       IO\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "patch",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.patch">\n  <span class="sig-name descname">\n   <span class="pre">\n    patch\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.patch" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Blueprint.route" title="flask.Blueprint.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["PATCH"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "post",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.post">\n  <span class="sig-name descname">\n   <span class="pre">\n    post\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.post" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Blueprint.route" title="flask.Blueprint.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["POST"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "put",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.put">\n  <span class="sig-name descname">\n   <span class="pre">\n    put\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.put" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Shortcut for\n   <a class="reference internal" href="#flask.Blueprint.route" title="flask.Blueprint.route">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      route()\n     </span>\n    </code>\n   </a>\n   with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods=["PUT"]\n    </span>\n   </code>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "record",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.record">\n  <span class="sig-name descname">\n   <span class="pre">\n    record\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     func\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.record" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the\n   <a class="reference internal" href="#flask.Blueprint.make_setup_state" title="flask.Blueprint.make_setup_state">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      make_setup_state()\n     </span>\n    </code>\n   </a>\n   method.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      func\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "record_once",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.record_once">\n  <span class="sig-name descname">\n   <span class="pre">\n    record_once\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     func\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.record_once" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Works like\n   <a class="reference internal" href="#flask.Blueprint.record" title="flask.Blueprint.record">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      record()\n     </span>\n    </code>\n   </a>\n   but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      func\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "register",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.register">\n  <span class="sig-name descname">\n   <span class="pre">\n    register\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.register" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Called by\n   <a class="reference internal" href="#flask.Flask.register_blueprint" title="flask.Flask.register_blueprint">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.register_blueprint()\n     </span>\n    </code>\n   </a>\n   to register all\nviews and callbacks registered on the blueprint with the\napplication. Creates a\n   <a class="reference internal" href="#flask.blueprints.BlueprintSetupState" title="flask.blueprints.BlueprintSetupState">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      BlueprintSetupState\n     </span>\n    </code>\n   </a>\n   and calls\neach\n   <a class="reference internal" href="#flask.Blueprint.record" title="flask.Blueprint.record">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      record()\n     </span>\n    </code>\n   </a>\n   callback with it.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n        <em>\n         Flask\n        </em>\n       </a>\n       ) \u2013 The application this blueprint is being registered\nwith.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict" title="(in Python v3.11)">\n        <em>\n         dict\n        </em>\n       </a>\n       ) \u2013 Keyword arguments forwarded from\n       <a class="reference internal" href="#flask.Flask.register_blueprint" title="flask.Flask.register_blueprint">\n        <code class="xref py py-meth docutils literal notranslate">\n         <span class="pre">\n          register_blueprint()\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0.1:\n     </span>\n     Nested blueprints are registered with their dotted name.\nThis allows different blueprints with the same name to be\nnested at different locations.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0.1:\n     </span>\n     The\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       name\n      </span>\n     </code>\n     option can be used to change the (pre-dotted)\nname the blueprint is registered with. This allows the same\nblueprint to be registered multiple times with unique names\nfor\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       url_for\n      </span>\n     </code>\n     .\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0.1:\n     </span>\n     Registering the same blueprint with the same name multiple\ntimes is deprecated and will become an error in Flask 2.1.\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "register_blueprint",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.register_blueprint">\n  <span class="sig-name descname">\n   <span class="pre">\n    register_blueprint\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     blueprint\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.register_blueprint" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a\n   <a class="reference internal" href="#flask.Blueprint" title="flask.Blueprint">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      Blueprint\n     </span>\n    </code>\n   </a>\n   on this blueprint. Keyword\narguments passed to this method will override the defaults set\non the blueprint.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0.1:\n     </span>\n     The\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       name\n      </span>\n     </code>\n     option can be used to change the (pre-dotted)\nname the blueprint is registered with. This allows the same\nblueprint to be registered multiple times with unique names\nfor\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       url_for\n      </span>\n     </code>\n     .\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        blueprint\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Blueprint" title="flask.blueprints.Blueprint">\n        <em>\n         flask.blueprints.Blueprint\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "register_error_handler",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.register_error_handler">\n  <span class="sig-name descname">\n   <span class="pre">\n    register_error_handler\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     code_or_exception\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.register_error_handler" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Alternative error attach function to the\n   <a class="reference internal" href="#flask.Blueprint.errorhandler" title="flask.Blueprint.errorhandler">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      errorhandler()\n     </span>\n    </code>\n   </a>\n   decorator that is more straightforward to use for non decorator\nusage.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        code_or_exception\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Type" title="(in Python v3.11)">\n        <em>\n         Type\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#Exception" title="(in Python v3.11)">\n        <em>\n         Exception\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        f\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n        <em>\n         Iterator\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        Headers\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n        <em>\n         Sequence\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n        <em>\n         List\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n        <em>\n         Tuple\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <em>\n        ...\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <em>\n        WSGIApplication\n       </em>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "route",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.route">\n  <span class="sig-name descname">\n   <span class="pre">\n    route\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.route" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Decorate a view function to register it with the given URL\nrule and options. Calls\n   <a class="reference internal" href="#flask.Blueprint.add_url_rule" title="flask.Blueprint.add_url_rule">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      add_url_rule()\n     </span>\n    </code>\n   </a>\n   , which has more\ndetails about the implementation.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">"/"</span><span class="p">)</span>\n<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>\n    <span class="k">return</span> <span class="s2">"Hello, World!"</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   See\n   <a class="reference internal" href="#url-route-registrations">\n    <span class="std std-ref">\n     URL Route Registrations\n    </span>\n   </a>\n   .\n  </p>\n  <p>\n   The endpoint name for the route defaults to the name of the view\nfunction if the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     endpoint\n    </span>\n   </code>\n   parameter isn\u2019t passed.\n  </p>\n  <p>\n   The\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     methods\n    </span>\n   </code>\n   parameter defaults to\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     ["GET"]\n    </span>\n   </code>\n   .\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     HEAD\n    </span>\n   </code>\n   and\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     OPTIONS\n    </span>\n   </code>\n   are added automatically.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 The URL rule string.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Extra options passed to the\n       <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/routing/#werkzeug.routing.Rule" title="(in Werkzeug v2.2.x)">\n        <code class="xref py py-class docutils literal notranslate">\n         <span class="pre">\n          Rule\n         </span>\n        </code>\n       </a>\n       object.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[flask.scaffold.T_route], flask.scaffold.T_route]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "send_static_file",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.send_static_file">\n  <span class="sig-name descname">\n   <span class="pre">\n    send_static_file\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     filename\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.send_static_file" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   The view function used to serve files from\n   <a class="reference internal" href="#flask.Blueprint.static_folder" title="flask.Blueprint.static_folder">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      static_folder\n     </span>\n    </code>\n   </a>\n   . A route is automatically registered for\nthis view at\n   <a class="reference internal" href="#flask.Blueprint.static_url_path" title="flask.Blueprint.static_url_path">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      static_url_path\n     </span>\n    </code>\n   </a>\n   if\n   <a class="reference internal" href="#flask.Blueprint.static_folder" title="flask.Blueprint.static_folder">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      static_folder\n     </span>\n    </code>\n   </a>\n   is\nset.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.5.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      filename\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "teardown_app_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.teardown_app_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    teardown_app_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.teardown_app_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Like\n   <a class="reference internal" href="#flask.Flask.teardown_request" title="flask.Flask.teardown_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Flask.teardown_request()\n     </span>\n    </code>\n   </a>\n   but for a blueprint.  Such a\nfunction is executed when tearing down each request, even if outside of\nthe blueprint.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.blueprints.T_teardown\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.blueprints.T_teardown\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "teardown_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.teardown_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    teardown_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.teardown_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a function to be called when the request context is\npopped. Typically this happens at the end of each request, but\ncontexts may be pushed manually as well during testing.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">test_request_context</span><span class="p">():</span>\n    <span class="o">...</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   When the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block exits (or\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     ctx.pop()\n    </span>\n   </code>\n   is called), the\nteardown functions are called just before the request context is\nmade inactive.\n  </p>\n  <p>\n   When a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n   <a class="reference internal" href="#flask.Blueprint.errorhandler" title="flask.Blueprint.errorhandler">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      errorhandler()\n     </span>\n    </code>\n   </a>\n   is registered, it will handle the exception\nand the teardown will not receive it.\n  </p>\n  <p>\n   Teardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     try\n    </span>\n   </code>\n   /\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     except\n    </span>\n   </code>\n   block and log any errors.\n  </p>\n  <p>\n   The return values of teardown functions are ignored.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_teardown\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_teardown\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "url_defaults",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.url_defaults">\n  <span class="sig-name descname">\n   <span class="pre">\n    url_defaults\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.url_defaults" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Callback function for URL defaults for all view functions of the\napplication.  It\u2019s called with the endpoint and values and should\nupdate the values passed in place.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_url_defaults\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_url_defaults\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Blueprint Objects",
    type: ["py", "method"],
    name: "url_value_preprocessor",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Blueprint.url_value_preprocessor">\n  <span class="sig-name descname">\n   <span class="pre">\n    url_value_preprocessor\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Blueprint.url_value_preprocessor" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before the\n   <a class="reference internal" href="#flask.Blueprint.before_request" title="flask.Blueprint.before_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      before_request()\n     </span>\n    </code>\n   </a>\n   functions.\n  </p>\n  <p>\n   The function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it in\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     g\n    </span>\n   </code>\n   rather than pass it to\nevery view.\n  </p>\n  <p>\n   The function is passed the endpoint name and values dict. The return\nvalue is ignored.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <em>\n      flask.scaffold.T_url_value_preprocessor\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     flask.scaffold.T_url_value_preprocessor\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Incoming Request Data",
    type: ["py", "method"],
    name: "application",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Request.application">\n  <em class="property">\n   <span class="pre">\n    classmethod\n   </span>\n   <span class="w">\n   </span>\n  </em>\n  <span class="sig-name descname">\n   <span class="pre">\n    application\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     f\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Request.application" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Decorate a function as responder that accepts the request as\nthe last argument.  This works like the\n   <code class="xref py py-func docutils literal notranslate">\n    <span class="pre">\n     responder()\n    </span>\n   </code>\n   decorator but the function is passed the request object as the\nlast argument and the request object will be closed\nautomatically:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="nd">@Request</span><span class="o">.</span><span class="n">application</span>\n<span class="k">def</span> <span class="nf">my_wsgi_app</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>\n    <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="s1">\'Hello World!\'</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   As of Werkzeug 0.14 HTTP exceptions are automatically caught and\nconverted to responses instead of failing.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      f\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <em>\n      [\n     </em>\n     <a class="reference internal" href="#flask.Request" title="flask.Request">\n      <em>\n       Request\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <em>\n      WSGIApplication\n     </em>\n     <em>\n      ]\n     </em>\n     ) \u2013 the WSGI callable to decorate\n    </p>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     a new WSGI callable\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     WSGIApplication\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Incoming Request Data",
    type: ["py", "method"],
    name: "close",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Request.close">\n  <span class="sig-name descname">\n   <span class="pre">\n    close\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Request.close" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Closes associated resources of this request object.  This\ncloses all file handles explicitly.  You can also use the request\nobject in a with statement which will automatically close it.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Incoming Request Data",
    type: ["py", "method"],
    name: "from_values",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Request.from_values">\n  <em class="property">\n   <span class="pre">\n    classmethod\n   </span>\n   <span class="w">\n   </span>\n  </em>\n  <span class="sig-name descname">\n   <span class="pre">\n    from_values\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Request.from_values" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create a new request object based on the values provided.  If\nenviron is given missing values are filled from there.  This method is\nuseful for small scripts when you need to simulate a request from an URL.\nDo not use this method for unittesting, there is a full featured client\nobject (\n   <code class="xref py py-class docutils literal notranslate">\n    <span class="pre">\n     Client\n    </span>\n   </code>\n   ) that allows to create multipart requests,\nsupport for cookies etc.\n  </p>\n  <p>\n   This accepts the same options as the\n   <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/test/#werkzeug.test.EnvironBuilder" title="(in Werkzeug v2.2.x)">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      EnvironBuilder\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.5:\n     </span>\n     This method now accepts the same arguments as\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/test/#werkzeug.test.EnvironBuilder" title="(in Werkzeug v2.2.x)">\n      <code class="xref py py-class docutils literal notranslate">\n       <span class="pre">\n        EnvironBuilder\n       </span>\n      </code>\n     </a>\n     .  Because of this the\n     <cite>\n      environ\n     </cite>\n     parameter is now called\n     <cite>\n      environ_overrides\n     </cite>\n     .\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Returns\n   </dt>\n   <dd class="field-odd">\n    <p>\n     request object\n    </p>\n   </dd>\n   <dt class="field-even">\n    Parameters\n   </dt>\n   <dd class="field-even">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/wrappers/#werkzeug.wrappers.Request" title="(in Werkzeug v2.2.x)">\n      werkzeug.wrappers.request.Request\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Incoming Request Data",
    type: ["py", "method"],
    name: "get_data",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Request.get_data">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_data\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     cache\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     True\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     as_text\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     parse_form_data\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Request.get_data" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This reads the buffered incoming data from the client into one\nbytes object.  By default this is cached but that behavior can be\nchanged by setting\n   <cite>\n    cache\n   </cite>\n   to\n   <cite>\n    False\n   </cite>\n   .\n  </p>\n  <p>\n   Usually it\u2019s a bad idea to call this method without checking the\ncontent length first as a client could send dozens of megabytes or more\nto cause memory problems on the server.\n  </p>\n  <p>\n   Note that if the form data was already parsed this method will not\nreturn anything as form data parsing does not cache the data like\nthis method does.  To implicitly invoke form data parsing function\nset\n   <cite>\n    parse_form_data\n   </cite>\n   to\n   <cite>\n    True\n   </cite>\n   .  When this is done the return value\nof this method will be an empty string if the form parser handles\nthe data.  This generally is not necessary as if the whole data is\ncached (which is the default) the form parser will used the cached\ndata to parse the form data.  Please be generally aware of checking\nthe content length first in any case before calling this method\nto avoid exhausting server memory.\n  </p>\n  <p>\n   If\n   <cite>\n    as_text\n   </cite>\n   is set to\n   <cite>\n    True\n   </cite>\n   the return value will be a decoded\nstring.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        cache\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        as_text\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        parse_form_data\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Incoming Request Data",
    type: ["py", "method"],
    name: "get_json",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Request.get_json">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_json\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     force\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     silent\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     cache\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     True\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Request.get_json" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Parse\n   <a class="reference internal" href="#flask.Request.data" title="flask.Request.data">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      data\n     </span>\n    </code>\n   </a>\n   as JSON.\n  </p>\n  <p>\n   If the mimetype does not indicate JSON\n(\n   <em class="mimetype">\n    application/json\n   </em>\n   , see\n   <a class="reference internal" href="#flask.Request.is_json" title="flask.Request.is_json">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      is_json\n     </span>\n    </code>\n   </a>\n   ), or parsing\nfails,\n   <a class="reference internal" href="#flask.Request.on_json_loading_failed" title="flask.Request.on_json_loading_failed">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      on_json_loading_failed()\n     </span>\n    </code>\n   </a>\n   is called and\nits return value is used as the return value. By default this\nraises a 400 Bad Request error.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        force\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Ignore the mimetype and always try to parse JSON.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        silent\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Silence mimetype and parsing errors, and\nreturn\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         None\n        </span>\n       </code>\n       instead.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        cache\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Store the parsed JSON to return for subsequent\ncalls.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.1:\n     </span>\n     Raise a 400 error if the content type is incorrect.\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Incoming Request Data",
    type: ["py", "method"],
    name: "make_form_data_parser",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Request.make_form_data_parser">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_form_data_parser\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Request.make_form_data_parser" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Creates the form data parser. Instantiates the\n   <a class="reference internal" href="#flask.Request.form_data_parser_class" title="flask.Request.form_data_parser_class">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      form_data_parser_class\n     </span>\n    </code>\n   </a>\n   with some parameters.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.8.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/http/#werkzeug.formparser.FormDataParser" title="(in Werkzeug v2.2.x)">\n      werkzeug.formparser.FormDataParser\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Incoming Request Data",
    type: ["py", "method"],
    name: "on_json_loading_failed",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Request.on_json_loading_failed">\n  <span class="sig-name descname">\n   <span class="pre">\n    on_json_loading_failed\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     e\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Request.on_json_loading_failed" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Called if\n   <a class="reference internal" href="#flask.Request.get_json" title="flask.Request.get_json">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      get_json()\n     </span>\n    </code>\n   </a>\n   fails and isn\u2019t silenced.\n  </p>\n  <p>\n   If this method returns a value, it is used as the return value\nfor\n   <a class="reference internal" href="#flask.Request.get_json" title="flask.Request.get_json">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      get_json()\n     </span>\n    </code>\n   </a>\n   . The default implementation raises\n   <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.BadRequest" title="(in Werkzeug v2.2.x)">\n    <code class="xref py py-exc docutils literal notranslate">\n     <span class="pre">\n      BadRequest\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      e\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#ValueError" title="(in Python v3.11)">\n      <em>\n       ValueError\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 If parsing failed, this is the exception. It will be\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       None\n      </span>\n     </code>\n     if the content type wasn\u2019t\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       application/json\n      </span>\n     </code>\n     .\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "add_etag",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.add_etag">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_etag\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     overwrite\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     weak\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.add_etag" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Add an etag for the current response if there is none yet.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0:\n     </span>\n     SHA-1 is used to generate the value. MD5 may not be\navailable in some environments.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        overwrite\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        weak\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "calculate_content_length",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.calculate_content_length">\n  <span class="sig-name descname">\n   <span class="pre">\n    calculate_content_length\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.calculate_content_length" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns the content length if available or\n   <cite>\n    None\n   </cite>\n   otherwise.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "call_on_close",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.call_on_close">\n  <span class="sig-name descname">\n   <span class="pre">\n    call_on_close\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     func\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.call_on_close" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Adds a function to the internal list of functions that should\nbe called as part of closing down the response.  Since 0.7 this\nfunction also returns the function that was passed so that this\ncan be used as a decorator.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.6.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      func\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <em>\n      [\n     </em>\n     <em>\n      ]\n     </em>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "close",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.close">\n  <span class="sig-name descname">\n   <span class="pre">\n    close\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.close" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Close the wrapped response if possible.  You can also use the object\nin a with statement which will automatically close it.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9:\n     </span>\n     Can now be used in a with statement.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "delete_cookie",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.delete_cookie">\n  <span class="sig-name descname">\n   <span class="pre">\n    delete_cookie\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     key\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     path\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     \'/\'\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     domain\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     secure\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     httponly\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     samesite\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.delete_cookie" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Delete a cookie.  Fails silently if key doesn\u2019t exist.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        key\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 the key (name) of the cookie to be deleted.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        path\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 if the cookie that should be deleted was limited to a\npath, the path has to be defined here.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        domain\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 if the cookie that should be deleted was limited to a\ndomain, that domain has to be defined here.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        secure\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 If\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         True\n        </span>\n       </code>\n       , the cookie will only be available\nvia HTTPS.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        httponly\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Disallow JavaScript access to the cookie.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        samesite\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 Limit the scope of the cookie to only be\nattached to requests that are \u201csame-site\u201d.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "force_type",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.force_type">\n  <em class="property">\n   <span class="pre">\n    classmethod\n   </span>\n   <span class="w">\n   </span>\n  </em>\n  <span class="sig-name descname">\n   <span class="pre">\n    force_type\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     response\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     environ\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.force_type" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Enforce that the WSGI response is a response object of the current\ntype.  Werkzeug will use the\n   <a class="reference internal" href="#flask.Response" title="flask.Response">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      Response\n     </span>\n    </code>\n   </a>\n   internally in many\nsituations like the exceptions.  If you call\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     get_response()\n    </span>\n   </code>\n   on an\nexception you will get back a regular\n   <a class="reference internal" href="#flask.Response" title="flask.Response">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      Response\n     </span>\n    </code>\n   </a>\n   object, even\nif you are using a custom subclass.\n  </p>\n  <p>\n   This method can enforce a given response type, and it will also\nconvert arbitrary WSGI callables into response objects if an environ\nis provided:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="c1"># convert a Werkzeug response object into an instance of the</span>\n<span class="c1"># MyResponseClass subclass.</span>\n<span class="n">response</span> <span class="o">=</span> <span class="n">MyResponseClass</span><span class="o">.</span><span class="n">force_type</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>\n\n<span class="c1"># convert any WSGI application into a response object</span>\n<span class="n">response</span> <span class="o">=</span> <span class="n">MyResponseClass</span><span class="o">.</span><span class="n">force_type</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">environ</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   This is especially useful if you want to post-process responses in\nthe main dispatcher and use functionality provided by your subclass.\n  </p>\n  <p>\n   Keep in mind that this will modify response objects in place if\npossible!\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        response\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       ) \u2013 a response object or wsgi application.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        environ\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        WSGIEnvironment\n       </em>\n       <em>\n        ]\n       </em>\n       ) \u2013 a WSGI environment object.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     a response object.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "freeze",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.freeze">\n  <span class="sig-name descname">\n   <span class="pre">\n    freeze\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.freeze" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Make the response object ready to be pickled. Does the\nfollowing:\n  </p>\n  <ul class="simple">\n   <li>\n    <p>\n     Buffer the response into a list, ignoring\n     <code class="xref py py-attr docutils literal notranslate">\n      <span class="pre">\n       implicity_sequence_conversion\n      </span>\n     </code>\n     and\n     <a class="reference internal" href="#flask.Response.direct_passthrough" title="flask.Response.direct_passthrough">\n      <code class="xref py py-attr docutils literal notranslate">\n       <span class="pre">\n        direct_passthrough\n       </span>\n      </code>\n     </a>\n     .\n    </p>\n   </li>\n   <li>\n    <p>\n     Set the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       Content-Length\n      </span>\n     </code>\n     header.\n    </p>\n   </li>\n   <li>\n    <p>\n     Generate an\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       ETag\n      </span>\n     </code>\n     header if one is not already set.\n    </p>\n   </li>\n  </ul>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.1:\n     </span>\n     Removed the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       no_etag\n      </span>\n     </code>\n     parameter.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0:\n     </span>\n     An\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       ETag\n      </span>\n     </code>\n     header is added, the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       no_etag\n      </span>\n     </code>\n     parameter is\ndeprecated and will be removed in Werkzeug 2.1.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.6:\n     </span>\n     The\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       Content-Length\n      </span>\n     </code>\n     header is set.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "from_app",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.from_app">\n  <em class="property">\n   <span class="pre">\n    classmethod\n   </span>\n   <span class="w">\n   </span>\n  </em>\n  <span class="sig-name descname">\n   <span class="pre">\n    from_app\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     environ\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     buffered\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.from_app" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Create a new response object from an application output.  This\nworks best if you pass it an application that returns a generator all\nthe time.  Sometimes applications may use the\n   <cite>\n    write()\n   </cite>\n   callable\nreturned by the\n   <cite>\n    start_response\n   </cite>\n   function.  This tries to resolve such\nedge cases automatically.  But if you don\u2019t get the expected output\nyou should set\n   <cite>\n    buffered\n   </cite>\n   to\n   <cite>\n    True\n   </cite>\n   which enforces buffering.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <em>\n        WSGIApplication\n       </em>\n       ) \u2013 the WSGI application to execute.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        environ\n       </strong>\n       (\n       <em>\n        WSGIEnvironment\n       </em>\n       ) \u2013 the WSGI environment to execute against.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        buffered\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 set to\n       <cite>\n        True\n       </cite>\n       to enforce buffering.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     a response object.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "get_app_iter",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.get_app_iter">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_app_iter\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     environ\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.get_app_iter" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns the application iterator for the given environ.  Depending\non the request method and the current status code the return value\nmight be an empty response rather than the one from the response.\n  </p>\n  <p>\n   If the request method is\n   <cite>\n    HEAD\n   </cite>\n   or the status code is in a range\nwhere the HTTP specification requires an empty response, an empty\niterable is returned.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.6.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      environ\n     </strong>\n     (\n     <em>\n      WSGIEnvironment\n     </em>\n     ) \u2013 the WSGI environment of the request.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     a response iterable.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterable" title="(in Python v3.11)">\n      <em>\n       Iterable\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "get_data",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.get_data">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_data\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     as_text\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.get_data" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   The string representation of the response body.  Whenever you call\nthis property the response iterable is encoded and flattened.  This\ncan lead to unwanted behavior if you stream big data.\n  </p>\n  <p>\n   This behavior can be disabled by setting\n   <code class="xref py py-attr docutils literal notranslate">\n    <span class="pre">\n     implicit_sequence_conversion\n    </span>\n   </code>\n   to\n   <cite>\n    False\n   </cite>\n   .\n  </p>\n  <p>\n   If\n   <cite>\n    as_text\n   </cite>\n   is set to\n   <cite>\n    True\n   </cite>\n   the return value will be a decoded\nstring.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      as_text\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      <em>\n       bool\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "get_etag",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.get_etag">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_etag\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.get_etag" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Return a tuple in the form\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     (etag,\n    </span>\n    <span class="pre">\n     is_weak)\n    </span>\n   </code>\n   .  If there is no\nETag the return value is\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     (None,\n    </span>\n    <span class="pre">\n     None)\n    </span>\n   </code>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [None, None]]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "get_json",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.get_json">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_json\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     force\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     silent\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.get_json" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Parse\n   <a class="reference internal" href="#flask.Response.data" title="flask.Response.data">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      data\n     </span>\n    </code>\n   </a>\n   as JSON. Useful during testing.\n  </p>\n  <p>\n   If the mimetype does not indicate JSON\n(\n   <em class="mimetype">\n    application/json\n   </em>\n   , see\n   <a class="reference internal" href="#flask.Response.is_json" title="flask.Response.is_json">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      is_json\n     </span>\n    </code>\n   </a>\n   ), this\nreturns\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   .\n  </p>\n  <p>\n   Unlike\n   <a class="reference internal" href="#flask.Request.get_json" title="flask.Request.get_json">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      Request.get_json()\n     </span>\n    </code>\n   </a>\n   , the result is not cached.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        force\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Ignore the mimetype and always try to parse JSON.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        silent\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Silence parsing errors and return\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         None\n        </span>\n       </code>\n       instead.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "get_wsgi_headers",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.get_wsgi_headers">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_wsgi_headers\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     environ\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.get_wsgi_headers" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This is automatically called right before the response is started\nand returns headers modified for the given environment.  It returns a\ncopy of the headers from the response with some modifications applied\nif necessary.\n  </p>\n  <p>\n   For example the location header (if present) is joined with the root\nURL of the environment.  Also the content length is automatically set\nto zero here for certain status codes.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.6:\n     </span>\n     Previously that function was called\n     <cite>\n      fix_headers\n     </cite>\n     and modified\nthe response object in place.  Also since 0.6, IRIs in location\nand content-location headers are handled properly.\n    </p>\n    <p>\n     Also starting with 0.6, Werkzeug will attempt to set the content\nlength if it is able to figure it out on its own.  This is the\ncase if all the strings in the response iterable are already\nencoded and the iterable is buffered.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      environ\n     </strong>\n     (\n     <em>\n      WSGIEnvironment\n     </em>\n     ) \u2013 the WSGI environment of the request.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     returns a new\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/datastructures/#werkzeug.datastructures.Headers" title="(in Werkzeug v2.2.x)">\n      <code class="xref py py-class docutils literal notranslate">\n       <span class="pre">\n        Headers\n       </span>\n      </code>\n     </a>\n     object.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/datastructures/#werkzeug.datastructures.Headers" title="(in Werkzeug v2.2.x)">\n      werkzeug.datastructures.Headers\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "get_wsgi_response",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.get_wsgi_response">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_wsgi_response\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     environ\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.get_wsgi_response" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns the final WSGI response as tuple.  The first item in\nthe tuple is the application iterator, the second the status and\nthe third the list of headers.  The response returned is created\nspecially for the given environment.  For example if the request\nmethod in the WSGI environment is\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     \'HEAD\'\n    </span>\n   </code>\n   the response will\nbe empty and only the headers and status code will be present.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.6.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      environ\n     </strong>\n     (\n     <em>\n      WSGIEnvironment\n     </em>\n     ) \u2013 the WSGI environment of the request.\n    </p>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     an\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       (app_iter,\n      </span>\n      <span class="pre">\n       status,\n      </span>\n      <span class="pre">\n       headers)\n      </span>\n     </code>\n     tuple.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterable" title="(in Python v3.11)">\n      <em>\n       Iterable\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ]]]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "iter_encoded",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.iter_encoded">\n  <span class="sig-name descname">\n   <span class="pre">\n    iter_encoded\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.iter_encoded" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Iter the response encoded with the encoding of the response.\nIf the response object is invoked as WSGI application the return\nvalue of this method is used as application iterator unless\n   <a class="reference internal" href="#flask.Response.direct_passthrough" title="flask.Response.direct_passthrough">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      direct_passthrough\n     </span>\n    </code>\n   </a>\n   was activated.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "make_conditional",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.make_conditional">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_conditional\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     request_or_environ\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     accept_ranges\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     complete_length\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.make_conditional" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Make the response conditional to the request.  This method works\nbest if an etag was defined for the response already.  The\n   <cite>\n    add_etag\n   </cite>\n   method can be used to do that.  If called without etag just the date\nheader is set.\n  </p>\n  <p>\n   This does nothing if the request method in the request or environ is\nanything but GET or HEAD.\n  </p>\n  <p>\n   For optimal performance when handling range requests, it\u2019s recommended\nthat your response data object implements\n   <cite>\n    seekable\n   </cite>\n   ,\n   <cite>\n    seek\n   </cite>\n   and\n   <cite>\n    tell\n   </cite>\n   methods as described by\n   <a class="reference external" href="https://docs.python.org/3/library/io.html#io.IOBase" title="(in Python v3.11)">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      io.IOBase\n     </span>\n    </code>\n   </a>\n   .  Objects returned by\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     wrap_file()\n    </span>\n   </code>\n   automatically implement those methods.\n  </p>\n  <p>\n   It does not remove the body of the response because that\u2019s something\nthe\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     __call__()\n    </span>\n   </code>\n   function does for us automatically.\n  </p>\n  <p>\n   Returns self so that you can do\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     return\n    </span>\n    <span class="pre">\n     resp.make_conditional(req)\n    </span>\n   </code>\n   but modifies the object in-place.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        request_or_environ\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        WSGIEnvironment\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference internal" href="#flask.Request" title="flask.Request">\n        <em>\n         Request\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 a request object or WSGI environment to be\nused to make the response conditional\nagainst.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        accept_ranges\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 This parameter dictates the value of\n       <cite>\n        Accept-Ranges\n       </cite>\n       header. If\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         False\n        </span>\n       </code>\n       (default),\nthe header is not set. If\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         True\n        </span>\n       </code>\n       , it will be set\nto\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         "bytes"\n        </span>\n       </code>\n       . If\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         None\n        </span>\n       </code>\n       , it will be set to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         "none"\n        </span>\n       </code>\n       . If it\u2019s a string, it will use this\nvalue.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        complete_length\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 Will be used only in valid Range Requests.\nIt will set\n       <cite>\n        Content-Range\n       </cite>\n       complete length\nvalue and compute\n       <cite>\n        Content-Length\n       </cite>\n       real value.\nThis parameter is mandatory for successful\nRange Requests completion.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Raises\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://werkzeug.palletsprojects.com/en/2.2.x/exceptions/#werkzeug.exceptions.RequestedRangeNotSatisfiable" title="(in Werkzeug v2.2.x)">\n      <code class="xref py py-class docutils literal notranslate">\n       <span class="pre">\n        RequestedRangeNotSatisfiable\n       </span>\n      </code>\n     </a>\n     if\n     <cite>\n      Range\n     </cite>\n     header could not be parsed or satisfied.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0:\n     </span>\n     Range processing is skipped if length is 0 instead of\nraising a 416 Range Not Satisfiable error.\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "make_sequence",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.make_sequence">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_sequence\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.make_sequence" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Converts the response iterator in a list.  By default this happens\nautomatically if required.  If\n   <cite>\n    implicit_sequence_conversion\n   </cite>\n   is\ndisabled, this method is not automatically called and some properties\nmight raise exceptions.  This also encodes all the items.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.6.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "set_cookie",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.set_cookie">\n  <span class="sig-name descname">\n   <span class="pre">\n    set_cookie\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     key\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     value\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     \'\'\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     max_age\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     expires\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     path\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     \'/\'\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     domain\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     secure\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     httponly\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     samesite\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.set_cookie" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Sets a cookie.\n  </p>\n  <p>\n   A warning is raised if the size of the cookie header exceeds\n   <a class="reference internal" href="#flask.Response.max_cookie_size" title="flask.Response.max_cookie_size">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      max_cookie_size\n     </span>\n    </code>\n   </a>\n   , but the header will still be set.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        key\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 the key (name) of the cookie to be set.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        value\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 the value of the cookie.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        max_age\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/datetime.html#datetime.timedelta" title="(in Python v3.11)">\n        <em>\n         datetime.timedelta\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       ) \u2013 should be a number of seconds, or\n       <cite>\n        None\n       </cite>\n       (default) if\nthe cookie should last only as long as the client\u2019s\nbrowser session.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        expires\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n        <em>\n         Union\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/datetime.html#datetime.datetime" title="(in Python v3.11)">\n        <em>\n         datetime.datetime\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n        <em>\n         int\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#float" title="(in Python v3.11)">\n        <em>\n         float\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       ) \u2013 should be a\n       <cite>\n        datetime\n       </cite>\n       object or UNIX timestamp.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        path\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 limits the cookie to a given path, per default it will\nspan the whole domain.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        domain\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 if you want to set a cross-domain cookie.  For example,\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         domain=".example.com"\n        </span>\n       </code>\n       will set a cookie that is\nreadable by the domain\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         www.example.com\n        </span>\n       </code>\n       ,\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         foo.example.com\n        </span>\n       </code>\n       etc.  Otherwise, a cookie will only\nbe readable by the domain that set it.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        secure\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 If\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         True\n        </span>\n       </code>\n       , the cookie will only be available\nvia HTTPS.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        httponly\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Disallow JavaScript access to the cookie.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        samesite\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 Limit the scope of the cookie to only be\nattached to requests that are \u201csame-site\u201d.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "set_data",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.set_data">\n  <span class="sig-name descname">\n   <span class="pre">\n    set_data\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     value\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.set_data" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Sets a new string as response.  The value must be a string or\nbytes. If a string is set it\u2019s encoded to the charset of the\nresponse (utf-8 by default).\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.9.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      value\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      <em>\n       bytes\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Response Objects",
    type: ["py", "method"],
    name: "set_etag",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Response.set_etag">\n  <span class="sig-name descname">\n   <span class="pre">\n    set_etag\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     etag\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     weak\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Response.set_etag" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Set the etag, and override the old one if there was one.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        etag\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        weak\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "get_cookie_domain",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.get_cookie_domain">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_cookie_domain\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.get_cookie_domain" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns the domain that should be set for the session cookie.\n  </p>\n  <p>\n   Uses\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     SESSION_COOKIE_DOMAIN\n    </span>\n   </code>\n   if it is configured, otherwise\nfalls back to detecting the domain based on\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     SERVER_NAME\n    </span>\n   </code>\n   .\n  </p>\n  <p>\n   Once detected (or if not set at all),\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     SESSION_COOKIE_DOMAIN\n    </span>\n   </code>\n   is\nupdated to avoid re-running the logic.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      app\n     </strong>\n     (\n     <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n      <em>\n       Flask\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "get_cookie_httponly",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.get_cookie_httponly">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_cookie_httponly\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.get_cookie_httponly" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     SESSION_COOKIE_HTTPONLY\n    </span>\n   </code>\n   config var.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      app\n     </strong>\n     (\n     <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n      <em>\n       Flask\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "get_cookie_name",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.get_cookie_name">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_cookie_name\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.get_cookie_name" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   The name of the session cookie. Uses``app.config[\u201cSESSION_COOKIE_NAME\u201d]``.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      app\n     </strong>\n     (\n     <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n      <em>\n       Flask\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "get_cookie_path",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.get_cookie_path">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_cookie_path\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.get_cookie_path" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     SESSION_COOKIE_PATH\n    </span>\n   </code>\n   config var if it\u2019s set, and falls back to\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     APPLICATION_ROOT\n    </span>\n   </code>\n   or\nuses\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     /\n    </span>\n   </code>\n   if it\u2019s\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      app\n     </strong>\n     (\n     <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n      <em>\n       Flask\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "get_cookie_samesite",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.get_cookie_samesite">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_cookie_samesite\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.get_cookie_samesite" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Return\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     \'Strict\'\n    </span>\n   </code>\n   or\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     \'Lax\'\n    </span>\n   </code>\n   if the cookie should use the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     SameSite\n    </span>\n   </code>\n   attribute. This currently just returns the value of\nthe\n   <a class="reference internal" href="../config/#SESSION_COOKIE_SAMESITE" title="SESSION_COOKIE_SAMESITE">\n    <code class="xref py py-data docutils literal notranslate">\n     <span class="pre">\n      SESSION_COOKIE_SAMESITE\n     </span>\n    </code>\n   </a>\n   setting.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      app\n     </strong>\n     (\n     <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n      <em>\n       Flask\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "get_cookie_secure",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.get_cookie_secure">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_cookie_secure\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.get_cookie_secure" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns True if the cookie should be secure.  This currently\njust returns the value of the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     SESSION_COOKIE_SECURE\n    </span>\n   </code>\n   setting.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      app\n     </strong>\n     (\n     <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n      <em>\n       Flask\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "get_expiration_time",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.get_expiration_time">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_expiration_time\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     session\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.get_expiration_time" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   A helper method that returns an expiration date for the session\nor\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n        <em>\n         Flask\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        session\n       </strong>\n       (\n       <a class="reference internal" href="#flask.sessions.SessionMixin" title="flask.sessions.SessionMixin">\n        <em>\n         flask.sessions.SessionMixin\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/datetime.html#datetime.datetime" title="(in Python v3.11)">\n      datetime.datetime\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "is_null_session",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.is_null_session">\n  <span class="sig-name descname">\n   <span class="pre">\n    is_null_session\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     obj\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.is_null_session" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Checks if a given object is a null session.  Null sessions are\nnot asked to be saved.\n  </p>\n  <p>\n   This checks if the object is an instance of\n   <a class="reference internal" href="#flask.sessions.SessionInterface.null_session_class" title="flask.sessions.SessionInterface.null_session_class">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      null_session_class\n     </span>\n    </code>\n   </a>\n   by default.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      obj\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#object" title="(in Python v3.11)">\n      <em>\n       object\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "make_null_session",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.make_null_session">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_null_session\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.make_null_session" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.\n  </p>\n  <p>\n   This creates an instance of\n   <a class="reference internal" href="#flask.sessions.SessionInterface.null_session_class" title="flask.sessions.SessionInterface.null_session_class">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      null_session_class\n     </span>\n    </code>\n   </a>\n   by default.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      app\n     </strong>\n     (\n     <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n      <em>\n       Flask\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.sessions.NullSession" title="flask.sessions.NullSession">\n      flask.sessions.NullSession\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "open_session",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.open_session">\n  <span class="sig-name descname">\n   <span class="pre">\n    open_session\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     request\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.open_session" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This is called at the beginning of each request, after\npushing the request context, before matching the URL.\n  </p>\n  <p>\n   This must return an object which implements a dictionary-like\ninterface as well as the\n   <a class="reference internal" href="#flask.sessions.SessionMixin" title="flask.sessions.SessionMixin">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      SessionMixin\n     </span>\n    </code>\n   </a>\n   interface.\n  </p>\n  <p>\n   This will return\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   to indicate that loading failed in\nsome way that is not immediately an error. The request\ncontext will fall back to using\n   <a class="reference internal" href="#flask.sessions.SessionInterface.make_null_session" title="flask.sessions.SessionInterface.make_null_session">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      make_null_session()\n     </span>\n    </code>\n   </a>\n   in this case.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n        <em>\n         Flask\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        request\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Request" title="flask.Request">\n        <em>\n         Request\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.sessions.SessionMixin" title="flask.sessions.SessionMixin">\n      flask.sessions.SessionMixin\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "save_session",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.save_session">\n  <span class="sig-name descname">\n   <span class="pre">\n    save_session\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     session\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     response\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.save_session" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This is called at the end of each request, after generating\na response, before removing the request context. It is skipped\nif\n   <a class="reference internal" href="#flask.sessions.SessionInterface.is_null_session" title="flask.sessions.SessionInterface.is_null_session">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      is_null_session()\n     </span>\n    </code>\n   </a>\n   returns\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n        <em>\n         Flask\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        session\n       </strong>\n       (\n       <a class="reference internal" href="#flask.sessions.SessionMixin" title="flask.sessions.SessionMixin">\n        <em>\n         flask.sessions.SessionMixin\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        response\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "should_set_cookie",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SessionInterface.should_set_cookie">\n  <span class="sig-name descname">\n   <span class="pre">\n    should_set_cookie\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     session\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SessionInterface.should_set_cookie" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Used by session backends to determine if a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     Set-Cookie\n    </span>\n   </code>\n   header\nshould be set for this session cookie for this response. If the session\nhas been modified, the cookie is set. If the session is permanent and\nthe\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     SESSION_REFRESH_EACH_REQUEST\n    </span>\n   </code>\n   config is true, the cookie is\nalways set.\n  </p>\n  <p>\n   This check is usually skipped if the session was deleted.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.11.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n        <em>\n         Flask\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        session\n       </strong>\n       (\n       <a class="reference internal" href="#flask.sessions.SessionMixin" title="flask.sessions.SessionMixin">\n        <em>\n         flask.sessions.SessionMixin\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "digest_method",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SecureCookieSessionInterface.digest_method">\n  <em class="property">\n   <span class="pre">\n    static\n   </span>\n   <span class="w">\n   </span>\n  </em>\n  <span class="sig-name descname">\n   <span class="pre">\n    digest_method\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     string\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     b\'\'\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     usedforsecurity\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     True\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SecureCookieSessionInterface.digest_method" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   the hash function to use for the signature.  The default is sha1\n  </p>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "open_session",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SecureCookieSessionInterface.open_session">\n  <span class="sig-name descname">\n   <span class="pre">\n    open_session\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     request\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SecureCookieSessionInterface.open_session" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This is called at the beginning of each request, after\npushing the request context, before matching the URL.\n  </p>\n  <p>\n   This must return an object which implements a dictionary-like\ninterface as well as the\n   <a class="reference internal" href="#flask.sessions.SessionMixin" title="flask.sessions.SessionMixin">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      SessionMixin\n     </span>\n    </code>\n   </a>\n   interface.\n  </p>\n  <p>\n   This will return\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   to indicate that loading failed in\nsome way that is not immediately an error. The request\ncontext will fall back to using\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     make_null_session()\n    </span>\n   </code>\n   in this case.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n        <em>\n         Flask\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        request\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Request" title="flask.Request">\n        <em>\n         Request\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.sessions.SecureCookieSession" title="flask.sessions.SecureCookieSession">\n      flask.sessions.SecureCookieSession\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "save_session",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SecureCookieSessionInterface.save_session">\n  <span class="sig-name descname">\n   <span class="pre">\n    save_session\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     app\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     session\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     response\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SecureCookieSessionInterface.save_session" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This is called at the end of each request, after generating\na response, before removing the request context. It is skipped\nif\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     is_null_session()\n    </span>\n   </code>\n   returns\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     True\n    </span>\n   </code>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        app\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n        <em>\n         Flask\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        session\n       </strong>\n       (\n       <a class="reference internal" href="#flask.sessions.SessionMixin" title="flask.sessions.SessionMixin">\n        <em>\n         flask.sessions.SessionMixin\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        response\n       </strong>\n       (\n       <a class="reference internal" href="#flask.Response" title="flask.Response">\n        <em>\n         Response\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "get",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SecureCookieSession.get">\n  <span class="sig-name descname">\n   <span class="pre">\n    get\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     key\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     default\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SecureCookieSession.get" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Return the value for key if key is in the dictionary, else default.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        key\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        default\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "setdefault",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.SecureCookieSession.setdefault">\n  <span class="sig-name descname">\n   <span class="pre">\n    setdefault\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     key\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     default\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.SecureCookieSession.setdefault" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Insert key with a value of default if key is not in the dictionary.\n  </p>\n  <p>\n   Return the value for key if key is in the dictionary, else default.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        key\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        default\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "clear",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.NullSession.clear">\n  <span class="sig-name descname">\n   <span class="pre">\n    clear\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <span class="sig-return">\n   <span class="sig-return-icon">\n    \u2192\n   </span>\n   <span class="sig-return-typehint">\n    <span class="pre">\n     None.\n    </span>\n    <span class="pre">\n     Remove\n    </span>\n    <span class="pre">\n     all\n    </span>\n    <span class="pre">\n     items\n    </span>\n    <span class="pre">\n     from\n    </span>\n    <span class="pre">\n     D.\n    </span>\n   </span>\n  </span>\n  <a class="headerlink" href="#flask.sessions.NullSession.clear" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     te.NoReturn\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "pop",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.NullSession.pop">\n  <span class="sig-name descname">\n   <span class="pre">\n    pop\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     k\n    </span>\n   </span>\n  </em>\n  <span class="optional">\n   [\n  </span>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     d\n    </span>\n   </span>\n  </em>\n  <span class="optional">\n   ]\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <span class="sig-return">\n   <span class="sig-return-icon">\n    \u2192\n   </span>\n   <span class="sig-return-typehint">\n    <span class="pre">\n     v,\n    </span>\n    <span class="pre">\n     remove\n    </span>\n    <span class="pre">\n     specified\n    </span>\n    <span class="pre">\n     key\n    </span>\n    <span class="pre">\n     and\n    </span>\n    <span class="pre">\n     return\n    </span>\n    <span class="pre">\n     the\n    </span>\n    <span class="pre">\n     corresponding\n    </span>\n    <span class="pre">\n     value.\n    </span>\n   </span>\n  </span>\n  <a class="headerlink" href="#flask.sessions.NullSession.pop" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   If the key is not found, return the default if given; otherwise,\nraise a KeyError.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     te.NoReturn\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "popitem",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.NullSession.popitem">\n  <span class="sig-name descname">\n   <span class="pre">\n    popitem\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.NullSession.popitem" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Remove and return a (key, value) pair as a 2-tuple.\n  </p>\n  <p>\n   Pairs are returned in LIFO (last-in, first-out) order.\nRaises KeyError if the dict is empty.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     te.NoReturn\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "setdefault",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.NullSession.setdefault">\n  <span class="sig-name descname">\n   <span class="pre">\n    setdefault\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.sessions.NullSession.setdefault" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Insert key with a value of default if key is not in the dictionary.\n  </p>\n  <p>\n   Return the value for key if key is in the dictionary, else default.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     te.NoReturn\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Session Interface",
    type: ["py", "method"],
    name: "update",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.sessions.NullSession.update">\n  <span class="sig-name descname">\n   <span class="pre">\n    update\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="optional">\n   [\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     E\n    </span>\n   </span>\n  </em>\n  ,\n  <span class="optional">\n   ]\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     **F\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <span class="sig-return">\n   <span class="sig-return-icon">\n    \u2192\n   </span>\n   <span class="sig-return-typehint">\n    <span class="pre">\n     None.\n    </span>\n    <span class="pre">\n     Update\n    </span>\n    <span class="pre">\n     D\n    </span>\n    <span class="pre">\n     from\n    </span>\n    <span class="pre">\n     dict/iterable\n    </span>\n    <span class="pre">\n     E\n    </span>\n    <span class="pre">\n     and\n    </span>\n    <span class="pre">\n     F.\n    </span>\n   </span>\n  </span>\n  <a class="headerlink" href="#flask.sessions.NullSession.update" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F:  D[k] = F[k]\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     te.NoReturn\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Test Client",
    type: ["py", "method"],
    name: "open",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.testing.FlaskClient.open">\n  <span class="sig-name descname">\n   <span class="pre">\n    open\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     buffered\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     follow_redirects\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.testing.FlaskClient.open" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Generate an environ dict from the given arguments, make a\nrequest to the application using it, and return the response.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Passed to\n       <code class="xref py py-class docutils literal notranslate">\n        <span class="pre">\n         EnvironBuilder\n        </span>\n       </code>\n       to create the\nenviron for the request. If a single arg is passed, it can\nbe an existing\n       <code class="xref py py-class docutils literal notranslate">\n        <span class="pre">\n         EnvironBuilder\n        </span>\n       </code>\n       or an environ dict.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        buffered\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Convert the iterator returned by the app into\na list. If the iterator has a\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         close()\n        </span>\n       </code>\n       method, it is\ncalled automatically.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        follow_redirects\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Make additional requests to follow HTTP\nredirects until a non-redirect status is returned.\n       <code class="xref py py-attr docutils literal notranslate">\n        <span class="pre">\n         TestResponse.history\n        </span>\n       </code>\n       lists the intermediate\nresponses.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     TestResponse\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.1:\n     </span>\n     Removed the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       as_tuple\n      </span>\n     </code>\n     parameter.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0:\n     </span>\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       as_tuple\n      </span>\n     </code>\n     is deprecated and will be removed in Werkzeug\n2.1. Use\n     <code class="xref py py-attr docutils literal notranslate">\n      <span class="pre">\n       TestResponse.request\n      </span>\n     </code>\n     and\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       request.environ\n      </span>\n     </code>\n     instead.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 2.0:\n     </span>\n     The request input stream is closed when calling\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       response.close()\n      </span>\n     </code>\n     . Input streams for redirects are\nautomatically closed.\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.5:\n     </span>\n     If a dict is provided as file in the dict for the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       data\n      </span>\n     </code>\n     parameter the content type has to be called\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       content_type\n      </span>\n     </code>\n     instead of\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       mimetype\n      </span>\n     </code>\n     . This change was made for\nconsistency with\n     <code class="xref py py-class docutils literal notranslate">\n      <span class="pre">\n       werkzeug.FileWrapper\n      </span>\n     </code>\n     .\n    </p>\n   </div>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.5:\n     </span>\n     Added the\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       follow_redirects\n      </span>\n     </code>\n     parameter.\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Test Client",
    type: ["py", "method"],
    name: "session_transaction",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.testing.FlaskClient.session_transaction">\n  <span class="sig-name descname">\n   <span class="pre">\n    session_transaction\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.testing.FlaskClient.session_transaction" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   When used in combination with a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with\n    </span>\n   </code>\n   block is left the session is\nstored back.\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="k">with</span> <span class="n">client</span><span class="o">.</span><span class="n">session_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>\n    <span class="n">session</span><span class="p">[</span><span class="s1">\'value\'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   Internally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as\n   <a class="reference internal" href="#flask.Flask.test_request_context" title="flask.Flask.test_request_context">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      test_request_context()\n     </span>\n    </code>\n   </a>\n   which are directly\npassed through.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Generator" title="(in Python v3.11)">\n      <em>\n       Generator\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.sessions.SessionMixin" title="flask.sessions.SessionMixin">\n      flask.sessions.SessionMixin\n     </a>\n     , None, None]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Test CLI Runner",
    type: ["py", "method"],
    name: "invoke",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.testing.FlaskCliRunner.invoke">\n  <span class="sig-name descname">\n   <span class="pre">\n    invoke\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     cli\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.testing.FlaskCliRunner.invoke" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Invokes a CLI command in an isolated environment. See\n   <a class="reference external" href="https://click.palletsprojects.com/en/8.1.x/api/#click.testing.CliRunner.invoke" title="(in Click v8.1.x)">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      CliRunner.invoke\n     </span>\n    </code>\n   </a>\n   for\nfull method documentation. See\n   <a class="reference internal" href="../testing/#testing-cli">\n    <span class="std std-ref">\n     Running Commands with the CLI Runner\n    </span>\n   </a>\n   for examples.\n  </p>\n  <p>\n   If the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     obj\n    </span>\n   </code>\n   argument is not given, passes an instance of\n   <a class="reference internal" href="#flask.cli.ScriptInfo" title="flask.cli.ScriptInfo">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      ScriptInfo\n     </span>\n    </code>\n   </a>\n   that knows how to load the Flask\napp being tested.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        cli\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 Command object to invoke. Default is the app\u2019s\n       <code class="xref py py-attr docutils literal notranslate">\n        <span class="pre">\n         cli\n        </span>\n       </code>\n       group.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 List of strings to invoke the command with.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     a\n     <a class="reference external" href="https://click.palletsprojects.com/en/8.1.x/api/#click.testing.Result" title="(in Click v8.1.x)">\n      <code class="xref py py-class docutils literal notranslate">\n       <span class="pre">\n        Result\n       </span>\n      </code>\n     </a>\n     object.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Globals",
    type: ["py", "method"],
    name: "get",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.ctx._AppCtxGlobals.get">\n  <span class="sig-name descname">\n   <span class="pre">\n    get\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     default\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.ctx._AppCtxGlobals.get" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Get an attribute by name, or a default value. Like\n   <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict.get" title="(in Python v3.11)">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      dict.get()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 Name of attribute to get.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        default\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 Value to return if the attribute is not present.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Globals",
    type: ["py", "method"],
    name: "pop",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.ctx._AppCtxGlobals.pop">\n  <span class="sig-name descname">\n   <span class="pre">\n    pop\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     default=&lt;object\n    </span>\n    <span class="pre">\n     object&gt;\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.ctx._AppCtxGlobals.pop" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Get and remove an attribute by name. Like\n   <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict.pop" title="(in Python v3.11)">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      dict.pop()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 Name of attribute to pop.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        default\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Value to return if the attribute is not present,\ninstead of raising a\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         KeyError\n        </span>\n       </code>\n       .\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.11.\n     </span>\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Application Globals",
    type: ["py", "method"],
    name: "setdefault",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.ctx._AppCtxGlobals.setdefault">\n  <span class="sig-name descname">\n   <span class="pre">\n    setdefault\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     default\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.ctx._AppCtxGlobals.setdefault" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Get the value of an attribute if it is present, otherwise\nset and return a default value. Like\n   <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" title="(in Python v3.11)">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      dict.setdefault()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 Name of attribute to get.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        default\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 Value to set and return if the attribute is not\npresent.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.11.\n     </span>\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Functions and Classes",
    type: ["py", "method"],
    name: "escape",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Markup.escape">\n  <em class="property">\n   <span class="pre">\n    classmethod\n   </span>\n   <span class="w">\n   </span>\n  </em>\n  <span class="sig-name descname">\n   <span class="pre">\n    escape\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     s\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Markup.escape" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Escape a string. Calls\n   <a class="reference internal" href="#flask.escape" title="flask.escape">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      escape()\n     </span>\n    </code>\n   </a>\n   and ensures that for\nsubclasses the correct type is returned.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      s\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.Markup" title="markupsafe.Markup">\n      markupsafe.Markup\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Functions and Classes",
    type: ["py", "method"],
    name: "striptags",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Markup.striptags">\n  <span class="sig-name descname">\n   <span class="pre">\n    striptags\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Markup.striptags" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   <a class="reference internal" href="#flask.Markup.unescape" title="flask.Markup.unescape">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      unescape()\n     </span>\n    </code>\n   </a>\n   the markup, remove tags, and normalize\nwhitespace to single spaces.\n  </p>\n  <div class="doctest highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">Markup</span><span class="p">(</span><span class="s2">"Main &amp;raquo;        &lt;em&gt;About&lt;/em&gt;"</span><span class="p">)</span><span class="o">.</span><span class="n">striptags</span><span class="p">()</span>\n<span class="go">\'Main \u00bb About\'</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Functions and Classes",
    type: ["py", "method"],
    name: "unescape",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Markup.unescape">\n  <span class="sig-name descname">\n   <span class="pre">\n    unescape\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Markup.unescape" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Convert escaped markup back into a text string. This replaces\nHTML entities with the characters they represent.\n  </p>\n  <div class="doctest highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">Markup</span><span class="p">(</span><span class="s2">"Main &amp;raquo; &lt;em&gt;About&lt;/em&gt;"</span><span class="p">)</span><span class="o">.</span><span class="n">unescape</span><span class="p">()</span>\n<span class="go">\'Main \u00bb &lt;em&gt;About&lt;/em&gt;\'</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "dumps",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.JSONProvider.dumps">\n  <span class="sig-name descname">\n   <span class="pre">\n    dumps\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     obj\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.JSONProvider.dumps" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Serialize data as JSON.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        obj\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 The data to serialize.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 May be passed to the underlying JSON library.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "dump",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.JSONProvider.dump">\n  <span class="sig-name descname">\n   <span class="pre">\n    dump\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     obj\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     fp\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.JSONProvider.dump" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Serialize data as JSON and write to a file.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        obj\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 The data to serialize.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        fp\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.IO" title="(in Python v3.11)">\n        <em>\n         IO\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 A file opened for writing text. Should use the UTF-8\nencoding to be valid JSON.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 May be passed to the underlying JSON library.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "loads",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.JSONProvider.loads">\n  <span class="sig-name descname">\n   <span class="pre">\n    loads\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     s\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.JSONProvider.loads" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Deserialize data as JSON.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        s\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        |\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       ) \u2013 Text or UTF-8 bytes.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 May be passed to the underlying JSON library.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "load",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.JSONProvider.load">\n  <span class="sig-name descname">\n   <span class="pre">\n    load\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     fp\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.JSONProvider.load" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Deserialize data as JSON read from a file.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        fp\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.IO" title="(in Python v3.11)">\n        <em>\n         IO\n        </em>\n       </a>\n       ) \u2013 A file opened for reading text or UTF-8 bytes.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 May be passed to the underlying JSON library.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "response",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.JSONProvider.response">\n  <span class="sig-name descname">\n   <span class="pre">\n    response\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.JSONProvider.response" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Serialize the given arguments as JSON, and return a\n   <a class="reference internal" href="#flask.Response" title="flask.Response">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      Response\n     </span>\n    </code>\n   </a>\n   object with the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     application/json\n    </span>\n   </code>\n   mimetype.\n  </p>\n  <p>\n   The\n   <a class="reference internal" href="#flask.json.jsonify" title="flask.json.jsonify">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      jsonify()\n     </span>\n    </code>\n   </a>\n   function calls this method for\nthe current application.\n  </p>\n  <p>\n   Either positional or keyword arguments can be given, not both.\nIf no arguments are given,\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   is serialized.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <em>\n        t.Any\n       </em>\n       ) \u2013 A single value to serialize, or multiple values to\ntreat as a list to serialize.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <em>\n        t.Any\n       </em>\n       ) \u2013 Treat as a dict to serialize.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "default",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.DefaultJSONProvider.default">\n  <em class="property">\n   <span class="pre">\n    static\n   </span>\n   <span class="w">\n   </span>\n  </em>\n  <span class="sig-name descname">\n   <span class="pre">\n    default\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     o\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.DefaultJSONProvider.default" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Apply this function to any object that\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     json.dumps()\n    </span>\n   </code>\n   does\nnot know how to serialize. It should return a valid JSON type or\nraise a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     TypeError\n    </span>\n   </code>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      o\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "dumps",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.DefaultJSONProvider.dumps">\n  <span class="sig-name descname">\n   <span class="pre">\n    dumps\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     obj\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.DefaultJSONProvider.dumps" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Serialize data as JSON to a string.\n  </p>\n  <p>\n   Keyword arguments are passed to\n   <a class="reference external" href="https://docs.python.org/3/library/json.html#json.dumps" title="(in Python v3.11)">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      json.dumps()\n     </span>\n    </code>\n   </a>\n   . Sets some\nparameter defaults from the\n   <a class="reference internal" href="#flask.json.provider.DefaultJSONProvider.default" title="flask.json.provider.DefaultJSONProvider.default">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      default\n     </span>\n    </code>\n   </a>\n   ,\n   <a class="reference internal" href="#flask.json.provider.DefaultJSONProvider.ensure_ascii" title="flask.json.provider.DefaultJSONProvider.ensure_ascii">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      ensure_ascii\n     </span>\n    </code>\n   </a>\n   , and\n   <a class="reference internal" href="#flask.json.provider.DefaultJSONProvider.sort_keys" title="flask.json.provider.DefaultJSONProvider.sort_keys">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      sort_keys\n     </span>\n    </code>\n   </a>\n   attributes.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        obj\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 The data to serialize.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Passed to\n       <a class="reference external" href="https://docs.python.org/3/library/json.html#json.dumps" title="(in Python v3.11)">\n        <code class="xref py py-func docutils literal notranslate">\n         <span class="pre">\n          json.dumps()\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "loads",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.DefaultJSONProvider.loads">\n  <span class="sig-name descname">\n   <span class="pre">\n    loads\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     s\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.DefaultJSONProvider.loads" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Deserialize data as JSON from a string or bytes.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        s\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        |\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n        <em>\n         bytes\n        </em>\n       </a>\n       ) \u2013 Text or UTF-8 bytes.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 Passed to\n       <a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads" title="(in Python v3.11)">\n        <code class="xref py py-func docutils literal notranslate">\n         <span class="pre">\n          json.loads()\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "response",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.provider.DefaultJSONProvider.response">\n  <span class="sig-name descname">\n   <span class="pre">\n    response\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.provider.DefaultJSONProvider.response" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Serialize the given arguments as JSON, and return a\n   <a class="reference internal" href="#flask.Response" title="flask.Response">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      Response\n     </span>\n    </code>\n   </a>\n   object with it. The response mimetype\nwill be \u201capplication/json\u201d and can be changed with\n   <a class="reference internal" href="#flask.json.provider.DefaultJSONProvider.mimetype" title="flask.json.provider.DefaultJSONProvider.mimetype">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      mimetype\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <p>\n   If\n   <a class="reference internal" href="#flask.json.provider.DefaultJSONProvider.compact" title="flask.json.provider.DefaultJSONProvider.compact">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      compact\n     </span>\n    </code>\n   </a>\n   is\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     False\n    </span>\n   </code>\n   or debug mode is enabled, the\noutput will be formatted to be easier to read.\n  </p>\n  <p>\n   Either positional or keyword arguments can be given, not both.\nIf no arguments are given,\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     None\n    </span>\n   </code>\n   is serialized.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <em>\n        t.Any\n       </em>\n       ) \u2013 A single value to serialize, or multiple values to\ntreat as a list to serialize.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <em>\n        t.Any\n       </em>\n       ) \u2013 Treat as a dict to serialize.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "JSON Support",
    type: ["py", "method"],
    name: "default",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.json.JSONEncoder.default">\n  <span class="sig-name descname">\n   <span class="pre">\n    default\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     o\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.json.JSONEncoder.default" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Convert\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     o\n    </span>\n   </code>\n   to a JSON serializable type. See\n   <a class="reference external" href="https://docs.python.org/3/library/json.html#json.JSONEncoder.default" title="(in Python v3.11)">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      json.JSONEncoder.default()\n     </span>\n    </code>\n   </a>\n   . Python does not support\noverriding how basic types like\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     str\n    </span>\n   </code>\n   or\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     list\n    </span>\n   </code>\n   are\nserialized, they are handled before this method.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      o\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Configuration",
    type: ["py", "method"],
    name: "from_envvar",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Config.from_envvar">\n  <span class="sig-name descname">\n   <span class="pre">\n    from_envvar\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     variable_name\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     silent\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Config.from_envvar" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_pyfile</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">\'YOURAPPLICATION_SETTINGS\'</span><span class="p">])</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        variable_name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 name of the environment variable\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        silent\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 set to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         True\n        </span>\n       </code>\n       if you want silent failure for missing\nfiles.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       True\n      </span>\n     </code>\n     if the file was loaded successfully.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Configuration",
    type: ["py", "method"],
    name: "from_file",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Config.from_file">\n  <span class="sig-name descname">\n   <span class="pre">\n    from_file\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     filename\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     load\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     silent\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Config.from_file" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Update the values in the config from a file that is loaded\nusing the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     load\n    </span>\n   </code>\n   parameter. The loaded data is passed to the\n   <a class="reference internal" href="#flask.Config.from_mapping" title="flask.Config.from_mapping">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      from_mapping()\n     </span>\n    </code>\n   </a>\n   method.\n  </p>\n  <div class="highlight-python notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="kn">import</span> <span class="nn">json</span>\n<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="s2">"config.json"</span><span class="p">,</span> <span class="n">load</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">)</span>\n\n<span class="kn">import</span> <span class="nn">toml</span>\n<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="s2">"config.toml"</span><span class="p">,</span> <span class="n">load</span><span class="o">=</span><span class="n">toml</span><span class="o">.</span><span class="n">load</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        filename\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 The path to the data file. This can be an\nabsolute path or relative to the config root path.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        load\n       </strong>\n       (\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         Callable[[Reader],\n        </span>\n        <span class="pre">\n         Mapping]\n        </span>\n       </code>\n       where\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         Reader\n        </span>\n       </code>\n       implements a\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         read\n        </span>\n       </code>\n       method.) \u2013 A callable that takes a file handle and returns a\nmapping of loaded data from the file.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        silent\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 Ignore the file if it doesn\u2019t exist.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       True\n      </span>\n     </code>\n     if the file was loaded successfully.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.0.\n     </span>\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Configuration",
    type: ["py", "method"],
    name: "from_mapping",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Config.from_mapping">\n  <span class="sig-name descname">\n   <span class="pre">\n    from_mapping\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     mapping\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Config.from_mapping" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Updates the config like\n   <code class="xref py py-meth docutils literal notranslate">\n    <span class="pre">\n     update()\n    </span>\n   </code>\n   ignoring items with\nnon-upper keys.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Returns\n   </dt>\n   <dd class="field-odd">\n    <p>\n     Always returns\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       True\n      </span>\n     </code>\n     .\n    </p>\n   </dd>\n   <dt class="field-even">\n    Parameters\n   </dt>\n   <dd class="field-even">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        mapping\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n        <em>\n         Mapping\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.11.\n     </span>\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Configuration",
    type: ["py", "method"],
    name: "from_object",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Config.from_object">\n  <span class="sig-name descname">\n   <span class="pre">\n    from_object\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     obj\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Config.from_object" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Updates the values from the given object.  An object can be of one\nof the following two types:\n  </p>\n  <ul class="simple">\n   <li>\n    <p>\n     a string: in this case the object with that name will be imported\n    </p>\n   </li>\n   <li>\n    <p>\n     an actual object reference: that object is used directly\n    </p>\n   </li>\n  </ul>\n  <p>\n   Objects are usually either modules or classes.\n   <a class="reference internal" href="#flask.Config.from_object" title="flask.Config.from_object">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      from_object()\n     </span>\n    </code>\n   </a>\n   loads only the uppercase attributes of the module/class. A\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     dict\n    </span>\n   </code>\n   object will not work with\n   <a class="reference internal" href="#flask.Config.from_object" title="flask.Config.from_object">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      from_object()\n     </span>\n    </code>\n   </a>\n   because the keys of a\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     dict\n    </span>\n   </code>\n   are not attributes of the\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     dict\n    </span>\n   </code>\n   class.\n  </p>\n  <p>\n   Example of module-based configuration:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="s1">\'yourapplication.default_config\'</span><span class="p">)</span>\n<span class="kn">from</span> <span class="nn">yourapplication</span> <span class="kn">import</span> <span class="n">default_config</span>\n<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="n">default_config</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   Nothing is done to the object before loading. If the object is a\nclass and has\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     @property\n    </span>\n   </code>\n   attributes, it needs to be\ninstantiated before being passed to this method.\n  </p>\n  <p>\n   You should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith\n   <a class="reference internal" href="#flask.Config.from_pyfile" title="flask.Config.from_pyfile">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      from_pyfile()\n     </span>\n    </code>\n   </a>\n   and ideally from a location not within the\npackage because the package might be installed system wide.\n  </p>\n  <p>\n   See\n   <a class="reference internal" href="../config/#config-dev-prod">\n    <span class="std std-ref">\n     Development / Production\n    </span>\n   </a>\n   for an example of class-based configuration\nusing\n   <a class="reference internal" href="#flask.Config.from_object" title="flask.Config.from_object">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      from_object()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      obj\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#object" title="(in Python v3.11)">\n      <em>\n       object\n      </em>\n     </a>\n     <em>\n      ,\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      <em>\n       str\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013 an import name or object\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Configuration",
    type: ["py", "method"],
    name: "from_prefixed_env",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Config.from_prefixed_env">\n  <span class="sig-name descname">\n   <span class="pre">\n    from_prefixed_env\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     prefix=\'FLASK\'\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     *\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     loads=&lt;function\n    </span>\n    <span class="pre">\n     loads&gt;\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Config.from_prefixed_env" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Load any environment variables that start with\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     FLASK_\n    </span>\n   </code>\n   ,\ndropping the prefix from the env key for the config key. Values\nare passed through a loading function to attempt to convert them\nto more specific types than strings.\n  </p>\n  <p>\n   Keys are loaded in\n   <a class="reference external" href="https://docs.python.org/3/library/functions.html#sorted" title="(in Python v3.11)">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      sorted()\n     </span>\n    </code>\n   </a>\n   order.\n  </p>\n  <p>\n   The default loading function attempts to parse values as any\nvalid JSON type, including dicts and lists.\n  </p>\n  <p>\n   Specific items in nested dicts can be set by separating the\nkeys with double underscores (\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     __\n    </span>\n   </code>\n   ). If an intermediate key\ndoesn\u2019t exist, it will be initialized to an empty dict.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        prefix\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 Load env vars that start with this prefix,\nseparated with an underscore (\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         _\n        </span>\n       </code>\n       ).\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        loads\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       <em>\n        ,\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 Pass each string value to this function and use\nthe returned value as the config value. If any error is\nraised it is ignored and the value remains a string. The\ndefault is\n       <a class="reference internal" href="#flask.json.loads" title="flask.json.loads">\n        <code class="xref py py-func docutils literal notranslate">\n         <span class="pre">\n          json.loads()\n         </span>\n        </code>\n       </a>\n       .\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 2.1.\n     </span>\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Configuration",
    type: ["py", "method"],
    name: "from_pyfile",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Config.from_pyfile">\n  <span class="sig-name descname">\n   <span class="pre">\n    from_pyfile\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     filename\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     silent\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     False\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Config.from_pyfile" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the\n   <a class="reference internal" href="#flask.Config.from_object" title="flask.Config.from_object">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      from_object()\n     </span>\n    </code>\n   </a>\n   function.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        filename\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 the filename of the config.  This can either be an\nabsolute filename or a filename relative to the\nroot path.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        silent\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 set to\n       <code class="docutils literal notranslate">\n        <span class="pre">\n         True\n        </span>\n       </code>\n       if you want silent failure for missing\nfiles.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Returns\n   </dt>\n   <dd class="field-even">\n    <p>\n     <code class="docutils literal notranslate">\n      <span class="pre">\n       True\n      </span>\n     </code>\n     if the file was loaded successfully.\n    </p>\n   </dd>\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n      bool\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.7:\n     </span>\n     <cite>\n      silent\n     </cite>\n     parameter.\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Configuration",
    type: ["py", "method"],
    name: "get_namespace",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.Config.get_namespace">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_namespace\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     namespace\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     lowercase\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     True\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     trim_namespace\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     True\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.Config.get_namespace" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">\'IMAGE_STORE_TYPE\'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">\'fs\'</span>\n<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">\'IMAGE_STORE_PATH\'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">\'/var/app/images\'</span>\n<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">\'IMAGE_STORE_BASE_URL\'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">\'http://img.website.com\'</span>\n<span class="n">image_store_config</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">get_namespace</span><span class="p">(</span><span class="s1">\'IMAGE_STORE_\'</span><span class="p">)</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   The resulting dictionary\n   <cite>\n    image_store_config\n   </cite>\n   would look like:\n  </p>\n  <div class="highlight-default notranslate">\n   <div class="highlight">\n    <pre><span></span><span class="p">{</span>\n    <span class="s1">\'type\'</span><span class="p">:</span> <span class="s1">\'fs\'</span><span class="p">,</span>\n    <span class="s1">\'path\'</span><span class="p">:</span> <span class="s1">\'/var/app/images\'</span><span class="p">,</span>\n    <span class="s1">\'base_url\'</span><span class="p">:</span> <span class="s1">\'http://img.website.com\'</span>\n<span class="p">}</span>\n</pre>\n   </div>\n  </div>\n  <p>\n   This is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        namespace\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013 a configuration namespace\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        lowercase\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 a flag indicating if the keys of the resulting\ndictionary should be lowercase\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        trim_namespace\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">\n        <em>\n         bool\n        </em>\n       </a>\n       ) \u2013 a flag indicating if the keys of the resulting\ndictionary should not include the namespace\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Dict" title="(in Python v3.11)">\n      <em>\n       Dict\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.11.\n     </span>\n    </p>\n   </div>\n  </details>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Internals",
    type: ["py", "method"],
    name: "copy",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.ctx.RequestContext.copy">\n  <span class="sig-name descname">\n   <span class="pre">\n    copy\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.ctx.RequestContext.copy" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 1.1:\n     </span>\n     The current session object is used instead of reloading the original\ndata. This prevents\n     <cite>\n      flask.session\n     </cite>\n     pointing to an out-of-date object.\n    </p>\n   </div>\n   <div class="versionadded">\n    <p>\n     <span class="versionmodified added">\n      New in version 0.10.\n     </span>\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.ctx.RequestContext" title="flask.ctx.RequestContext">\n      flask.ctx.RequestContext\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Internals",
    type: ["py", "method"],
    name: "match_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.ctx.RequestContext.match_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    match_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.ctx.RequestContext.match_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Can be overridden by a subclass to hook into the matching\nof the request.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Internals",
    type: ["py", "method"],
    name: "pop",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.ctx.RequestContext.pop">\n  <span class="sig-name descname">\n   <span class="pre">\n    pop\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     exc=&lt;object\n    </span>\n    <span class="pre">\n     object&gt;\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.ctx.RequestContext.pop" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the\n   <a class="reference internal" href="#flask.Flask.teardown_request" title="flask.Flask.teardown_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      teardown_request()\n     </span>\n    </code>\n   </a>\n   decorator.\n  </p>\n  <details class="changelog">\n   <summary>\n    Changelog\n   </summary>\n   <div class="versionchanged">\n    <p>\n     <span class="versionmodified changed">\n      Changed in version 0.9:\n     </span>\n     Added the\n     <cite>\n      exc\n     </cite>\n     argument.\n    </p>\n   </div>\n  </details>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      exc\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#BaseException" title="(in Python v3.11)">\n      <em>\n       BaseException\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Internals",
    type: ["py", "method"],
    name: "pop",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.ctx.AppContext.pop">\n  <span class="sig-name descname">\n   <span class="pre">\n    pop\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     exc=&lt;object\n    </span>\n    <span class="pre">\n     object&gt;\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.ctx.AppContext.pop" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Pops the app context.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      exc\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n      <em>\n       Optional\n      </em>\n     </a>\n     <em>\n      [\n     </em>\n     <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#BaseException" title="(in Python v3.11)">\n      <em>\n       BaseException\n      </em>\n     </a>\n     <em>\n      ]\n     </em>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Internals",
    type: ["py", "method"],
    name: "push",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.ctx.AppContext.push">\n  <span class="sig-name descname">\n   <span class="pre">\n    push\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.ctx.AppContext.push" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Binds the app context to the current context.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Useful Internals",
    type: ["py", "method"],
    name: "add_url_rule",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.blueprints.BlueprintSetupState.add_url_rule">\n  <span class="sig-name descname">\n   <span class="pre">\n    add_url_rule\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     rule\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     endpoint\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     view_func\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     options\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.blueprints.BlueprintSetupState.add_url_rule" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint\u2019s name.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        rule\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        endpoint\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        view_func\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n        <em>\n         Callable\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        options\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     None\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Signals",
    type: ["py", "method"],
    name: "signal",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.signals.Namespace.signal">\n  <span class="sig-name descname">\n   <span class="pre">\n    signal\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     doc\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.signals.Namespace.signal" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Creates a new signal for this namespace if blinker is available,\notherwise returns a fake signal that has a send method that will\ndo nothing but will fail with a\n   <a class="reference external" href="https://docs.python.org/3/library/exceptions.html#RuntimeError" title="(in Python v3.11)">\n    <code class="xref py py-exc docutils literal notranslate">\n     <span class="pre">\n      RuntimeError\n     </span>\n    </code>\n   </a>\n   for all other\noperations, including connecting.\n  </p>\n </dd>\n</dl>\n',
  },
  {
    group: "Class-Based Views",
    type: ["py", "method"],
    name: "as_view",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.views.View.as_view">\n  <em class="property">\n   <span class="pre">\n    classmethod\n   </span>\n   <span class="w">\n   </span>\n  </em>\n  <span class="sig-name descname">\n   <span class="pre">\n    as_view\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     class_args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     class_kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.views.View.as_view" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Convert the class into a view function that can be registered\nfor a route.\n  </p>\n  <p>\n   By default, the generated view will create a new instance of the\nview class for every request and call its\n   <a class="reference internal" href="#flask.views.View.dispatch_request" title="flask.views.View.dispatch_request">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      dispatch_request()\n     </span>\n    </code>\n   </a>\n   method. If the view class sets\n   <a class="reference internal" href="#flask.views.View.init_every_request" title="flask.views.View.init_every_request">\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      init_every_request\n     </span>\n    </code>\n   </a>\n   to\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     False\n    </span>\n   </code>\n   , the same instance will\nbe used for every request.\n  </p>\n  <p>\n   Except for\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     name\n    </span>\n   </code>\n   , all other arguments passed to this method\nare forwarded to the view class\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     __init__\n    </span>\n   </code>\n   method.\n  </p>\n  <div class="versionchanged">\n   <p>\n    <span class="versionmodified changed">\n     Changed in version 2.2:\n    </span>\n    Added the\n    <code class="docutils literal notranslate">\n     <span class="pre">\n      init_every_request\n     </span>\n    </code>\n    class attribute.\n   </p>\n  </div>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        class_args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        class_kwargs\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[\u2026],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]], WSGIApplication]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Callable" title="(in Python v3.11)">\n      <em>\n       Callable\n      </em>\n     </a>\n     [[\u2026],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Awaitable" title="(in Python v3.11)">\n      <em>\n       Awaitable\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]], WSGIApplication]]]]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Class-Based Views",
    type: ["py", "method"],
    name: "dispatch_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.views.View.dispatch_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    dispatch_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.views.View.dispatch_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   The actual view function behavior. Subclasses must override\nthis and return a valid response. Any variables from the URL\nrule are passed as keyword arguments.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]], WSGIApplication]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Class-Based Views",
    type: ["py", "method"],
    name: "dispatch_request",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.views.MethodView.dispatch_request">\n  <span class="sig-name descname">\n   <span class="pre">\n    dispatch_request\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.views.MethodView.dispatch_request" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   The actual view function behavior. Subclasses must override\nthis and return a valid response. Any variables from the URL\nrule are passed as keyword arguments.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <strong>\n      kwargs\n     </strong>\n     (\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ) \u2013\n    </p>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference internal" href="#flask.Response" title="flask.Response">\n      Response\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n      <em>\n       Any\n      </em>\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Iterator" title="(in Python v3.11)">\n      <em>\n       Iterator\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#bytes" title="(in Python v3.11)">\n      bytes\n     </a>\n     ]],\n     <a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.11)">\n      int\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [Headers,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Mapping" title="(in Python v3.11)">\n      <em>\n       Mapping\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Sequence" title="(in Python v3.11)">\n      <em>\n       Sequence\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Union" title="(in Python v3.11)">\n      <em>\n       Union\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ,\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.List" title="(in Python v3.11)">\n      <em>\n       List\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ],\n     <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Tuple" title="(in Python v3.11)">\n      <em>\n       Tuple\n      </em>\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     , \u2026]]]]]], WSGIApplication]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Command Line Interface",
    type: ["py", "method"],
    name: "get_command",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.cli.FlaskGroup.get_command">\n  <span class="sig-name descname">\n   <span class="pre">\n    get_command\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     ctx\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     name\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.cli.FlaskGroup.get_command" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Given a context and a command name, this returns a\n   <code class="xref py py-class docutils literal notranslate">\n    <span class="pre">\n     Command\n    </span>\n   </code>\n   object if it exists or returns\n   <cite>\n    None\n   </cite>\n   .\n  </p>\n </dd>\n</dl>\n',
  },
  {
    group: "Command Line Interface",
    type: ["py", "method"],
    name: "list_commands",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.cli.FlaskGroup.list_commands">\n  <span class="sig-name descname">\n   <span class="pre">\n    list_commands\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     ctx\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.cli.FlaskGroup.list_commands" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Returns a list of subcommand names in the order they should\nappear.\n  </p>\n </dd>\n</dl>\n',
  },
  {
    group: "Command Line Interface",
    type: ["py", "method"],
    name: "make_context",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.cli.FlaskGroup.make_context">\n  <span class="sig-name descname">\n   <span class="pre">\n    make_context\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     info_name\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     parent\n    </span>\n   </span>\n   <span class="o">\n    <span class="pre">\n     =\n    </span>\n   </span>\n   <span class="default_value">\n    <span class="pre">\n     None\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     extra\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.cli.FlaskGroup.make_context" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This function when given an info name and arguments will kick\noff the parsing and create a new\n   <code class="xref py py-class docutils literal notranslate">\n    <span class="pre">\n     Context\n    </span>\n   </code>\n   .  It does not\ninvoke the actual command callback though.\n  </p>\n  <p>\n   To quickly customize the context class used without overriding\nthis method, set the\n   <code class="xref py py-attr docutils literal notranslate">\n    <span class="pre">\n     context_class\n    </span>\n   </code>\n   attribute.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        info_name\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        |\n       </em>\n       <em>\n        None\n       </em>\n       ) \u2013 the info name for this invocation.  Generally this\nis the most descriptive name for the script or\ncommand.  For the toplevel script it\u2019s usually\nthe name of the script, for commands below it it\u2019s\nthe name of the command.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#list" title="(in Python v3.11)">\n        <em>\n         list\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the arguments to parse as list of strings.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        parent\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Optional" title="(in Python v3.11)">\n        <em>\n         Optional\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://click.palletsprojects.com/en/8.1.x/api/#click.Context" title="(in Click v8.1.x)">\n        <em>\n         click.core.Context\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013 the parent context if available.\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        extra\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Any" title="(in Python v3.11)">\n        <em>\n         Any\n        </em>\n       </a>\n       ) \u2013 extra keyword arguments forwarded to the context\nconstructor.\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://click.palletsprojects.com/en/8.1.x/api/#click.Context" title="(in Click v8.1.x)">\n      click.core.Context\n     </a>\n    </p>\n   </dd>\n  </dl>\n  <div class="versionchanged">\n   <p>\n    <span class="versionmodified changed">\n     Changed in version 8.0:\n    </span>\n    Added the\n    <code class="xref py py-attr docutils literal notranslate">\n     <span class="pre">\n      context_class\n     </span>\n    </code>\n    attribute.\n   </p>\n  </div>\n </dd>\n</dl>\n',
  },
  {
    group: "Command Line Interface",
    type: ["py", "method"],
    name: "parse_args",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.cli.FlaskGroup.parse_args">\n  <span class="sig-name descname">\n   <span class="pre">\n    parse_args\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     ctx\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.cli.FlaskGroup.parse_args" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Given a context and a list of arguments this creates the parser\nand parses the arguments, then modifies the context as necessary.\nThis is automatically invoked by\n   <a class="reference internal" href="#flask.cli.FlaskGroup.make_context" title="flask.cli.FlaskGroup.make_context">\n    <code class="xref py py-meth docutils literal notranslate">\n     <span class="pre">\n      make_context()\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Parameters\n   </dt>\n   <dd class="field-odd">\n    <ul class="simple">\n     <li>\n      <p>\n       <strong>\n        ctx\n       </strong>\n       (\n       <a class="reference external" href="https://click.palletsprojects.com/en/8.1.x/api/#click.Context" title="(in Click v8.1.x)">\n        <em>\n         click.core.Context\n        </em>\n       </a>\n       ) \u2013\n      </p>\n     </li>\n     <li>\n      <p>\n       <strong>\n        args\n       </strong>\n       (\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#list" title="(in Python v3.11)">\n        <em>\n         list\n        </em>\n       </a>\n       <em>\n        [\n       </em>\n       <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n        <em>\n         str\n        </em>\n       </a>\n       <em>\n        ]\n       </em>\n       ) \u2013\n      </p>\n     </li>\n    </ul>\n   </dd>\n   <dt class="field-even">\n    Return type\n   </dt>\n   <dd class="field-even">\n    <p>\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#list" title="(in Python v3.11)">\n      list\n     </a>\n     [\n     <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.11)">\n      str\n     </a>\n     ]\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
  {
    group: "Command Line Interface",
    type: ["py", "method"],
    name: "command",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.cli.AppGroup.command">\n  <span class="sig-name descname">\n   <span class="pre">\n    command\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.cli.AppGroup.command" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This works exactly like the method of the same name on a regular\n   <a class="reference external" href="https://click.palletsprojects.com/en/8.1.x/api/#click.Group" title="(in Click v8.1.x)">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      click.Group\n     </span>\n    </code>\n   </a>\n   but it wraps callbacks in\n   <a class="reference internal" href="#flask.cli.with_appcontext" title="flask.cli.with_appcontext">\n    <code class="xref py py-func docutils literal notranslate">\n     <span class="pre">\n      with_appcontext()\n     </span>\n    </code>\n   </a>\n   unless it\u2019s disabled by passing\n   <code class="docutils literal notranslate">\n    <span class="pre">\n     with_appcontext=False\n    </span>\n   </code>\n   .\n  </p>\n </dd>\n</dl>\n',
  },
  {
    group: "Command Line Interface",
    type: ["py", "method"],
    name: "group",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.cli.AppGroup.group">\n  <span class="sig-name descname">\n   <span class="pre">\n    group\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     *\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     args\n    </span>\n   </span>\n  </em>\n  ,\n  <em class="sig-param">\n   <span class="o">\n    <span class="pre">\n     **\n    </span>\n   </span>\n   <span class="n">\n    <span class="pre">\n     kwargs\n    </span>\n   </span>\n  </em>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.cli.AppGroup.group" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   This works exactly like the method of the same name on a regular\n   <a class="reference external" href="https://click.palletsprojects.com/en/8.1.x/api/#click.Group" title="(in Click v8.1.x)">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      click.Group\n     </span>\n    </code>\n   </a>\n   but it defaults the group class to\n   <a class="reference internal" href="#flask.cli.AppGroup" title="flask.cli.AppGroup">\n    <code class="xref py py-class docutils literal notranslate">\n     <span class="pre">\n      AppGroup\n     </span>\n    </code>\n   </a>\n   .\n  </p>\n </dd>\n</dl>\n',
  },
  {
    group: "Command Line Interface",
    type: ["py", "method"],
    name: "load_app",
    body: '<dl class="py method">\n <dt class="sig sig-object py" id="flask.cli.ScriptInfo.load_app">\n  <span class="sig-name descname">\n   <span class="pre">\n    load_app\n   </span>\n  </span>\n  <span class="sig-paren">\n   (\n  </span>\n  <span class="sig-paren">\n   )\n  </span>\n  <a class="headerlink" href="#flask.cli.ScriptInfo.load_app" title="Permalink to this definition">\n   \u00b6\n  </a>\n </dt>\n <dd>\n  <p>\n   Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned.\n  </p>\n  <dl class="field-list simple">\n   <dt class="field-odd">\n    Return type\n   </dt>\n   <dd class="field-odd">\n    <p>\n     <a class="reference internal" href="#flask.Flask" title="flask.Flask">\n      Flask\n     </a>\n    </p>\n   </dd>\n  </dl>\n </dd>\n</dl>\n',
  },
];

const vue = [
  {
    group: "Application API",
    type: ["Global API"],
    name: "createApp()",
    body: '<p>\n Creates an application instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rootComponent</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">rootProps</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The first argument is the root component. The second optional argument is the props to be passed to the root component.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   With inline root component:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* root component options */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   With imported component:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./App.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(App)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/application.html">\n    Guide - Creating a Vue Application\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "createSSRApp()",
    body: '<p>\n Creates an application instance in\n <a href="/guide/scaling-up/ssr.html#client-hydration">\n  SSR Hydration\n </a>\n mode. Usage is exactly the same as\n <code>\n  createApp()\n </code>\n .\n</p>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.mount()",
    body: '<p>\n Mounts the application instance in a container element.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rootContainer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Element</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.\n  </p>\n  <p>\n   If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, the\n   <code>\n    innerHTML\n   </code>\n   of the container will be used as the template.\n  </p>\n  <p>\n   In SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there are\n   <a href="/guide/scaling-up/ssr.html#hydration-mismatch">\n    mismatches\n   </a>\n   , the existing DOM nodes will be morphed to match the expected output.\n  </p>\n  <p>\n   For each app instance,\n   <code>\n    mount()\n   </code>\n   can only be called once.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Can also mount to an actual DOM element:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">firstChild)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.unmount()",
    body: '<p>\n Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application\'s component tree.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">unmount</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.provide()",
    body: '<p>\n Provide a value that can be injected in all descendant components within the application.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">provide</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InjectionKey</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">symbol</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">this</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Expects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Inside a component in the application:\n  </p>\n  <div class="composition-api">\n   <div class="language-js">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     js\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">inject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">inject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)) </span><span style="color:#676E95;">// \'hello\'</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n   </div>\n  </div>\n  <div class="options-api">\n   <div class="language-js">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     js\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// \'hello\'</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n   </div>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/components/provide-inject.html">\n     Provide / Inject\n    </a>\n   </li>\n   <li>\n    <a href="/guide/components/provide-inject.html#app-level-provide">\n     App-level Provide\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.component()",
    body: '<p>\n Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">this</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// register an options object</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">my-component</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// retrieve a registered component</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">my-component</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/components/registration.html">\n    Component Registration\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.directive()",
    body: '<p>\n Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">directive</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Directive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">directive</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">directive</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Directive</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">this</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// register (object directive)</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">my-directive</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* custom directive hooks */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// register (function directive shorthand)</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">my-directive</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// retrieve a registered directive</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myDirective </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">my-directive</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/reusability/custom-directives.html">\n    Custom Directives\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.use()",
    body: '<p>\n Installs a\n <a href="/guide/reusability/plugins.html">\n  plugin\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">plugin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Plugin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">this</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Expects the plugin as the first argument, and optional plugin options as the second argument.\n  </p>\n  <p>\n   The plugin can either be an object with an\n   <code>\n    install()\n   </code>\n   method, or just a function that will be used as the\n   <code>\n    install()\n   </code>\n   method. The options (second argument of\n   <code>\n    app.use()\n   </code>\n   ) will be passed along to the plugin\'s\n   <code>\n    install()\n   </code>\n   method.\n  </p>\n  <p>\n   When\n   <code>\n    app.use()\n   </code>\n   is called on the same plugin multiple times, the plugin will be installed only once.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> MyPlugin </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./plugins/MyPlugin</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(MyPlugin)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/reusability/plugins.html">\n    Plugins\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.mixin()",
    body: '<p>\n Applies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application.\n</p>\n<div class="warning custom-block">\n <p class="custom-block-title">\n  Not Recommended\n </p>\n <p>\n  Mixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code.\n </p>\n <p>\n  For logic reuse, prefer\n  <a href="/guide/reusability/composables.html">\n   Composables\n  </a>\n  instead.\n </p>\n</div>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mixin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">mixin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">this</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.version",
    body: '<p>\n Provides the version of Vue that the application was created with. This is useful inside\n <a href="/guide/reusability/plugins.html">\n  plugins\n </a>\n , where you might need conditional logic based on different Vue versions.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Performing a version check inside a plugin:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">install</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">version</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">version</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">])</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">version</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">This plugin requires Vue 3</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/api/general.html#version">\n    Global API - version\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.config",
    body: '<p>\n Every application instance exposes a\n <code>\n  config\n </code>\n object that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application.\n</p>\n<div class="language-js">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  js\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config)</span></span>\n<span class="line"></span></code></pre>\n</div>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.config.errorHandler",
    body: '<p>\n Assign a global handler for uncaught errors propagating from within the application.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">errorHandler</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// `info` is a Vue-specific error info,</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// e.g. which lifecycle hook the error was thrown in</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n  </p>\n  <p>\n   It can capture errors from the following sources:\n  </p>\n  <ul>\n   <li>\n    Component renders\n   </li>\n   <li>\n    Event handlers\n   </li>\n   <li>\n    Lifecycle hooks\n   </li>\n   <li>\n    <code>\n     setup()\n    </code>\n    function\n   </li>\n   <li>\n    Watchers\n   </li>\n   <li>\n    Custom directive hooks\n   </li>\n   <li>\n    Transition hooks\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">errorHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// handle error, e.g. report to a service</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.config.warnHandler",
    body: '<p>\n Assign a custom handler for runtime warnings from Vue.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">warnHandler</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">trace</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.\n  </p>\n  <p>\n   It can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.\n  </p>\n  <div class="tip custom-block">\n   <p class="custom-block-title">\n    TIP\n   </p>\n   <p>\n    Warnings only work during development, so this config is ignored in production mode.\n   </p>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warnHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">trace</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// `trace` is the component hierarchy trace</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.config.performance",
    body: '<p>\n Set this to\n <code>\n  true\n </code>\n to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the\n <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark" rel="noreferrer" target="_blank">\n  performance.mark\n </a>\n API.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n   :\n   <code>\n    boolean\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/best-practices/performance.html">\n    Guide - Performance\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.config.compilerOptions",
    body: '<p>\n Configure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using the\n <a href="/api/options-rendering.html#compileroptions">\n  <code>\n   compilerOptions\n  </code>\n  option\n </a>\n .\n</p>\n<div class="warning custom-block">\n <p class="custom-block-title">\n  Important\n </p>\n <p>\n  This config option is only respected when using the full build (i.e. the standalone\n  <code>\n   vue.js\n  </code>\n  that can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to\n  <code>\n   @vue/compiler-dom\n  </code>\n  via build tool configurations instead.\n </p>\n <ul>\n  <li>\n   <p>\n    For\n    <code>\n     vue-loader\n    </code>\n    :\n    <a href="https://vue-loader.vuejs.org/options.html#compileroptions" rel="noreferrer" target="_blank">\n     pass via the\n     <code>\n      compilerOptions\n     </code>\n     loader option\n    </a>\n    . Also see\n    <a href="https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader" rel="noreferrer" target="_blank">\n     how to configure it in\n     <code>\n      vue-cli\n     </code>\n    </a>\n    .\n   </p>\n  </li>\n  <li>\n   <p>\n    For\n    <code>\n     vite\n    </code>\n    :\n    <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#options" rel="noreferrer" target="_blank">\n     pass via\n     <code>\n      @vitejs/plugin-vue\n     </code>\n     options\n    </a>\n    .\n   </p>\n  </li>\n </ul>\n</div>\n<h3 id="app-config-compileroptions-iscustomelement" tabindex="-1">\n app.config.compilerOptions.isCustomElement\n <a aria-hidden="true" class="header-anchor" href="#app-config-compileroptions-iscustomelement">\n  #\n </a>\n</h3>\n<p>\n Specifies a check method to recognize native custom elements.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type:\n   </strong>\n   <code>\n    (tag: string) =&gt; boolean\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Should return\n   <code>\n    true\n   </code>\n   if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.\n  </p>\n  <p>\n   Native HTML and SVG tags don\'t need to be matched in this function - Vue\'s parser recognizes them automatically.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// treat all tags starting with \'ion-\' as custom elements</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isCustomElement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">ion-</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/web-components.html">\n    Vue and Web Components\n   </a>\n  </p>\n </li>\n</ul>\n<h3 id="app-config-compileroptions-whitespace" tabindex="-1">\n app.config.compilerOptions.whitespace\n <a aria-hidden="true" class="header-anchor" href="#app-config-compileroptions-whitespace">\n  #\n </a>\n</h3>\n<p>\n Adjusts template whitespace handling behavior.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type:\n   </strong>\n   <code>\n    \'condense\' | \'preserve\'\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Default:\n   </strong>\n   <code>\n    \'condense\'\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Vue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is "condense", with the following behavior:\n  </p>\n  <ol>\n   <li>\n    Leading / ending whitespace characters inside an element are condensed into a single space.\n   </li>\n   <li>\n    Whitespace characters between elements that contain newlines are removed.\n   </li>\n   <li>\n    Consecutive whitespace characters in text nodes are condensed into a single space.\n   </li>\n  </ol>\n  <p>\n   Setting this option to\n   <code>\n    \'preserve\'\n   </code>\n   will disable (2) and (3).\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">whitespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">preserve</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n<h3 id="app-config-compileroptions-delimiters" tabindex="-1">\n app.config.compilerOptions.delimiters\n <a aria-hidden="true" class="header-anchor" href="#app-config-compileroptions-delimiters">\n  #\n </a>\n</h3>\n<p>\n Adjusts the delimiters used for text interpolation within the template.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type:\n   </strong>\n   <code>\n    [string, string]\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Default:\n   </strong>\n   <code>\n    [\'{{\', \'}}\']\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   This is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Delimiters changed to ES6 template string style</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">delimiters </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">${</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n<h3 id="app-config-compileroptions-comments" tabindex="-1">\n app.config.compilerOptions.comments\n <a aria-hidden="true" class="header-anchor" href="#app-config-compileroptions-comments">\n  #\n </a>\n</h3>\n<p>\n Adjusts treatment of HTML comments in templates.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type:\n   </strong>\n   <code>\n    boolean\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Default:\n   </strong>\n   <code>\n    false\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   By default, Vue will remove the comments in production. Setting this option to\n   <code>\n    true\n   </code>\n   will force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">comments </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.config.globalProperties",
    body: '<p>\n An object that can be used to register global properties that can be accessed on any component instance inside the application.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">globalProperties</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   This is a replacement of Vue 2\'s\n   <code>\n    Vue.prototype\n   </code>\n   which is no longer present in Vue 3. As with anything global, this should be used sparingly.\n  </p>\n  <p>\n   If a global property conflicts with a component\u2019s own property, the component\'s own property will have higher priority.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Usage\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">globalProperties</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   This makes\n   <code>\n    msg\n   </code>\n   available inside any component template in the application, and also on\n   <code>\n    this\n   </code>\n   of any component instance:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// \'hello\'</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/typescript/options-api.html#augmenting-global-properties">\n    Guide - Augmenting Global Properties\n   </a>\n   <sup class="vt-badge ts">\n   </sup>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Application API",
    type: ["Global API"],
    name: "app.config.optionMergeStrategies",
    body: '<p>\n An object for defining merging strategies for custom component options.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optionMergeStrategies</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OptionMergeFunction</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OptionMergeFunction</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">from</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Some plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be "merged" from multiple sources (e.g. mixins or component inheritance).\n  </p>\n  <p>\n   A merge strategy function can be registered for a custom option by assigning it on the\n   <code>\n    app.config.optionMergeStrategies\n   </code>\n   object using the option\'s name as the key.\n  </p>\n  <p>\n   The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// option from self</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Vue</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// option from a mixin</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mixins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// merged options exposed on this.$options</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// define a custom merge strategy for `msg`</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">optionMergeStrategies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">msg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">parent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\'\'</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">child</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\'\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#676E95;">// logs \'Hello Vue\'</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/api/component-instance.html#options">\n    Component Instance -\n    <code>\n     $options\n    </code>\n   </a>\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Global API: General",
    type: ["Global API"],
    name: "version",
    body: '<p>\n Exposes the current version of Vue.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type:\n   </strong>\n   <code>\n    string\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">version</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(version)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Global API: General",
    type: ["Global API"],
    name: "nextTick()",
    body: '<p>\n A utility for waiting for the next DOM update flush.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nextTick</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   When you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the "next tick" to ensure that each component updates only once no matter how many state changes you have made.\n  </p>\n  <p>\n   <code>\n    nextTick()\n   </code>\n   can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="composition-api">\n   <div class="language-vue">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     vue\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextTick</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// DOM not yet updated</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">counter</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">nextTick</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// DOM is now updated</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">counter</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// 1</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#F78C6C;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">counter</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">increment</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n   </div>\n  </div>\n  <div class="options-api">\n   <div class="language-vue">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     vue\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextTick</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">increment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// DOM not yet updated</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">counter</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">nextTick</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// DOM is now updated</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">counter</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// 1</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#F78C6C;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">counter</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">increment</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n   </div>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/api/component-instance.html#nexttick">\n    <code>\n     this.$nextTick()\n    </code>\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Global API: General",
    type: ["Global API"],
    name: "defineComponent()",
    body: '<p>\n A type helper for defining a Vue component with type inference.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineComponent</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">setup</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentConstructor</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <blockquote>\n   <p>\n    Type is simplified for readability.\n   </p>\n  </blockquote>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.\n  </p>\n  <p>\n   Note that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.\n  </p>\n  <p>\n   You can extract the instance type of a component (equivalent to the type of\n   <code>\n    this\n   </code>\n   in its options) from the return type of\n   <code>\n    defineComponent()\n   </code>\n   like this:\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InstanceType</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#A6ACCD;"> Foo</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <h3 id="note-on-webpack-treeshaking" tabindex="-1">\n   Note on webpack Treeshaking\n   <a aria-hidden="true" class="header-anchor" href="#note-on-webpack-treeshaking">\n    #\n   </a>\n  </h3>\n  <p>\n   Because\n   <code>\n    defineComponent()\n   </code>\n   is a function call, it could look like that it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.\n  </p>\n  <p>\n   To tell webpack that this function call is safe to be tree-shaken, you can add a\n   <code>\n    /*#__PURE__*/\n   </code>\n   comment notation before the function call:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/*#__PURE__*/</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Note this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that\n   <code>\n    defineComponent()\n   </code>\n   is in fact side-effect-free without the need for manual annotations.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/typescript/overview.html#general-usage-notes">\n    Guide - Using Vue with TypeScript\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Global API: General",
    type: ["Global API"],
    name: "defineAsyncComponent()",
    body: '<p>\n Define an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineAsyncComponent</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncComponentLoader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncComponentOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncComponentLoader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">loader</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncComponentLoader</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">loadingComponent</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">errorComponent</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">delay</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">timeout</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">suspensible</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onError</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Error</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">retry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">fail</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">attempts</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/components/async.html">\n    Guide - Async Components\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Global API: General",
    type: ["Global API"],
    name: "defineCustomElement()",
    body: '<p>\n This method accepts the same argument as\n <a href="#definecomponent">\n  <code>\n   defineComponent\n  </code>\n </a>\n , but instead returns a native\n <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" rel="noreferrer" target="_blank">\n  Custom Element\n </a>\n class constructor.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineCustomElement</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">styles</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">setup</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HTMLElement</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <blockquote>\n   <p>\n    Type is simplified for readability.\n   </p>\n  </blockquote>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   In addition to normal component options,\n   <code>\n    defineCustomElement()\n   </code>\n   also supports a special option\n   <code>\n    styles\n   </code>\n   , which should be an array of inlined CSS strings, for providing CSS that should be injected into the element\'s shadow root.\n  </p>\n  <p>\n   The return value is a custom element constructor that can be registered using\n   <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define" rel="noreferrer" target="_blank">\n    <code>\n     customElements.define()\n    </code>\n   </a>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineCustomElement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyVueElement </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineCustomElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* component options */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// Register the custom element.</span></span>\n<span class="line"><span style="color:#A6ACCD;">customElements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">my-vue-element</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MyVueElement)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <p>\n     <a href="/guide/extras/web-components.html#building-custom-elements-with-vue">\n      Guide - Building Custom Elements with Vue\n     </a>\n    </p>\n   </li>\n   <li>\n    <p>\n     Also note that\n     <code>\n      defineCustomElement()\n     </code>\n     requires\n     <a href="/guide/extras/web-components.html#sfc-as-custom-element">\n      special config\n     </a>\n     when used with Single-File Components.\n    </p>\n   </li>\n  </ul>\n </li>\n</ul>',
  },
  {
    group: "Reactivity API: Core",
    type: ["Composition API"],
    name: "ref()",
    body: '<p>\n Takes an inner value and returns a reactive and mutable ref object, which has a single property\n <code>\n  .value\n </code>\n that points to the inner value.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UnwrapRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The ref object is mutable - i.e. you can assign new values to\n   <code>\n    .value\n   </code>\n   . It is also reactive - i.e. any read operations to\n   <code>\n    .value\n   </code>\n   are tracked, and write operations will trigger associated effects.\n  </p>\n  <p>\n   If an object is assigned as a ref\'s value, the object is made deeply reactive with\n   <a href="#reactive">\n    reactive()\n   </a>\n   . This also means if the object contains nested refs, they will be deeply unwrapped.\n  </p>\n  <p>\n   To avoid the deep conversion, use\n   <a href="./reactivity-advanced.html#shallowref">\n    <code>\n     shallowRef()\n    </code>\n   </a>\n   instead.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// 1</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/reactivity-fundamentals.html#reactive-variables-with-ref">\n     Guide - Reactive Variables with\n     <code>\n      ref()\n     </code>\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/composition-api.html#typing-ref">\n     Guide - Typing\n     <code>\n      ref()\n     </code>\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Core",
    type: ["Composition API"],
    name: "computed()",
    body: '<p>\n Takes a getter function and returns a readonly reactive\n <a href="#ref">\n  ref\n </a>\n object for the returned value from the getter. It can also take an object with\n <code>\n  get\n </code>\n and\n <code>\n  set\n </code>\n functions to create a writable ref object.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// read-only</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">getter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// see "Computed Debugging" link below</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">debuggerOptions</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;&gt;&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// writable</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">debuggerOptions</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Creating a readonly computed ref:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> plusOne </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(plusOne</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">plusOne</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// error</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Creating a writable computed ref:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> plusOne </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">plusOne</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// 0</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Debugging:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> plusOne </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">debugger</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrigger</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">debugger</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/computed.html">\n     Guide - Computed Properties\n    </a>\n   </li>\n   <li>\n    <a href="/guide/extras/reactivity-in-depth.html#computed-debugging">\n     Guide - Computed Debugging\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/composition-api.html#typing-computed">\n     Guide - Typing\n     <code>\n      computed()\n     </code>\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Core",
    type: ["Composition API"],
    name: "reactive()",
    body: '<p>\n Returns a reactive proxy of the object.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UnwrapNestedRefs</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The reactive conversion is "deep": it affects all nested properties. A reactive object also deeply unwraps any properties that are\n   <a href="#ref">\n    refs\n   </a>\n   while maintaining reactivity.\n  </p>\n  <p>\n   It should also be noted that there is no ref unwrapping performed when the ref is accessed as an element of a reactive array or a native collection type like\n   <code>\n    Map\n   </code>\n   .\n  </p>\n  <p>\n   To avoid the deep conversion and only retain reactivity at the root level, use\n   <a href="./reactivity-advanced.html#shallowreactive">\n    shallowReactive()\n   </a>\n   instead.\n  </p>\n  <p>\n   The returned object and its nested objects are wrapped with\n   <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" rel="noreferrer" target="_blank">\n    ES Proxy\n   </a>\n   and\n   <strong>\n    not\n   </strong>\n   equal to the original objects. It is recommended to work exclusively with the reactive proxy and avoid relying on the original object.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Creating a reactive object:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Ref unwrapping:\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// ref will be unwrapped</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// it will update `obj.count`</span></span>\n<span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// 2</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count) </span><span style="color:#676E95;">// 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// it will also update `count` ref</span></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count) </span><span style="color:#676E95;">// 3</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// 3</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Note that refs are\n   <strong>\n    not\n   </strong>\n   unwrapped when accessed as array or collection elements:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> books </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">([</span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Vue 3 Guide</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)])</span></span>\n<span class="line"><span style="color:#676E95;">// need .value here</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(books[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">([[</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)]]))</span></span>\n<span class="line"><span style="color:#676E95;">// need .value here</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When assigning a\n   <a href="#ref">\n    ref\n   </a>\n   to a\n   <code>\n    reactive\n   </code>\n   property, that ref will also be automatically unwrapped:\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> count</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count) </span><span style="color:#676E95;">// 1</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// true</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/reactivity-fundamentals.html">\n     Guide - Reactivity Fundamentals\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/composition-api.html#typing-reactive">\n     Guide - Typing\n     <code>\n      reactive()\n     </code>\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Core",
    type: ["Composition API"],
    name: "readonly()",
    body: '<p>\n Takes an object (reactive or plain) or a\n <a href="#ref">\n  ref\n </a>\n and returns a readonly proxy to the original.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DeepReadonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UnwrapNestedRefs</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   A readonly proxy is deep: any nested property accessed will be readonly as well. It also has the same ref-unwrapping behavior as\n   <code>\n    reactive()\n   </code>\n   , except the unwrapped values will also be made readonly.\n  </p>\n  <p>\n   To avoid the deep conversion, use\n   <a href="./reactivity-advanced.html#shallowreadonly">\n    shallowReadonly()\n   </a>\n   instead.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> original </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> copy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">readonly</span><span style="color:#A6ACCD;">(original)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// works for reactivity tracking</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">copy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// mutating original will trigger watchers relying on the copy</span></span>\n<span class="line"><span style="color:#A6ACCD;">original</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// mutating the copy will fail and result in a warning</span></span>\n<span class="line"><span style="color:#A6ACCD;">copy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// warning!</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Core",
    type: ["Composition API"],
    name: "watchEffect()",
    body: '<p>\n Runs a function immediately while reactively tracking its dependencies and re-runs it whenever the dependencies are changed.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">effect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnCleanup</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchEffectOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StopHandle</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnCleanup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cleanupFn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchEffectOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">pre</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: \'pre\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrack</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrigger</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StopHandle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The first argument is the effect function to be run. The effect function receives a function that can be used to register a cleanup callback. The cleanup callback will be called right before the next time the effect is re-run, and can be used to clean up invalidated side effects, e.g. a pending async request (see example below).\n  </p>\n  <p>\n   The second argument is an optional options object that can be used to adjust the effect\'s flush timing or to debug the effect\'s dependencies.\n  </p>\n  <p>\n   By default, watchers will run just prior to component rendering. Setting\n   <code>\n    flush: \'post\'\n   </code>\n   will defer the watcher until after component rendering. See\n   <a href="/guide/essentials/watchers.html#callback-flush-timing">\n    Callback Flush Timing\n   </a>\n   for more information. In rare cases, it might be necessary to trigger a watcher immediately when a reactive dependency changes, e.g. to invalidate a cache. This can be achieved using\n   <code>\n    flush: \'sync\'\n   </code>\n   . However, this setting should be used with caution, as it can lead to problems with performance and data consistency if multiple properties are being updated at the same time.\n  </p>\n  <p>\n   The return value is a handle function that can be called to stop the effect from running again.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value))</span></span>\n<span class="line"><span style="color:#676E95;">// -&gt; logs 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#676E95;">// -&gt; logs 1</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Side effect cleanup:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">onCleanup</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cancel</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">doAsyncWork</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// `cancel` will be called if `id` changes</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// so that previous pending request will be cancelled</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// if not yet completed</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">onCleanup</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cancel</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Stopping the watcher:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stop </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// when the watcher is no longer needed:</span></span>\n<span class="line"><span style="color:#82AAFF;">stop</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Options:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">debugger</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrigger</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">debugger</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also\n   </strong>\n   :\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/watchers.html#watcheffect">\n     Guide - Watchers\n    </a>\n   </li>\n   <li>\n    <a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">\n     Guide - Watcher Debugging\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Core",
    type: ["Composition API"],
    name: "watchPostEffect()",
    body: "<p>\n Alias of\n <a href=\"#watcheffect\">\n  <code>\n   watchEffect()\n  </code>\n </a>\n with\n <code>\n  flush: 'post'\n </code>\n option.\n</p>\n",
  },
  {
    group: "Reactivity API: Core",
    type: ["Composition API"],
    name: "watchSyncEffect()",
    body: "<p>\n Alias of\n <a href=\"#watcheffect\">\n  <code>\n   watchEffect()\n  </code>\n </a>\n with\n <code>\n  flush: 'sync'\n </code>\n option.\n</p>\n",
  },
  {
    group: "Reactivity API: Core",
    type: ["Composition API"],
    name: "watch()",
    body: '<p>\n Watches one or more reactive data sources and invokes a callback function when the sources change.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// watching single source</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">watch</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchSource</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StopHandle</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// watching multiple sources</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">watch</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">sources</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchSource</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">&gt;,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StopHandle</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cleanupFn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchSource</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// ref</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">// getter</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// reactive object</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchEffectOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">pre</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: \'pre\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrack</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrigger</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <blockquote>\n   <p>\n    Types are simplified for readability.\n   </p>\n  </blockquote>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    watch()\n   </code>\n   is lazy by default - i.e. the callback is only called when the watched source has changed.\n  </p>\n  <p>\n   The first argument is the watcher\'s\n   <strong>\n    source\n   </strong>\n   . The source can be one of the following:\n  </p>\n  <ul>\n   <li>\n    A getter function that returns a value\n   </li>\n   <li>\n    A ref\n   </li>\n   <li>\n    A reactive object\n   </li>\n   <li>\n    ...or an array of the above.\n   </li>\n  </ul>\n  <p>\n   The second argument is the callback that will be called when the source changes. The callback receives three arguments: the new value, the old value, and a function for registering a side effect cleanup callback. The cleanup callback will be called right before the next time the effect is re-run, and can be used to clean up invalidated side effects, e.g. a pending async request.\n  </p>\n  <p>\n   When watching multiple sources, the callback receives two arrays containing new / old values corresponding to the source array.\n  </p>\n  <p>\n   The third optional argument is an options object that supports the following options:\n  </p>\n  <ul>\n   <li>\n    <strong>\n     <code>\n      immediate\n     </code>\n    </strong>\n    : trigger the callback immediately on watcher creation. Old value will be\n    <code>\n     undefined\n    </code>\n    on the first call.\n   </li>\n   <li>\n    <strong>\n     <code>\n      deep\n     </code>\n    </strong>\n    : force deep traversal of the source if it is an object, so that the callback fires on deep mutations. See\n    <a href="/guide/essentials/watchers.html#deep-watchers">\n     Deep Watchers\n    </a>\n    .\n   </li>\n   <li>\n    <strong>\n     <code>\n      flush\n     </code>\n    </strong>\n    : adjust the callback\'s flush timing. See\n    <a href="/guide/essentials/watchers.html#callback-flush-timing">\n     Callback Flush Timing\n    </a>\n    and\n    <a href="/api/reactivity-core.html#watcheffect">\n     <code>\n      watchEffect()\n     </code>\n    </a>\n    .\n   </li>\n   <li>\n    <strong>\n     <code>\n      onTrack / onTrigger\n     </code>\n    </strong>\n    : debug the watcher\'s dependencies. See\n    <a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">\n     Watcher Debugging\n    </a>\n    .\n   </li>\n  </ul>\n  <p>\n   Compared to\n   <a href="#watcheffect">\n    <code>\n     watchEffect()\n    </code>\n   </a>\n   ,\n   <code>\n    watch()\n   </code>\n   allows us to:\n  </p>\n  <ul>\n   <li>\n    Perform the side effect lazily;\n   </li>\n   <li>\n    Be more specific about what state should trigger the watcher to re-run;\n   </li>\n   <li>\n    Access both the previous and current value of the watched state.\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Watching a getter:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">prevCount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Watching a ref:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">prevCount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When watching multiple sources, the callback receives arrays containing new / old values corresponding to the source array:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">([fooRef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> barRef]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">prevFoo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">prevBar</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When using a getter source, the watcher only fires if the getter\'s return value has changed. If you want the callback to fire even on deep mutations, you need to explicitly force the watcher into deep mode with\n   <code>\n    { deep: true }\n   </code>\n   . Note in deep mode, the new value and the old will be the same object if the callback was triggered by a deep mutation:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// newValue === oldValue</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When directly watching a reactive object, the watcher is automatically in deep mode:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;">/* triggers on deep mutation to state */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   <code>\n    watch()\n   </code>\n   shares the same flush timing and debugging options with\n   <a href="#watcheffect">\n    <code>\n     watchEffect()\n    </code>\n   </a>\n   :\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">debugger</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrigger</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">debugger</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Stopping the watcher:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stop </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// when the watcher is no longer needed:</span></span>\n<span class="line"><span style="color:#82AAFF;">stop</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Side effect cleanup:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onCleanup</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cancel</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">doAsyncWork</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newId</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// `cancel` will be called if `id` changes, cancelling</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// the previous request if it hasn\'t completed yet</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">onCleanup</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cancel</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also\n   </strong>\n   :\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/watchers.html">\n     Guide - Watchers\n    </a>\n   </li>\n   <li>\n    <a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">\n     Guide - Watcher Debugging\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>',
  },
  {
    group: "Reactivity API: Utilities",
    type: ["Composition API"],
    name: "isRef()",
    body: '<p>\n Checks if a value is a ref object.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">r</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Note the return type is a\n   <a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates" rel="noreferrer" target="_blank">\n    type predicate\n   </a>\n   , which means\n   <code>\n    isRef\n   </code>\n   can be used as a type guard:\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span></span>\n<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#82AAFF;">isRef</span><span style="color:#A6ACCD;">(foo)) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// foo\'s type is narrowed to Ref&lt;unknown&gt;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Utilities",
    type: ["Composition API"],
    name: "unref()",
    body: '<p>\n Returns the inner value if the argument is a ref, otherwise return the argument itself. This is a sugar function for\n <code>\n  val = isRef(val) ? val.value : val\n </code>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useFoo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">unwrapped</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unref</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// unwrapped is guaranteed to be number now</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Utilities",
    type: ["Composition API"],
    name: "toRef()",
    body: '<p>\n Can be used to create a ref for a property on a source reactive object. The created ref is synced with its source property: mutating the source property will update the ref, and vice-versa.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">keyof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">defaultValue</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">K</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ToRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">K</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ToRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fooRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toRef</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// mutating the ref updates the original</span></span>\n<span class="line"><span style="color:#A6ACCD;">fooRef</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo) </span><span style="color:#676E95;">// 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// mutating the original also updates the ref</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fooRef</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// 3</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Note this is different from:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fooRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   The above ref is\n   <strong>\n    not\n   </strong>\n   synced with\n   <code>\n    state.foo\n   </code>\n   , because the\n   <code>\n    ref()\n   </code>\n   receives a plain number value.\n  </p>\n  <p>\n   <code>\n    toRef()\n   </code>\n   is useful when you want to pass the ref of a prop to a composable function:\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">toRef</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// convert `props.foo` into a ref, then pass into</span></span>\n<span class="line"><span style="color:#676E95;">// a composable</span></span>\n<span class="line"><span style="color:#82AAFF;">useSomeFeature</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">toRef</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">))</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When\n   <code>\n    toRef\n   </code>\n   is used with component props, the usual restrictions around mutating the props still apply. Attempting to assign a new value to the ref is equivalent to trying to modify the prop directly and is not allowed. In that scenario you may want to consider using\n   <a href="./reactivity-core.html#computed">\n    <code>\n     computed\n    </code>\n   </a>\n   with\n   <code>\n    get\n   </code>\n   and\n   <code>\n    set\n   </code>\n   instead. See the guide to\n   <a href="/guide/components/v-model.html">\n    using\n    <code>\n     v-model\n    </code>\n    with components\n   </a>\n   for more information.\n  </p>\n  <p>\n   <code>\n    toRef()\n   </code>\n   will return a usable ref even if the source property doesn\'t currently exist. This makes it possible to work with optional properties, which wouldn\'t be picked up by\n   <a href="#torefs">\n    <code>\n     toRefs\n    </code>\n   </a>\n   .\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Utilities",
    type: ["Composition API"],
    name: "toRefs()",
    body: '<p>\n Converts a reactive object to a plain object where each property of the resulting object is a ref pointing to the corresponding property of the original object. Each individual ref is created using\n <a href="#toref">\n  <code>\n   toRef()\n  </code>\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toRefs</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#FFCB6B;">K</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">keyof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ToRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">K</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ToRef</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stateAsRefs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toRefs</span><span style="color:#A6ACCD;">(state)</span></span>\n<span class="line"><span style="color:#676E95;">/*</span></span>\n<span class="line"><span style="color:#676E95;">Type of stateAsRefs: {</span></span>\n<span class="line"><span style="color:#676E95;">  foo: Ref&lt;number&gt;,</span></span>\n<span class="line"><span style="color:#676E95;">  bar: Ref&lt;number&gt;</span></span>\n<span class="line"><span style="color:#676E95;">}</span></span>\n<span class="line"><span style="color:#676E95;">*/</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// The ref and the original property is "linked"</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(stateAsRefs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value) </span><span style="color:#676E95;">// 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">stateAsRefs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo) </span><span style="color:#676E95;">// 3</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   <code>\n    toRefs\n   </code>\n   is useful when returning a reactive object from a composable function so that the consuming component can destructure/spread the returned object without losing reactivity:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useFeatureX</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    foo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">    bar</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...logic operating on state</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// convert to refs when returning</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toRefs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// can destructure without losing reactivity</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useFeatureX</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   <code>\n    toRefs\n   </code>\n   will only generate refs for properties that are enumerable on the source object at call time. To create a ref for a property that may not exist yet, use\n   <a href="#toref">\n    <code>\n     toRef\n    </code>\n   </a>\n   instead.\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Utilities",
    type: ["Composition API"],
    name: "isProxy()",
    body: '<p>\n Checks if an object is a proxy created by\n <a href="./reactivity-core.html#reactive">\n  <code>\n   reactive()\n  </code>\n </a>\n ,\n <a href="./reactivity-core.html#readonly">\n  <code>\n   readonly()\n  </code>\n </a>\n ,\n <a href="./reactivity-advanced.html#shallowreactive">\n  <code>\n   shallowReactive()\n  </code>\n </a>\n or\n <a href="./reactivity-advanced.html#shallowreadonly">\n  <code>\n   shallowReadonly()\n  </code>\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isProxy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Utilities",
    type: ["Composition API"],
    name: "isReactive()",
    body: '<p>\n Checks if an object is a proxy created by\n <a href="./reactivity-core.html#reactive">\n  <code>\n   reactive()\n  </code>\n </a>\n or\n <a href="./reactivity-advanced.html#shallowreactive">\n  <code>\n   shallowReactive()\n  </code>\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isReactive</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Utilities",
    type: ["Composition API"],
    name: "isReadonly()",
    body: '<p>\n Checks whether the passed value is a readonly object. The properties of a readonly object can change, but they can\'t be assigned directly via the passed object.\n</p>\n<p>\n The proxies created by\n <a href="./reactivity-core.html#readonly">\n  <code>\n   readonly()\n  </code>\n </a>\n and\n <a href="./reactivity-advanced.html#shallowreadonly">\n  <code>\n   shallowReadonly()\n  </code>\n </a>\n are both considered readonly, as is a\n <a href="./reactivity-core.html#computed">\n  <code>\n   computed()\n  </code>\n </a>\n ref without a\n <code>\n  set\n </code>\n function.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isReadonly</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "shallowRef()",
    body: '<p>\n Shallow version of\n <a href="./reactivity-core.html#ref">\n  <code>\n   ref()\n  </code>\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ShallowRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ShallowRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Unlike\n   <code>\n    ref()\n   </code>\n   , the inner value of a shallow ref is stored and exposed as-is, and will not be made deeply reactive. Only the\n   <code>\n    .value\n   </code>\n   access is reactive.\n  </p>\n  <p>\n   <code>\n    shallowRef()\n   </code>\n   is typically used for performance optimizations of large data structures, or integration with external state management systems.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// does NOT trigger change</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// does trigger change</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/best-practices/performance.html#reduce-reactivity-overhead-for-large-immutable-structures">\n     Guide - Reduce Reactivity Overhead for Large Immutable Structures\n    </a>\n   </li>\n   <li>\n    <a href="/guide/extras/reactivity-in-depth.html#integration-with-external-state-systems">\n     Guide - Integration with External State Systems\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "triggerRef()",
    body: '<p>\n Force trigger effects that depends on a\n <a href="#shallowref">\n  shallow ref\n </a>\n . This is typically used after making deep mutations to the inner value of a shallow ref.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">triggerRef</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ShallowRef</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> shallow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">greet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Hello, world</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// Logs "Hello, world" once for the first run-through</span></span>\n<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">shallow</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">greet</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// This won\'t trigger the effect because the ref is shallow</span></span>\n<span class="line"><span style="color:#A6ACCD;">shallow</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">greet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Hello, universe</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// Logs "Hello, universe"</span></span>\n<span class="line"><span style="color:#82AAFF;">triggerRef</span><span style="color:#A6ACCD;">(shallow)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "customRef()",
    body: '<p>\n Creates a customized ref with explicit control over its dependency tracking and updates triggering.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">customRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">factory</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomRefFactory</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomRefFactory</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">track</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">trigger</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    customRef()\n   </code>\n   expects a factory function, which receives\n   <code>\n    track\n   </code>\n   and\n   <code>\n    trigger\n   </code>\n   functions as arguments and should return an object with\n   <code>\n    get\n   </code>\n   and\n   <code>\n    set\n   </code>\n   methods.\n  </p>\n  <p>\n   In general,\n   <code>\n    track()\n   </code>\n   should be called inside\n   <code>\n    get()\n   </code>\n   , and\n   <code>\n    trigger()\n   </code>\n   should be called inside\n   <code>\n    set()\n   </code>\n   . However, you have full control over when they should be called, or whether they should be called at all.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Creating a debounced ref that only updates the value after a certain timeout after the latest set call:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">customRef</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useDebouncedRef</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">delay</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timeout</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">customRef</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">track</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">trigger</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      get</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">track</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#F07178;">      set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newValue</span></span>\n<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">trigger</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">delay</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Usage in component:\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useDebouncedRef</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./debouncedRef</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useDebouncedRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   <a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHVzZURlYm91bmNlZFJlZiB9IGZyb20gJy4vZGVib3VuY2VkUmVmLmpzJ1xuY29uc3QgdGV4dCA9IHVzZURlYm91bmNlZFJlZignaGVsbG8nLCAxMDAwKVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPHA+XG4gICAgVGhpcyB0ZXh0IG9ubHkgdXBkYXRlcyAxIHNlY29uZCBhZnRlciB5b3UndmUgc3RvcHBlZCB0eXBpbmc6XG4gIDwvcD5cbiAgPHA+e3sgdGV4dCB9fTwvcD5cbiAgPGlucHV0IHYtbW9kZWw9XCJ0ZXh0XCIgLz5cbjwvdGVtcGxhdGU+IiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3Z1ZS5ydW50aW1lLmVzbS1icm93c2VyLmpzXCJcbiAgfVxufSIsImRlYm91bmNlZFJlZi5qcyI6ImltcG9ydCB7IGN1c3RvbVJlZiB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURlYm91bmNlZFJlZih2YWx1ZSwgZGVsYXkgPSAyMDApIHtcbiAgbGV0IHRpbWVvdXRcbiAgcmV0dXJuIGN1c3RvbVJlZigodHJhY2ssIHRyaWdnZXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0KCkge1xuICAgICAgICB0cmFjaygpXG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgfSxcbiAgICAgIHNldChuZXdWYWx1ZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWVcbiAgICAgICAgICB0cmlnZ2VyKClcbiAgICAgICAgfSwgZGVsYXkpXG4gICAgICB9XG4gICAgfVxuICB9KVxufSJ9" rel="noreferrer" target="_blank">\n    Try it in the Playground\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "shallowReactive()",
    body: '<p>\n Shallow version of\n <a href="./reactivity-core.html#reactive">\n  <code>\n   reactive()\n  </code>\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowReactive</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Unlike\n   <code>\n    reactive()\n   </code>\n   , there is no deep conversion: only root-level properties are reactive for a shallow reactive object. Property values are stored and exposed as-is - this also means properties with ref values will\n   <strong>\n    not\n   </strong>\n   be automatically unwrapped.\n  </p>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    Use with Caution\n   </p>\n   <p>\n    Shallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug.\n   </p>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowReactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">nested</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// mutating state\'s own properties is reactive</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// ...but does not convert nested objects</span></span>\n<span class="line"><span style="color:#82AAFF;">isReactive</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nested) </span><span style="color:#676E95;">// false</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// NOT reactive</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nested</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "shallowReadonly()",
    body: '<p>\n Shallow version of\n <a href="./reactivity-core.html#readonly">\n  <code>\n   readonly()\n  </code>\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowReadonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Unlike\n   <code>\n    readonly()\n   </code>\n   , there is no deep conversion: only root-level properties are made readonly. Property values are stored and exposed as-is - this also means properties with ref values will\n   <strong>\n    not\n   </strong>\n   be automatically unwrapped.\n  </p>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    Use with Caution\n   </p>\n   <p>\n    Shallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug.\n   </p>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowReadonly</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">nested</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// mutating state\'s own properties will fail</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// ...but works on nested objects</span></span>\n<span class="line"><span style="color:#82AAFF;">isReadonly</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nested) </span><span style="color:#676E95;">// false</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// works</span></span>\n<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nested</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "toRaw()",
    body: '<p>\n Returns the raw, original object of a Vue-created proxy.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toRaw</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    toRaw()\n   </code>\n   can return the original object from proxies created by\n   <a href="./reactivity-core.html#reactive">\n    <code>\n     reactive()\n    </code>\n   </a>\n   ,\n   <a href="./reactivity-core.html#readonly">\n    <code>\n     readonly()\n    </code>\n   </a>\n   ,\n   <a href="#shallowreactive">\n    <code>\n     shallowReactive()\n    </code>\n   </a>\n   or\n   <a href="#shallowreadonly">\n    <code>\n     shallowReadonly()\n    </code>\n   </a>\n   .\n  </p>\n  <p>\n   This is an escape hatch that can be used to temporarily read without incurring proxy access / tracking overhead or write without triggering changes. It is\n   <strong>\n    not\n   </strong>\n   recommended to hold a persistent reference to the original object. Use with caution.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reactiveFoo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(foo)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">toRaw</span><span style="color:#A6ACCD;">(reactiveFoo) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> foo) </span><span style="color:#676E95;">// true</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "markRaw()",
    body: '<p>\n Marks an object so that it will never be converted to a proxy. Returns the object itself.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">markRaw</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">markRaw</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">isReactive</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(foo))) </span><span style="color:#676E95;">// false</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// also works when nested inside other reactive objects</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">isReactive</span><span style="color:#A6ACCD;">(bar</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo)) </span><span style="color:#676E95;">// false</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    Use with Caution\n   </p>\n   <p>\n    <code>\n     markRaw()\n    </code>\n    and shallow APIs such as\n    <code>\n     shallowReactive()\n    </code>\n    allow you to selectively opt-out of the default deep reactive/readonly conversion and embed raw, non-proxied objects in your state graph. They can be used for various reasons:\n   </p>\n   <ul>\n    <li>\n     <p>\n      Some values simply should not be made reactive, for example a complex 3rd party class instance, or a Vue component object.\n     </p>\n    </li>\n    <li>\n     <p>\n      Skipping proxy conversion can provide performance improvements when rendering large lists with immutable data sources.\n     </p>\n    </li>\n   </ul>\n   <p>\n    They are considered advanced because the raw opt-out is only at the root level, so if you set a nested, non-marked raw object into a reactive object and then access it again, you get the proxied version back. This can lead to\n    <strong>\n     identity hazards\n    </strong>\n    - i.e. performing an operation that relies on object identity but using both the raw and the proxied version of the same object:\n   </p>\n   <div class="language-js">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     js\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">markRaw</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">nested</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// although `foo` is marked as raw, foo.nested is not.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">nested</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nested</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nested </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> bar</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nested) </span><span style="color:#676E95;">// false</span></span>\n<span class="line"></span></code></pre>\n   </div>\n   <p>\n    Identity hazards are in general rare. However, to properly utilize these APIs while safely avoiding identity hazards requires a solid understanding of how the reactivity system works.\n   </p>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "effectScope()",
    body: '<p>\n Creates an effect scope object which can capture the reactive effects (i.e. computed and watchers) created within it so that these effects can be disposed together. For detailed use cases of this API, please consult its corresponding\n <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0041-reactivity-effect-scope.md" rel="noreferrer" target="_blank">\n  RFC\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">effectScope</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">detached</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EffectScope</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EffectScope</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// undefined if scope is inactive</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">stop</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> scope </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">effectScope</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">doubled</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">watch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">doubled</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">doubled</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Count: </span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">doubled</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">))</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// to dispose all effects in the scope</span></span>\n<span class="line"><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stop</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "getCurrentScope()",
    body: '<p>\n Returns the current active\n <a href="#effectscope">\n  effect scope\n </a>\n if there is one.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getCurrentScope</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EffectScope</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Reactivity API: Advanced",
    type: ["Composition API"],
    name: "onScopeDispose()",
    body: '<p>\n Registers a dispose callback on the current active\n <a href="#effectscope">\n  effect scope\n </a>\n . The callback will be invoked when the associated effect scope is stopped.\n</p>\n<p>\n This method can be used as a non-component-coupled replacement of\n <code>\n  onUnmounted\n </code>\n in reusable composition functions, since each Vue component\'s\n <code>\n  setup()\n </code>\n function is also invoked in an effect scope.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onScopeDispose</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onMounted()",
    body: '<p>\n Registers a callback to be called after the component has been mounted.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMounted</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   A component is considered mounted after:\n  </p>\n  <ul>\n   <li>\n    <p>\n     All of its synchronous child components have been mounted (does not include async components or components inside\n     <code>\n      &lt;Suspense&gt;\n     </code>\n     trees).\n    </p>\n   </li>\n   <li>\n    <p>\n     Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component\'s DOM tree is in-document if the application\'s root container is also in-document.\n    </p>\n   </li>\n  </ul>\n  <p>\n   This hook is typically used for performing side effects that need access to the component\'s rendered DOM, or for limiting DOM-related code to the client in a\n   <a href="/guide/scaling-up/ssr.html">\n    server-rendered application\n   </a>\n   .\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Accessing an element via template ref:\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onMounted</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> el </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">onMounted</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// &lt;div&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">el</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onUpdated()",
    body: '<p>\n Registers a callback to be called after the component has updated its DOM tree due to a reactive state change.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onUpdated</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   A parent component\'s updated hook is called after that of its child components.\n  </p>\n  <p>\n   This hook is called after any DOM update of the component, which can be caused by different state changes. If you need to access the updated DOM after a specific state change, use\n   <a href="/api/general.html#nexttick">\n    nextTick()\n   </a>\n   instead.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    WARNING\n   </p>\n   <p>\n    Do not mutate component state in the updated hook - this will likely lead to an infinite update loop!\n   </p>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Accessing updated DOM:\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onUpdated</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">onUpdated</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// text content should be the same as current `count.value`</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#F78C6C;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onUnmounted()",
    body: '<p>\n Registers a callback to be called after the component has been unmounted.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onUnmounted</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   A component is considered unmounted after:\n  </p>\n  <ul>\n   <li>\n    <p>\n     All of its child components have been unmounted.\n    </p>\n   </li>\n   <li>\n    <p>\n     All of its associated reactive effects (render effect and computed / watchers created during\n     <code>\n      setup()\n     </code>\n     ) have been stopped.\n    </p>\n   </li>\n  </ul>\n  <p>\n   Use this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onMounted</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onUnmounted</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> intervalId</span></span>\n<span class="line"><span style="color:#82AAFF;">onMounted</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">intervalId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">onUnmounted</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#A6ACCD;">(intervalId))</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onBeforeMount()",
    body: '<p>\n Registers a hook to be called right before the component is to be mounted.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onBeforeMount</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   When this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onBeforeUpdate()",
    body: '<p>\n Registers a hook to be called right before the component is about to update its DOM tree due to a reactive state change.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onBeforeUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   This hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onBeforeUnmount()",
    body: '<p>\n Registers a hook to be called right before a component instance is to be unmounted.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onBeforeUnmount</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   When this hook is called, the component instance is still fully functional.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onErrorCaptured()",
    body: '<p>\n Registers a hook to be called when an error propagating from a descendant component has been captured.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onErrorCaptured</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ErrorCapturedHook</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ErrorCapturedHook</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Errors can be captured from the following sources:\n  </p>\n  <ul>\n   <li>\n    Component renders\n   </li>\n   <li>\n    Event handlers\n   </li>\n   <li>\n    Lifecycle hooks\n   </li>\n   <li>\n    <code>\n     setup()\n    </code>\n    function\n   </li>\n   <li>\n    Watchers\n   </li>\n   <li>\n    Custom directive hooks\n   </li>\n   <li>\n    Transition hooks\n   </li>\n  </ul>\n  <p>\n   The hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n  </p>\n  <p>\n   You can modify component state in\n   <code>\n    errorCaptured()\n   </code>\n   to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.\n  </p>\n  <p>\n   The hook can return\n   <code>\n    false\n   </code>\n   to stop the error from propagating further. See error propagation details below.\n  </p>\n  <p>\n   <strong>\n    Error Propagation Rules\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <p>\n     By default, all errors are still sent to the application-level\n     <a href="/api/application.html#app-config-errorhandler">\n      <code>\n       app.config.errorHandler\n      </code>\n     </a>\n     if it is defined, so that these errors can still be reported to an analytics service in a single place.\n    </p>\n   </li>\n   <li>\n    <p>\n     If multiple\n     <code>\n      errorCaptured\n     </code>\n     hooks exist on a component\'s inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.\n    </p>\n   </li>\n   <li>\n    <p>\n     If the\n     <code>\n      errorCaptured\n     </code>\n     hook itself throws an error, both this error and the original captured error are sent to\n     <code>\n      app.config.errorHandler\n     </code>\n     .\n    </p>\n   </li>\n   <li>\n    <p>\n     An\n     <code>\n      errorCaptured\n     </code>\n     hook can return\n     <code>\n      false\n     </code>\n     to prevent the error from propagating further. This is essentially saying "this error has been handled and should be ignored." It will prevent any additional\n     <code>\n      errorCaptured\n     </code>\n     hooks or\n     <code>\n      app.config.errorHandler\n     </code>\n     from being invoked for this error.\n    </p>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onRenderTracked()",
    body: '<p>\n Registers a debug hook to be called when a reactive dependency has been tracked by the component\'s render effect.\n</p>\n<p>\n <strong>\n  This hook is development-mode-only and not called during server-side rendering.\n </strong>\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onRenderTracked</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerHook</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerHook</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">effect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactiveEffect</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TrackOpTypes</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* \'get\' | \'has\' | \'iterate\' */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/reactivity-in-depth.html">\n    Reactivity in Depth\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onRenderTriggered()",
    body: '<p>\n Registers a debug hook to be called when a reactive dependency triggers the component\'s render effect to be re-run.\n</p>\n<p>\n <strong>\n  This hook is development-mode-only and not called during server-side rendering.\n </strong>\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onRenderTriggered</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerHook</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerHook</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">effect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactiveEffect</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TriggerOpTypes</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* \'set\' | \'add\' | \'delete\' | \'clear\' */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">newValue</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">oldValue</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">oldTarget</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/reactivity-in-depth.html">\n    Reactivity in Depth\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onActivated()",
    body: '<p>\n Registers a callback to be called after the component instance is inserted into the DOM as part of a tree cached by\n <a href="/api/built-in-components.html#keepalive">\n  <code>\n   &lt;KeepAlive&gt;\n  </code>\n </a>\n .\n</p>\n<p>\n <strong>\n  This hook is not called during server-side rendering.\n </strong>\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onActivated</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/keep-alive.html#lifecycle-of-cached-instance">\n    Guide - Lifecycle of Cached Instance\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onDeactivated()",
    body: '<p>\n Registers a callback to be called after the component instance is removed from the DOM as part of a tree cached by\n <a href="/api/built-in-components.html#keepalive">\n  <code>\n   &lt;KeepAlive&gt;\n  </code>\n </a>\n .\n</p>\n<p>\n <strong>\n  This hook is not called during server-side rendering.\n </strong>\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onDeactivated</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/keep-alive.html#lifecycle-of-cached-instance">\n    Guide - Lifecycle of Cached Instance\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Lifecycle Hooks",
    type: ["Composition API"],
    name: "onServerPrefetch()",
    body: '<p>\n Registers an async function to be resolved before the component instance is to be rendered on the server.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onServerPrefetch</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   If the callback returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.\n  </p>\n  <p>\n   This hook is only called during server-side rendering can be used to perform server-only data fetching.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onServerPrefetch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onMounted</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">onServerPrefetch</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// component is rendered as part of the initial request</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// pre-fetch data on server as it is faster than on the client</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetchOnServer</span><span style="color:#F07178;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">onMounted</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// if data is null on mount, it means the component</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// is dynamically rendered on the client. Perform a</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// client-side fetch instead.</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetchOnClient</span><span style="color:#F07178;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/scaling-up/ssr.html">\n    Server-Side Rendering\n   </a>\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Composition API: Dependency Injection",
    type: ["Composition API"],
    name: "provide()",
    body: '<p>\n Provides a value that can be injected by descendant components.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">provide</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InjectionKey</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    provide()\n   </code>\n   takes two arguments: the key, which can be a string or a symbol, and the value to be injected.\n  </p>\n  <p>\n   When using TypeScript, the key can be a symbol casted as\n   <code>\n    InjectionKey\n   </code>\n   - a Vue provided utility type that extends\n   <code>\n    Symbol\n   </code>\n   , which can be used to sync the value type between\n   <code>\n    provide()\n   </code>\n   and\n   <code>\n    inject()\n   </code>\n   .\n  </p>\n  <p>\n   Similar to lifecycle hook registration APIs,\n   <code>\n    provide()\n   </code>\n   must be called synchronously during a component\'s\n   <code>\n    setup()\n   </code>\n   phase.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">provide</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fooSymbol</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./injectionSymbols</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// provide static value</span></span>\n<span class="line"><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// provide reactive value</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// provide with Symbol keys</span></span>\n<span class="line"><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(fooSymbol</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also\n   </strong>\n   :\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/components/provide-inject.html">\n     Guide - Provide / Inject\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/composition-api.html#typing-provide-inject">\n     Guide - Typing Provide / Inject\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Composition API: Dependency Injection",
    type: ["Composition API"],
    name: "inject()",
    body: '<p>\n Injects a value provided by an ancestor component or the application (via\n <code>\n  app.provide()\n </code>\n ).\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// without default value</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InjectionKey</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// with default value</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InjectionKey</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">defaultValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// with factory</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InjectionKey</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">defaultValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">treatDefaultAsFactory</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">true</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The first argument is the injection key. Vue will walk up the parent chain to locate a provided value with a matching key. If multiple components in the parent chain provides the same key, the one closest to the injecting component will "shadow" those higher up the chain. If no value with matching key was found,\n   <code>\n    inject()\n   </code>\n   returns\n   <code>\n    undefined\n   </code>\n   unless a default value is provided.\n  </p>\n  <p>\n   The second argument is optional and is the default value to be used when no matching value was found. It can also be a factory function to return values that are expensive to create. If the default value is a function, then\n   <code>\n    false\n   </code>\n   must be passed as the third argument to indicate that the function should be used as the value instead of the factory.\n  </p>\n  <p>\n   Similar to lifecycle hook registration APIs,\n   <code>\n    inject()\n   </code>\n   must be called synchronously during a component\'s\n   <code>\n    setup()\n   </code>\n   phase.\n  </p>\n  <p>\n   When using TypeScript, the key can be of type of\n   <code>\n    InjectionKey\n   </code>\n   - a Vue-provided utility type that extends\n   <code>\n    Symbol\n   </code>\n   , which can be used to sync the value type between\n   <code>\n    provide()\n   </code>\n   and\n   <code>\n    inject()\n   </code>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Assuming a parent component has provided values as shown in the previous\n   <code>\n    provide()\n   </code>\n   example:\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">inject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fooSymbol</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./injectionSymbols</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// inject static value with default</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// inject reactive value</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// inject with Symbol keys</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;">(fooSymbol)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// inject with default value</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">default value</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// inject with default value factory</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> baz </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">())</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// inject with function default value, by passing the 3rd argument</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also\n   </strong>\n   :\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/components/provide-inject.html">\n     Guide - Provide / Inject\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/composition-api.html#typing-provide-inject">\n     Guide - Typing Provide / Inject\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>',
  },
  {
    group: "Options: State",
    type: ["Options API"],
    name: "data",
    body: '<p>\n A function that returns the initial reactive state for the component instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">?(</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The function is expected to return a plain JavaScript object, which will be made reactive by Vue. After the instance is created, the reactive data object can be accessed as\n   <code>\n    this.$data\n   </code>\n   . The component instance also proxies all the properties found on the data object, so\n   <code>\n    this.a\n   </code>\n   will be equivalent to\n   <code>\n    this.$data.a\n   </code>\n   .\n  </p>\n  <p>\n   All top-level data properties must be included in the returned data object. Adding new properties to\n   <code>\n    this.$data\n   </code>\n   is possible, but it is\n   <strong>\n    not\n   </strong>\n   recommended. If the desired value of a property is not yet available then an empty value such as\n   <code>\n    undefined\n   </code>\n   or\n   <code>\n    null\n   </code>\n   should be included as a placeholder to ensure that Vue knows that the property exists.\n  </p>\n  <p>\n   Properties that start with\n   <code>\n    _\n   </code>\n   or\n   <code>\n    $\n   </code>\n   will\n   <strong>\n    not\n   </strong>\n   be proxied on the component instance because they may conflict with Vue\'s internal properties and API methods. You will have to access them as\n   <code>\n    this.$data._property\n   </code>\n   .\n  </p>\n  <p>\n   It is\n   <strong>\n    not\n   </strong>\n   recommended to return objects with their own stateful behavior like browser API objects and prototype properties. The returned object should ideally be a plain object that only represents the state of the component.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// 1</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$data</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// { a: 1 }</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Note that if you use an arrow function with the\n   <code>\n    data\n   </code>\n   property,\n   <code>\n    this\n   </code>\n   won\'t be the component\'s instance, but you can still access the instance as the function\'s first argument:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myProp </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/reactivity-in-depth.html">\n    Reactivity in Depth\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: State",
    type: ["Options API"],
    name: "props",
    body: '<p>\n Declare the props of a component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayPropsOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectPropsOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayPropsOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectPropsOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Prop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Prop</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rawProps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">validator</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <blockquote>\n   <p>\n    Types are simplified for readability.\n   </p>\n  </blockquote>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   In Vue, all component props need to be explicitly declared. Component props can be declared in two forms:\n  </p>\n  <ul>\n   <li>\n    Simple form using an array of strings\n   </li>\n   <li>\n    Full form using an object where each property key is the name of the prop, and the value is the prop\'s type (a constructor function) or advanced options.\n   </li>\n  </ul>\n  <p>\n   With object-based syntax, each prop can further define the following options:\n  </p>\n  <ul>\n   <li>\n    <p>\n     <strong>\n      <code>\n       type\n      </code>\n     </strong>\n     : Can be one of the following native constructors:\n     <code>\n      String\n     </code>\n     ,\n     <code>\n      Number\n     </code>\n     ,\n     <code>\n      Boolean\n     </code>\n     ,\n     <code>\n      Array\n     </code>\n     ,\n     <code>\n      Object\n     </code>\n     ,\n     <code>\n      Date\n     </code>\n     ,\n     <code>\n      Function\n     </code>\n     ,\n     <code>\n      Symbol\n     </code>\n     , any custom constructor function or an array of those. In development mode, Vue will check if a prop\'s value matches the declared type, and will throw a warning if it doesn\'t. See\n     <a href="/guide/components/props.html#prop-validation">\n      Prop Validation\n     </a>\n     for more details.\n    </p>\n    <p>\n     Also note that a prop with\n     <code>\n      Boolean\n     </code>\n     type affects its value casting behavior in both development and production. See\n     <a href="/guide/components/props.html#boolean-casting">\n      Boolean Casting\n     </a>\n     for more details.\n    </p>\n   </li>\n   <li>\n    <p>\n     <strong>\n      <code>\n       default\n      </code>\n     </strong>\n     : Specifies a default value for the prop when it is not passed by the parent or has\n     <code>\n      undefined\n     </code>\n     value. Object or array defaults must be returned using a factory function. The factory function also receives the raw props object as the argument.\n    </p>\n   </li>\n   <li>\n    <p>\n     <strong>\n      <code>\n       required\n      </code>\n     </strong>\n     : Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed.\n    </p>\n   </li>\n   <li>\n    <p>\n     <strong>\n      <code>\n       validator\n      </code>\n     </strong>\n     : Custom validator function that takes the prop value as the sole argument. In development mode, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails).\n    </p>\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Simple declaration:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">size</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">myMessage</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Object declaration with validations:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// type check</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// type check plus other validations</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">validator</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/components/props.html">\n     Guide - Props\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/options-api.html#typing-component-props">\n     Guide - Typing Component Props\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Options: State",
    type: ["Options API"],
    name: "computed",
    body: '<p>\n Declare computed properties to be exposed on the component instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComputedGetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WritableComputedOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComputedGetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span></span>\n<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComputedSetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>\n<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WritableComputedOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComputedGetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComputedSetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The option accepts an object where the key is the name of the computed property, and the value is either a computed getter, or an object with\n   <code>\n    get\n   </code>\n   and\n   <code>\n    set\n   </code>\n   methods (for writable computed properties).\n  </p>\n  <p>\n   All getters and setters have their\n   <code>\n    this\n   </code>\n   context automatically bound to the component instance.\n  </p>\n  <p>\n   Note that if you use an arrow function with a computed property,\n   <code>\n    this\n   </code>\n   won\'t point to the component\'s instance, but you can still access the instance as the function\'s first argument:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">aDouble</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// readonly</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">aDouble</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// writable</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">aPlus</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">aDouble</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// =&gt; 2</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">aPlus</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// =&gt; 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">aPlus</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// =&gt; 2</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">aDouble</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// =&gt; 4</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/computed.html">\n     Guide - Computed Properties\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/options-api.html#typing-computed-properties">\n     Guide - Typing Computed Properties\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Options: State",
    type: ["Options API"],
    name: "methods",
    body: '<p>\n Declare methods to be mixed into the component instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Declared methods can be directly accessed on the component instance, or used in template expressions. All methods have their\n   <code>\n    this\n   </code>\n   context automatically bound to the component instance, even when passed around.\n  </p>\n  <p>\n   Avoid using arrow functions when declaring methods, as they will not have access to the component instance via\n   <code>\n    this\n   </code>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">plus</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">plus</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// =&gt; 2</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/event-handling.html">\n    Event Handling\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: State",
    type: ["Options API"],
    name: "watch",
    body: '<p>\n Declare watch callbacks to be invoked on data change.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptionItem</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptionItem</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptionItem</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectWatchOptionItem</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cleanupFn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectWatchOptionItem</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">pre</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: \'pre\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrack</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrigger</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <blockquote>\n   <p>\n    Types are simplified for readability.\n   </p>\n  </blockquote>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The\n   <code>\n    watch\n   </code>\n   option expects an object where keys are the reactive component instance properties to watch (e.g. properties declared via\n   <code>\n    data\n   </code>\n   or\n   <code>\n    computed\n   </code>\n   ) \u2014 and values are the corresponding callbacks. The callback receives the new value and the old value of the watched source.\n  </p>\n  <p>\n   In addition to a root-level property, the key can also be a simple dot-delimited path, e.g.\n   <code>\n    a.b.c\n   </code>\n   . Note that this usage does\n   <strong>\n    not\n   </strong>\n   support complex expressions - only dot-delimited paths are supported. If you need to watch complex data sources, use the imperative\n   <a href="/api/component-instance.html#watch">\n    <code>\n     $watch()\n    </code>\n   </a>\n   API instead.\n  </p>\n  <p>\n   The value can also be a string of a method name (declared via\n   <code>\n    methods\n   </code>\n   ), or an object that contains additional options. When using the object syntax, the callback should be declared under the\n   <code>\n    handler\n   </code>\n   field. Additional options include:\n  </p>\n  <ul>\n   <li>\n    <strong>\n     <code>\n      immediate\n     </code>\n    </strong>\n    : trigger the callback immediately on watcher creation. Old value will be\n    <code>\n     undefined\n    </code>\n    on the first call.\n   </li>\n   <li>\n    <strong>\n     <code>\n      deep\n     </code>\n    </strong>\n    : force deep traversal of the source if it is an object or an array, so that the callback fires on deep mutations. See\n    <a href="/guide/essentials/watchers.html#deep-watchers">\n     Deep Watchers\n    </a>\n    .\n   </li>\n   <li>\n    <strong>\n     <code>\n      flush\n     </code>\n    </strong>\n    : adjust the callback\'s flush timing. See\n    <a href="/guide/essentials/watchers.html#callback-flush-timing">\n     Callback Flush Timing\n    </a>\n    and\n    <a href="/api/reactivity-core.html#watcheffect">\n     <code>\n      watchEffect()\n     </code>\n    </a>\n    .\n   </li>\n   <li>\n    <strong>\n     <code>\n      onTrack / onTrigger\n     </code>\n    </strong>\n    : debug the watcher\'s dependencies. See\n    <a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">\n     Watcher Debugging\n    </a>\n    .\n   </li>\n  </ul>\n  <p>\n   Avoid using arrow functions when declaring watch callbacks as they will not have access to the component instance via\n   <code>\n    this\n   </code>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      b</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      c</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        d</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#F07178;">      e</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      f</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// watching top-level property</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">new: </span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">, old: </span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">}`</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// string method name</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">someMethod</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// the callback will be called whenever any of the watched object properties change regardless of their nested depth</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">c changed</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// watching a single nested property:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">c.d</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// do something</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// the callback will be called immediately after the start of the observation</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">e changed</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// you can pass array of callbacks, they will be called one-by-one</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">f</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">handle1</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handle2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">handle2 triggered</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">handler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handle3</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">handle3 triggered</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    ]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">someMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">b changed</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">handle1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">handle 1 triggered</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// =&gt; new: 3, old: 1</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/watchers.html">\n    Watchers\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: State",
    type: ["Options API"],
    name: "emits",
    body: '<p>\n Declare the custom events emitted by the component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">emits</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayEmitsOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectEmitsOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayEmitsOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectEmitsOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EmitValidator</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EmitValidator</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Emitted events can be declared in two forms:\n  </p>\n  <ul>\n   <li>\n    Simple form using an array of strings\n   </li>\n   <li>\n    Full form using an object where each property key is the name of the event, and the value is either\n    <code>\n     null\n    </code>\n    or a validator function.\n   </li>\n  </ul>\n  <p>\n   The validation function will receive the additional arguments passed to the component\'s\n   <code>\n    $emit\n   </code>\n   call. For example, if\n   <code>\n    this.$emit(\'foo\', 1)\n   </code>\n   is called, the corresponding validator for\n   <code>\n    foo\n   </code>\n   will receive the argument\n   <code>\n    1\n   </code>\n   . The validator function should return a boolean to indicate whether the event arguments are valid.\n  </p>\n  <p>\n   Note that the\n   <code>\n    emits\n   </code>\n   option affects which event listeners are considered component event listeners, rather than native DOM event listeners. The listeners for declared events will be removed from the component\'s\n   <code>\n    $attrs\n   </code>\n   object, so they will not be passed through to the component\'s root element. See\n   <a href="/guide/components/attrs.html">\n    Fallthrough Attributes\n   </a>\n   for more details.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Array syntax:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">emits</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">check</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">check</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Object syntax:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">emits</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// no validation</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">click</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// with validation</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">submit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">email</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">password</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">Invalid submit event payload!</span><span style="color:#89DDFF;">`</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/components/attrs.html">\n     Guide - Fallthrough Attributes\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/options-api.html#typing-component-emits">\n     Guide - Typing Component Emits\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Options: State",
    type: ["Options API"],
    name: "expose",
    body: '<p>\n Declare exposed public properties when the component instance is accessed by a parent via template refs.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">expose</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   By default, a component instance exposes all instance properties to the parent when accessed via\n   <code>\n    $parent\n   </code>\n   ,\n   <code>\n    $root\n   </code>\n   , or template refs. This can be undesirable, since a component most likely has internal state or methods that should be kept private to avoid tight coupling.\n  </p>\n  <p>\n   The\n   <code>\n    expose\n   </code>\n   option expects a list of property name strings. When\n   <code>\n    expose\n   </code>\n   is used, only the properties explicitly listed will be exposed on the component\'s public instance.\n  </p>\n  <p>\n   <code>\n    expose\n   </code>\n   only affects user-defined properties - it does not filter out built-in component instance properties.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// only `publicMethod` will be available on the public instance</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">expose</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">publicMethod</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">publicMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">privateMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>',
  },
  {
    group: "Options: Rendering",
    type: ["Options API"],
    name: "template",
    body: '<p>\n A string template for the component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   A template provided via the\n   <code>\n    template\n   </code>\n   option will be compiled on-the-fly at runtime. It is only supported when using a build of Vue that includes the template compiler. The template compiler is\n   <strong>\n    NOT\n   </strong>\n   included in Vue builds that have the word\n   <code>\n    runtime\n   </code>\n   in their names, e.g.\n   <code>\n    vue.runtime.esm-bundler.js\n   </code>\n   . Consult the\n   <a href="https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use" rel="noreferrer" target="_blank">\n    dist file guide\n   </a>\n   for more details about the different builds.\n  </p>\n  <p>\n   If the string starts with\n   <code>\n    #\n   </code>\n   it will be used as a\n   <code>\n    querySelector\n   </code>\n   and use the selected element\'s\n   <code>\n    innerHTML\n   </code>\n   as the template string. This allows the source template to be authored using native\n   <code>\n    &lt;template&gt;\n   </code>\n   elements.\n  </p>\n  <p>\n   If the\n   <code>\n    render\n   </code>\n   option is also present in the same component,\n   <code>\n    template\n   </code>\n   will be ignored.\n  </p>\n  <p>\n   If the root component of your application doesn\'t have a\n   <code>\n    template\n   </code>\n   or\n   <code>\n    render\n   </code>\n   option specified, Vue will try to use the\n   <code>\n    innerHTML\n   </code>\n   of the mounted element as the template instead.\n  </p>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    Security Note\n   </p>\n   <p>\n    Only use template sources that you can trust. Do not use user-provided content as your template. See\n    <a href="/guide/best-practices/security.html#rule-no-1-never-use-non-trusted-templates">\n     Security Guide\n    </a>\n    for more details.\n   </p>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Rendering",
    type: ["Options API"],
    name: "render",
    body: '<p>\n A function that programmatically returns the virtual DOM tree of the component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChild</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChild</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeArrayChildren</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeArrayChildren</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">VNodeArrayChildren</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#A6ACCD;">)[]</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details:\n   </strong>\n  </p>\n  <p>\n   <code>\n    render\n   </code>\n   is an alternative to string templates that allows you to leverage the full programmatic power of JavaScript to declare the render output of the component.\n  </p>\n  <p>\n   Pre-compiled templates, for example those in Single-File Components, are compiled into the\n   <code>\n    render\n   </code>\n   option at build time. If both\n   <code>\n    render\n   </code>\n   and\n   <code>\n    template\n   </code>\n   are present in a component,\n   <code>\n    render\n   </code>\n   will take higher priority.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/extras/rendering-mechanism.html">\n     Rendering Mechanism\n    </a>\n   </li>\n   <li>\n    <a href="/guide/extras/render-function.html">\n     Render Functions\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Rendering",
    type: ["Options API"],
    name: "compilerOptions",
    body: '<p>\n Configure runtime compiler options for the component\'s template.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">compilerOptions</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">isCustomElement</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">whitespace</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">condense</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">preserve</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: \'condense\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">delimiters</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;">// default: [\'{{\', \'}}\']</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">comments</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   This config option is only respected when using the full build (i.e. the standalone\n   <code>\n    vue.js\n   </code>\n   that can compile templates in the browser). It supports the same options as the app-level\n   <a href="/api/application.html#app-config-compileroptions">\n    app.config.compilerOptions\n   </a>\n   , and has higher priority for the current component.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/api/application.html#app-config-compileroptions">\n    app.config.compilerOptions\n   </a>\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "beforeCreate",
    body: '<p>\n Called when the instance is initialized.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeCreate</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Called immediately when the instance is initialized, after props resolution, before processing other options such as\n   <code>\n    data()\n   </code>\n   or\n   <code>\n    computed\n   </code>\n   .\n  </p>\n  <p>\n   Note that the\n   <code>\n    setup()\n   </code>\n   hook of Composition API is called before any Options API hooks, even\n   <code>\n    beforeCreate()\n   </code>\n   .\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "created",
    body: '<p>\n Called after the instance has finished processing all state-related options.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   When this hooks is called, the following have been set up: reactive data, computed properties, methods, and watchers. However, the mounting phase has not been started, and the\n   <code>\n    $el\n   </code>\n   property will not be available yet.\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "beforeMount",
    body: '<p>\n Called right before the component is to be mounted.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeMount</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   When this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "mounted",
    body: '<p>\n Called after the component has been mounted.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   A component is considered mounted after:\n  </p>\n  <ul>\n   <li>\n    <p>\n     All of its synchronous child components have been mounted (does not include async components or components inside\n     <code>\n      &lt;Suspense&gt;\n     </code>\n     trees).\n    </p>\n   </li>\n   <li>\n    <p>\n     Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component\'s DOM tree is in-document if the application\'s root container is also in-document.\n    </p>\n   </li>\n  </ul>\n  <p>\n   This hook is typically used for performing side effects that need access to the component\'s rendered DOM, or for limiting DOM-related code to the client in a\n   <a href="/guide/scaling-up/ssr.html">\n    server-rendered application\n   </a>\n   .\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "beforeUpdate",
    body: '<p>\n Called right before the component is about to update its DOM tree due to a reactive state change.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeUpdate</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   This hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "updated",
    body: '<p>\n Called after the component has updated its DOM tree due to a reactive state change.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">updated</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   A parent component\'s updated hook is called after that of its child components.\n  </p>\n  <p>\n   This hook is called after any DOM update of the component, which can be caused by different state changes. If you need to access the updated DOM after a specific state change, use\n   <a href="/api/general.html#nexttick">\n    nextTick()\n   </a>\n   instead.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    WARNING\n   </p>\n   <p>\n    Do not mutate component state in the updated hook - this will likely lead to an infinite update loop!\n   </p>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "beforeUnmount",
    body: '<p>\n Called right before a component instance is to be unmounted.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeUnmount</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   When this hook is called, the component instance is still fully functional.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "unmounted",
    body: '<p>\n Called after the component has been unmounted.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">unmounted</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   A component is considered unmounted after:\n  </p>\n  <ul>\n   <li>\n    <p>\n     All of its child components have been unmounted.\n    </p>\n   </li>\n   <li>\n    <p>\n     All of its associated reactive effects (render effect and computed / watchers created during\n     <code>\n      setup()\n     </code>\n     ) have been stopped.\n    </p>\n   </li>\n  </ul>\n  <p>\n   Use this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.\n  </p>\n  <p>\n   <strong>\n    This hook is not called during server-side rendering.\n   </strong>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "errorCaptured",
    body: '<p>\n Called when an error propagating from a descendant component has been captured.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">errorCaptured</span><span style="color:#89DDFF;">?(</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Errors can be captured from the following sources:\n  </p>\n  <ul>\n   <li>\n    Component renders\n   </li>\n   <li>\n    Event handlers\n   </li>\n   <li>\n    Lifecycle hooks\n   </li>\n   <li>\n    <code>\n     setup()\n    </code>\n    function\n   </li>\n   <li>\n    Watchers\n   </li>\n   <li>\n    Custom directive hooks\n   </li>\n   <li>\n    Transition hooks\n   </li>\n  </ul>\n  <p>\n   The hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.\n  </p>\n  <p>\n   You can modify component state in\n   <code>\n    errorCaptured()\n   </code>\n   to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.\n  </p>\n  <p>\n   The hook can return\n   <code>\n    false\n   </code>\n   to stop the error from propagating further. See error propagation details below.\n  </p>\n  <p>\n   <strong>\n    Error Propagation Rules\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <p>\n     By default, all errors are still sent to the application-level\n     <a href="/api/application.html#app-config-errorhandler">\n      <code>\n       app.config.errorHandler\n      </code>\n     </a>\n     if it is defined, so that these errors can still be reported to an analytics service in a single place.\n    </p>\n   </li>\n   <li>\n    <p>\n     If multiple\n     <code>\n      errorCaptured\n     </code>\n     hooks exist on a component\'s inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.\n    </p>\n   </li>\n   <li>\n    <p>\n     If the\n     <code>\n      errorCaptured\n     </code>\n     hook itself throws an error, both this error and the original captured error are sent to\n     <code>\n      app.config.errorHandler\n     </code>\n     .\n    </p>\n   </li>\n   <li>\n    <p>\n     An\n     <code>\n      errorCaptured\n     </code>\n     hook can return\n     <code>\n      false\n     </code>\n     to prevent the error from propagating further. This is essentially saying "this error has been handled and should be ignored." It will prevent any additional\n     <code>\n      errorCaptured\n     </code>\n     hooks or\n     <code>\n      app.config.errorHandler\n     </code>\n     from being invoked for this error.\n    </p>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "renderTracked",
    body: '<p>\n Called when a reactive dependency has been tracked by the component\'s render effect.\n</p>\n<p>\n <strong>\n  This hook is development-mode-only and not called during server-side rendering.\n </strong>\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">renderTracked</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">effect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactiveEffect</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TrackOpTypes</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* \'get\' | \'has\' | \'iterate\' */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/reactivity-in-depth.html">\n    Reactivity in Depth\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "renderTriggered",
    body: '<p>\n Called when a reactive dependency triggers the component\'s render effect to be re-run.\n</p>\n<p>\n <strong>\n  This hook is development-mode-only and not called during server-side rendering.\n </strong>\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">renderTriggered</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">effect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactiveEffect</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TriggerOpTypes</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* \'set\' | \'add\' | \'delete\' | \'clear\' */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">newValue</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">oldValue</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">oldTarget</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/reactivity-in-depth.html">\n    Reactivity in Depth\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "activated",
    body: '<p>\n Called after the component instance is inserted into the DOM as part of a tree cached by\n <a href="/api/built-in-components.html#keepalive">\n  <code>\n   &lt;KeepAlive&gt;\n  </code>\n </a>\n .\n</p>\n<p>\n <strong>\n  This hook is not called during server-side rendering.\n </strong>\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">activated</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/keep-alive.html#lifecycle-of-cached-instance">\n    Guide - Lifecycle of Cached Instance\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "deactivated",
    body: '<p>\n Called after the component instance is removed from the DOM as part of a tree cached by\n <a href="/api/built-in-components.html#keepalive">\n  <code>\n   &lt;KeepAlive&gt;\n  </code>\n </a>\n .\n</p>\n<p>\n <strong>\n  This hook is not called during server-side rendering.\n </strong>\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deactivated</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/keep-alive.html#lifecycle-of-cached-instance">\n    Guide - Lifecycle of Cached Instance\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Lifecycle",
    type: ["Options API"],
    name: "serverPrefetch",
    body: '<p>\n Async function to be resolved before the component instance is to be rendered on the server.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">serverPrefetch</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   If the hook returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.\n  </p>\n  <p>\n   This hook is only called during server-side rendering can be used to perform server-only data fetching.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">serverPrefetch</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// component is rendered as part of the initial request</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// pre-fetch data on server as it is faster than on the client</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetchOnServer</span><span style="color:#F07178;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// if data is null on mount, it means the component</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// is dynamically rendered on the client. Perform a</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// client-side fetch instead.</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetchOnClient</span><span style="color:#F07178;">(</span><span style="color:#676E95;">/* ... */</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/scaling-up/ssr.html">\n    Server-Side Rendering\n   </a>\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Options: Composition",
    type: ["Options API"],
    name: "provide",
    body: '<p>\n Provide values that can be injected by descendant components.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">provide</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details:\n   </strong>\n  </p>\n  <p>\n   <code>\n    provide\n   </code>\n   and\n   <a href="#inject">\n    <code>\n     inject\n    </code>\n   </a>\n   are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain.\n  </p>\n  <p>\n   The\n   <code>\n    provide\n   </code>\n   option should be either an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use Symbols as keys in this object.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Basic usage:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">provide</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Using a function to provide per-component state:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      msg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">provide</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      msg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">msg</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Note in the above example, the provided\n   <code>\n    msg\n   </code>\n   will NOT be reactive. See\n   <a href="/guide/components/provide-inject.html#working-with-reactivity">\n    Working with Reactivity\n   </a>\n   for more details.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/components/provide-inject.html">\n    Provide / Inject\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Composition",
    type: ["Options API"],
    name: "inject",
    body: '<p>\n Declare properties to inject into the current component by locating them from ancestor providers.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayInjectOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectInjectOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayInjectOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectInjectOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">symbol</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">symbol</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">symbol</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The\n   <code>\n    inject\n   </code>\n   option should be either:\n  </p>\n  <ul>\n   <li>\n    An array of strings, or\n   </li>\n   <li>\n    An object where the keys are the local binding name and the value is either:\n    <ul>\n     <li>\n      The key (string or Symbol) to search for in available injections, or\n     </li>\n     <li>\n      An object where:\n      <ul>\n       <li>\n        The\n        <code>\n         from\n        </code>\n        property is the key (string or Symbol) to search for in available injections, and\n       </li>\n       <li>\n        The\n        <code>\n         default\n        </code>\n        property is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.\n       </li>\n      </ul>\n     </li>\n    </ul>\n   </li>\n  </ul>\n  <p>\n   An injected property will be\n   <code>\n    undefined\n   </code>\n   if neither a matching property nor a default value was provided.\n  </p>\n  <p>\n   Note that injected bindings are NOT reactive. This is intentional. However, if the injected value is a reactive object, properties on that object do remain reactive. See\n   <a href="/guide/components/provide-inject.html#working-with-reactivity">\n    Working with Reactivity\n   </a>\n   for more details.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Basic usage:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Using an injected value as the default for a prop:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">foo</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Using an injected value as data entry:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      bar</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">foo</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Injections can be optional with default value:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   If it needs to be injected from a property with a different name, use\n   <code>\n    from\n   </code>\n   to denote the source property:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Similar to prop defaults, you need to use a factory function for non-primitive values:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/components/provide-inject.html">\n    Provide / Inject\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Composition",
    type: ["Options API"],
    name: "mixins",
    body: '<p>\n An array of option objects to be mixed into the current component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mixins</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details:\n   </strong>\n  </p>\n  <p>\n   The\n   <code>\n    mixins\n   </code>\n   option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the certain option merging logic. For example, if your mixin contains a\n   <code>\n    created\n   </code>\n   hook and the component itself also has one, both functions will be called.\n  </p>\n  <p>\n   Mixin hooks are called in the order they are provided, and called before the component\'s own hooks.\n  </p>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    No Longer Recommended\n   </p>\n   <p>\n    In Vue 2, mixins were the primary mechanism for creating reusable chunks of component logic. While mixins continue to be supported in Vue 3,\n    <a href="/guide/reusability/composables.html">\n     Composition API\n    </a>\n    is now the preferred approach for code reuse between components.\n   </p>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example:\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mixin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mixins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [mixin]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// =&gt; 1</span></span>\n<span class="line"><span style="color:#676E95;">// =&gt; 2</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Composition",
    type: ["Options API"],
    name: "extends",
    body: '<p>\n A "base class" component to extend from.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type:\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details:\n   </strong>\n  </p>\n  <p>\n   Allows one component to extend another, inheriting its component options.\n  </p>\n  <p>\n   From an implementation perspective,\n   <code>\n    extends\n   </code>\n   is almost identical to\n   <code>\n    mixins\n   </code>\n   . The component specified by\n   <code>\n    extends\n   </code>\n   will be treated as though it were the first mixin.\n  </p>\n  <p>\n   However,\n   <code>\n    extends\n   </code>\n   and\n   <code>\n    mixins\n   </code>\n   express different intents. The\n   <code>\n    mixins\n   </code>\n   option is primarily used to compose chunks of functionality, whereas\n   <code>\n    extends\n   </code>\n   is primarily concerned with inheritance.\n  </p>\n  <p>\n   As with\n   <code>\n    mixins\n   </code>\n   , any options will be merged using the relevant merge strategy.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example:\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> CompA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> CompB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> CompA</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>',
  },
  {
    group: "Options: Misc",
    type: ["Options API"],
    name: "name",
    body: '<p>\n Explicitly declare a display name for the component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The name of a component is used for the following:\n  </p>\n  <ul>\n   <li>\n    Recursive self-reference in the component\'s own template\n   </li>\n   <li>\n    Display in Vue DevTools\' component inspection tree\n   </li>\n   <li>\n    Display in warning component traces\n   </li>\n  </ul>\n  <p>\n   When you use Single-File Components, the component already infers its own name from the filename. For example, a file named\n   <code>\n    MyComponent.vue\n   </code>\n   will have the inferred display name "MyComponent".\n  </p>\n  <p>\n   Another case is that when a component is registered globally with\n   <a href="/api/application.html#app-component">\n    <code>\n     app.component\n    </code>\n   </a>\n   , the global ID is automatically set as its name.\n  </p>\n  <p>\n   The\n   <code>\n    name\n   </code>\n   option allows you to override the inferred name, or to explicitly provide a name when no name can be inferred (e.g. when not using build tools, or an inlined non-SFC component).\n  </p>\n  <p>\n   There is one case where\n   <code>\n    name\n   </code>\n   is explicitly necessary: when matching against cacheable components in\n   <a href="/guide/built-ins/keep-alive.html">\n    <code>\n     &lt;KeepAlive&gt;\n    </code>\n   </a>\n   via its\n   <code>\n    include / exclude\n   </code>\n   props.\n  </p>\n  <div class="tip custom-block">\n   <p class="custom-block-title">\n    TIP\n   </p>\n   <p>\n    Since version 3.2.34, a single-file component using\n    <code>\n     &lt;script setup&gt;\n    </code>\n    will automatically infer its\n    <code>\n     name\n    </code>\n    option based on the filename, removing the need to manually declare the name even when used with\n    <code>\n     &lt;KeepAlive&gt;\n    </code>\n    .\n   </p>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Misc",
    type: ["Options API"],
    name: "inheritAttrs",
    body: '<p>\n Controls whether the default component attribute fallthrough behavior should be enabled.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inheritAttrs</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: true</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   By default, parent scope attribute bindings that are not recognized as props will "fallthrough". This means that when we have a single-root component, these bindings will be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting\n   <code>\n    inheritAttrs\n   </code>\n   to\n   <code>\n    false\n   </code>\n   , this default behavior can be disabled. The attributes are available via the\n   <code>\n    $attrs\n   </code>\n   instance property and can be explicitly bound to a non-root element using\n   <code>\n    v-bind\n   </code>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="options-api">\n   <div class="language-vue">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     vue\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inheritAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">emits</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> label </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">$attrs</span><span style="color:#89DDFF;">"</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">"</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">v-on</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">input</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#82AAFF;">$emit</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">$event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">"</span></span>\n<span class="line"><span style="color:#89DDFF;">    /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n   </div>\n  </div>\n  <div class="composition-api">\n   <p>\n    When declaring this option in a component that uses\n    <code>\n     &lt;script setup&gt;\n    </code>\n    , a separate\n    <code>\n     &lt;script&gt;\n    </code>\n    block is necessary:\n   </p>\n   <div class="language-vue">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     vue\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inheritAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#82AAFF;">defineProps</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">])</span></span>\n<span class="line"><span style="color:#82AAFF;">defineEmits</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">])</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> label </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">$attrs</span><span style="color:#89DDFF;">"</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">"</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">v-on</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">input</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#82AAFF;">$emit</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">$event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">"</span></span>\n<span class="line"><span style="color:#89DDFF;">    /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n   </div>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/components/attrs.html">\n    Fallthrough Attributes\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Misc",
    type: ["Options API"],
    name: "components",
    body: '<p>\n An object that registers components to be made available to the component instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki has-diff"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Foo </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Foo.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Bar </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Bar.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// shorthand</span></span>\n<span class="line"><span style="color:#A6ACCD;">    Foo</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// register under a different name</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">RenamedBar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Bar</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/components/registration.html">\n    Component Registration\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Options: Misc",
    type: ["Options API"],
    name: "directives",
    body: '<p>\n An object that registers directives to be made available to the component instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">directives</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Directive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">directives</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// enables v-focus in template</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">focus</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">focus</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-focus</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   A hash of directives to be made available to the component instance.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/reusability/custom-directives.html">\n    Custom Directives\n   </a>\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$data",
    body: '<p>\n The object returned from the\n <a href="./options-state.html#data">\n  <code>\n   data\n  </code>\n </a>\n option, made reactive by the component. The component instance proxies access to the properties on its data object.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$props",
    body: '<p>\n An object representing the component\'s current, resolved props.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Only props declared via the\n   <a href="./options-state.html#props">\n    <code>\n     props\n    </code>\n   </a>\n   option will be included. The component instance proxies access to the properties on its props object.\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$el",
    body: '<p>\n The root DOM node that the component instance is managing.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Node</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    $el\n   </code>\n   will be\n   <code>\n    undefined\n   </code>\n   until the component is\n   <a href="./options-lifecycle.html#mounted">\n    mounted\n   </a>\n   .\n  </p>\n  <ul>\n   <li>\n    For components with a single root element,\n    <code>\n     $el\n    </code>\n    will point to that element.\n   </li>\n   <li>\n    For components with text root,\n    <code>\n     $el\n    </code>\n    will point to the text node.\n   </li>\n   <li>\n    For components with multiple root nodes,\n    <code>\n     $el\n    </code>\n    will be the placeholder DOM node that Vue uses to keep track of the component\'s position in the DOM (a text node, or a comment node in SSR hydration mode).\n   </li>\n  </ul>\n  <div class="tip custom-block">\n   <p class="custom-block-title">\n    TIP\n   </p>\n   <p>\n    For consistency, it is recommended to use\n    <a href="/guide/essentials/template-refs.html">\n     template refs\n    </a>\n    for direct access to elements instead of relying on\n    <code>\n     $el\n    </code>\n    .\n   </p>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$options",
    body: '<p>\n The resolved component options used for instantiating the current component instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The\n   <code>\n    $options\n   </code>\n   object exposes the resolved options for the current component and is the merge result of these possible sources:\n  </p>\n  <ul>\n   <li>\n    Global mixins\n   </li>\n   <li>\n    Component\n    <code>\n     extends\n    </code>\n    base\n   </li>\n   <li>\n    Component mixins\n   </li>\n  </ul>\n  <p>\n   It is typically used to support custom component options:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">customOption</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">customOption</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// =&gt; \'foo\'</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/api/application.html#app-config-optionmergestrategies">\n    <code>\n     app.config.optionMergeStrategies\n    </code>\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$parent",
    body: '<p>\n The parent instance, if the current instance has one. It will be\n <code>\n  null\n </code>\n for the root instance itself.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$parent</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$root",
    body: '<p>\n The root component instance of the current component tree. If the current instance has no parents this value will be itself.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$root</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$slots",
    body: '<p>\n An object representing the\n <a href="/guide/components/slots.html">\n  slots\n </a>\n passed by the parent component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$slots</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Typically used when manually authoring\n   <a href="/guide/extras/render-function.html">\n    render functions\n   </a>\n   , but can also be used to detect whether a slot is present.\n  </p>\n  <p>\n   Each slot is exposed on\n   <code>\n    this.$slots\n   </code>\n   as a function that returns an array of vnodes under the key corresponding to that slot\'s name. The default slot is exposed as\n   <code>\n    this.$slots.default\n   </code>\n   .\n  </p>\n  <p>\n   If a slot is a\n   <a href="/guide/components/slots.html#scoped-slots">\n    scoped slot\n   </a>\n   , arguments passed to the slot functions are available to the slot as its slot props.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/render-function.html#rendering-slots">\n    Render Functions - Rendering Slots\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$refs",
    body: '<p>\n An object of DOM elements and component instances, registered via\n <a href="/guide/essentials/template-refs.html">\n  template refs\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$refs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Element</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/template-refs.html">\n     Template refs\n    </a>\n   </li>\n   <li>\n    <a href="./built-in-special-attributes.html#ref">\n     Special Attributes - ref\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$attrs",
    body: '<p>\n An object that contains the component\'s fallthrough attributes.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$attrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <a href="/guide/components/attrs.html">\n    Fallthrough Attributes\n   </a>\n   are attributes and event handlers passed by the parent component, but not declared as a prop or an emitted event by the child.\n  </p>\n  <p>\n   By default, everything in\n   <code>\n    $attrs\n   </code>\n   will be automatically inherited on the component\'s root element if there is only a single root element. This behavior is disabled if the component has multiple root nodes, and can be explicitly disabled with the\n   <a href="./options-misc.html#inheritattrs">\n    <code>\n     inheritAttrs\n    </code>\n   </a>\n   option.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/components/attrs.html">\n     Fallthrough Attributes\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$watch()",
    body: '<p>\n Imperative API for creating watchers.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$watch</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptions</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StopHandle</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cleanupFn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">pre</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// default: \'pre\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrack</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrigger</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StopHandle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The first argument is the watch source. It can be a component property name string, a simple dot-delimited path string, or a getter function.\n  </p>\n  <p>\n   The second argument is the callback function. The callback receives the new value and the old value of the watched source.\n  </p>\n  <ul>\n   <li>\n    <strong>\n     <code>\n      immediate\n     </code>\n    </strong>\n    : trigger the callback immediately on watcher creation. Old value will be\n    <code>\n     undefined\n    </code>\n    on the first call.\n   </li>\n   <li>\n    <strong>\n     <code>\n      deep\n     </code>\n    </strong>\n    : force deep traversal of the source if it is an object, so that the callback fires on deep mutations. See\n    <a href="/guide/essentials/watchers.html#deep-watchers">\n     Deep Watchers\n    </a>\n    .\n   </li>\n   <li>\n    <strong>\n     <code>\n      flush\n     </code>\n    </strong>\n    : adjust the callback\'s flush timing. See\n    <a href="/guide/essentials/watchers.html#callback-flush-timing">\n     Callback Flush Timing\n    </a>\n    and\n    <a href="/api/reactivity-core.html#watcheffect">\n     <code>\n      watchEffect()\n     </code>\n    </a>\n    .\n   </li>\n   <li>\n    <strong>\n     <code>\n      onTrack / onTrigger\n     </code>\n    </strong>\n    : debug the watcher\'s dependencies. See\n    <a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">\n     Watcher Debugging\n    </a>\n    .\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Watch a property name:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Watch a dot-delimited path:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">a.b</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Using getter for more complex expressions:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki has-diff"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// every time the expression `this.a + this.b` yields</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// a different result, the handler will be called.</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// It\'s as if we were watching a computed property</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// without defining the computed property itself.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Stopping the watcher:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> unwatch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cb)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// later...</span></span>\n<span class="line"><span style="color:#82AAFF;">unwatch</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/api/options-state.html#watch">\n     Options -\n     <code>\n      watch\n     </code>\n    </a>\n   </li>\n   <li>\n    <a href="/guide/essentials/watchers.html">\n     Guide - Watchers\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$emit()",
    body: '<p>\n Trigger a custom event on the current instance. Any additional arguments will be passed into the listener\'s callback function.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$emit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// only event</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// with additional arguments</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/components/events.html">\n     Component - Events\n    </a>\n   </li>\n   <li>\n    <a href="./options-state.html#emits">\n     <code>\n      emits\n     </code>\n     option\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$forceUpdate()",
    body: '<p>\n Force the component instance to re-render.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$forceUpdate</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   This should be rarely needed given Vue\'s fully automatic reactivity system. The only cases where you may need it is when you have explicitly created non-reactive component state using advanced reactivity APIs.\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Component Instance",
    type: ["Options API"],
    name: "$nextTick()",
    body: '<p>\n Instance-bound version of the global\n <a href="./general.html#nexttick">\n  <code>\n   nextTick()\n  </code>\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$nextTick</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The only difference from the global version of\n   <code>\n    nextTick()\n   </code>\n   is that the callback passed to\n   <code>\n    this.$nextTick()\n   </code>\n   will have its\n   <code>\n    this\n   </code>\n   context bound to the current component instance.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="./general.html#nexttick">\n    <code>\n     nextTick()\n    </code>\n   </a>\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-text",
    body: '<p>\n Update the element\'s text content.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    string\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    v-text\n   </code>\n   works by setting the element\'s\n   <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent" rel="noreferrer" target="_blank">\n    textContent\n   </a>\n   property, so it will overwrite any existing content inside the element. If you need to update the part of\n   <code>\n    textContent\n   </code>\n   , you should use\n   <a href="/guide/essentials/template-syntax.html#text-interpolation">\n    mustache interpolations\n   </a>\n   instead.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- same as --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/template-syntax.html#text-interpolation">\n    Template Syntax - Text Interpolation\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-html",
    body: '<p>\n Update the element\'s\n <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML" rel="noreferrer" target="_blank">\n  innerHTML\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    string\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details:\n   </strong>\n  </p>\n  <p>\n   Contents of\n   <code>\n    v-html\n   </code>\n   are inserted as plain HTML - Vue template syntax will not be processed. If you find yourself trying to compose templates using\n   <code>\n    v-html\n   </code>\n   , try to rethink the solution by using components instead.\n  </p>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    Security Note\n   </p>\n   <p>\n    Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to\n    <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" rel="noreferrer" target="_blank">\n     XSS attacks\n    </a>\n    . Only use\n    <code>\n     v-html\n    </code>\n    on trusted content and\n    <strong>\n     never\n    </strong>\n    on user-provided content.\n   </p>\n  </div>\n  <p>\n   In\n   <a href="/guide/scaling-up/sfc.html">\n    Single-File Components\n   </a>\n   ,\n   <code>\n    scoped\n   </code>\n   styles will not apply to content inside\n   <code>\n    v-html\n   </code>\n   , because that HTML is not processed by Vue\'s template compiler. If you want to target\n   <code>\n    v-html\n   </code>\n   content with scoped CSS, you can instead use\n   <a href="./sfc-css-features.html#css-modules">\n    CSS modules\n   </a>\n   or an additional, global\n   <code>\n    &lt;style&gt;\n   </code>\n   element with a manual scoping strategy such as BEM.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example:\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-html</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">html</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/template-syntax.html#raw-html">\n    Template Syntax - Raw HTML\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-show",
    body: '<p>\n Toggle the element\'s visibility based on the truthy-ness of the expression value.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    any\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    v-show\n   </code>\n   works by setting the\n   <code>\n    display\n   </code>\n   CSS property via inline styles, and will try to respect the initial\n   <code>\n    display\n   </code>\n   value when the element is visible. It also triggers transitions when its condition changes.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/conditional.html#v-show">\n    Conditional Rendering - v-show\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-if",
    body: '<p>\n Conditionally render an element or a template fragment based on the truthy-ness of the expression value.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    any\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   When a\n   <code>\n    v-if\n   </code>\n   element is toggled, the element and its contained directives / components are destroyed and re-constructed. If the initial condition is falsy, then the inner content won\'t be rendered at all.\n  </p>\n  <p>\n   Can be used on\n   <code>\n    &lt;template&gt;\n   </code>\n   to denote a conditional block containing only text or multiple elements.\n  </p>\n  <p>\n   This directive triggers transitions when its condition changes.\n  </p>\n  <p>\n   When used together,\n   <code>\n    v-if\n   </code>\n   has a higher priority than\n   <code>\n    v-for\n   </code>\n   . We don\'t recommend using these two directives together on one element \u2014 see the\n   <a href="/guide/essentials/list.html#v-for-with-v-if">\n    list rendering guide\n   </a>\n   for details.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/conditional.html#v-if">\n    Conditional Rendering - v-if\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-else",
    body: '<p>\n Denote the "else block" for\n <code>\n  v-if\n </code>\n or a\n <code>\n  v-if\n </code>\n /\n <code>\n  v-else-if\n </code>\n chain.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Does not expect expression\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <p>\n     Restriction: previous sibling element must have\n     <code>\n      v-if\n     </code>\n     or\n     <code>\n      v-else-if\n     </code>\n     .\n    </p>\n   </li>\n   <li>\n    <p>\n     Can be used on\n     <code>\n      &lt;template&gt;\n     </code>\n     to denote a conditional block containing only text or multiple elements.\n    </p>\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#89DDFF;">() &gt; </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  Now you see me</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-else</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  Now you don\'t</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/conditional.html#v-else">\n    Conditional Rendering - v-else\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-else-if",
    body: '<p>\n Denote the "else if block" for\n <code>\n  v-if\n </code>\n . Can be chained.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    any\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <p>\n     Restriction: previous sibling element must have\n     <code>\n      v-if\n     </code>\n     or\n     <code>\n      v-else-if\n     </code>\n     .\n    </p>\n   </li>\n   <li>\n    <p>\n     Can be used on\n     <code>\n      &lt;template&gt;\n     </code>\n     to denote a conditional block containing only text or multiple elements.\n    </p>\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;"> === </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">\'"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  A</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-else-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;"> === </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">B</span><span style="color:#89DDFF;">\'"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  B</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-else-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;"> === </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">C</span><span style="color:#89DDFF;">\'"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  C</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-else</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  Not A/B/C</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/conditional.html#v-else-if">\n    Conditional Rendering - v-else-if\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-for",
    body: '<p>\n Render the element or template block multiple times based on the source data.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    Array | Object | number | string | Iterable\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The directive\'s value must use the special syntax\n   <code>\n    alias in expression\n   </code>\n   to provide an alias for the current element being iterated on:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;"> in </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Alternatively, you can also specify an alias for the index (or the key if used on an Object):\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">) in </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">) in </span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">) in </span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   The default behavior of\n   <code>\n    v-for\n   </code>\n   will try to patch the elements in-place without moving them. To force it to reorder elements, you should provide an ordering hint with the\n   <code>\n    key\n   </code>\n   special attribute:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;"> in </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   <code>\n    v-for\n   </code>\n   can also work on values that implement the\n   <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol" rel="noreferrer" target="_blank">\n    Iterable Protocol\n   </a>\n   , including native\n   <code>\n    Map\n   </code>\n   and\n   <code>\n    Set\n   </code>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/list.html">\n     List Rendering\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-on",
    body: '<p>\n Attach an event listener to the element.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Shorthand:\n   </strong>\n   <code>\n    @\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    Function | Inline Statement | Object (without argument)\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Argument:\n   </strong>\n   <code>\n    event\n   </code>\n   (optional if using Object syntax)\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Modifiers:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <code>\n     .stop\n    </code>\n    - call\n    <code>\n     event.stopPropagation()\n    </code>\n    .\n   </li>\n   <li>\n    <code>\n     .prevent\n    </code>\n    - call\n    <code>\n     event.preventDefault()\n    </code>\n    .\n   </li>\n   <li>\n    <code>\n     .capture\n    </code>\n    - add event listener in capture mode.\n   </li>\n   <li>\n    <code>\n     .self\n    </code>\n    - only trigger handler if event was dispatched from this element.\n   </li>\n   <li>\n    <code>\n     .{keyAlias}\n    </code>\n    - only trigger handler on certain keys.\n   </li>\n   <li>\n    <code>\n     .once\n    </code>\n    - trigger handler at most once.\n   </li>\n   <li>\n    <code>\n     .left\n    </code>\n    - only trigger handler for left button mouse events.\n   </li>\n   <li>\n    <code>\n     .right\n    </code>\n    - only trigger handler for right button mouse events.\n   </li>\n   <li>\n    <code>\n     .middle\n    </code>\n    - only trigger handler for middle button mouse events.\n   </li>\n   <li>\n    <code>\n     .passive\n    </code>\n    - attaches a DOM event with\n    <code>\n     { passive: true }\n    </code>\n    .\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n  </p>\n  <p>\n   When used on a normal element, it listens to\n   <a href="https://developer.mozilla.org/en-US/docs/Web/Events" rel="noreferrer" target="_blank">\n    <strong>\n     native DOM events\n    </strong>\n   </a>\n   only. When used on a custom element component, it listens to\n   <strong>\n    custom events\n   </strong>\n   emitted on that child component.\n  </p>\n  <p>\n   When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special\n   <code>\n    $event\n   </code>\n   property:\n   <code>\n    v-on:click="handle(\'ok\', $event)"\n   </code>\n   .\n  </p>\n  <p>\n   <code>\n    v-on\n   </code>\n   also supports binding to an object of event / listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example:\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- method handler --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-on</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">doThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- dynamic event --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-on:</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">event</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">doThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- inline statement --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-on</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#82AAFF;">doThat</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">$event</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- shorthand --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">doThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- shorthand dynamic event --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @[</span><span style="color:#C792EA;">event</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">doThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- stop propagation --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">stop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">doThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- prevent default --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">prevent</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">doThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- prevent default without expression --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">submit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">prevent</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- chain modifiers --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">.stop.</span><span style="color:#C792EA;">prevent</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">doThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- key modifier using keyAlias --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">keyup</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">enter</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">onEnter</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- the click event will be triggered at most once --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-on</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">once</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">doThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- object syntax --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-on</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">{ </span><span style="color:#F07178;">mousedown</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">doThis</span><span style="color:#89DDFF;">, </span><span style="color:#F07178;">mouseup</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">doThat</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Listening to custom events on a child component (the handler is called when "my-event" is emitted on the child):\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">my-event</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">handleThis</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- inline statement --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">my-event</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#82AAFF;">handleThis</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">$event</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/event-handling.html">\n     Event Handling\n    </a>\n   </li>\n   <li>\n    <a href="/guide/essentials/component-basics.html#listening-to-events">\n     Components - Custom Events\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-bind",
    body: '<p>\n Dynamically bind one or more attributes, or a component prop to an expression.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Shorthand:\n   </strong>\n   <code>\n    :\n   </code>\n   or\n   <code>\n    .\n   </code>\n   (when using\n   <code>\n    .prop\n   </code>\n   modifier)\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    any (with argument) | Object (without argument)\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Argument:\n   </strong>\n   <code>\n    attrOrProp (optional)\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Modifiers:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <code>\n     .camel\n    </code>\n    - transform the kebab-case attribute name into camelCase.\n   </li>\n   <li>\n    <code>\n     .prop\n    </code>\n    - force a binding to be set as a DOM property.\n    <sup class="vt-badge">\n     3.2+\n    </sup>\n   </li>\n   <li>\n    <code>\n     .attr\n    </code>\n    - force a binding to be set as a DOM attribute.\n    <sup class="vt-badge">\n     3.2+\n    </sup>\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Usage:\n   </strong>\n  </p>\n  <p>\n   When used to bind the\n   <code>\n    class\n   </code>\n   or\n   <code>\n    style\n   </code>\n   attribute,\n   <code>\n    v-bind\n   </code>\n   supports additional value types such as Array or Objects. See linked guide section below for more details.\n  </p>\n  <p>\n   When setting a binding on an element, Vue by default checks whether the element has the key defined as a property using an\n   <code>\n    in\n   </code>\n   operator check. If the property is defined, Vue will set the value as a DOM property instead of an attribute. This should work in most cases, but you can override this behavior by explicitly using\n   <code>\n    .prop\n   </code>\n   or\n   <code>\n    .attr\n   </code>\n   modifiers. This is sometimes necessary, especially when\n   <a href="/guide/extras/web-components.html#passing-dom-properties">\n    working with custom elements\n   </a>\n   .\n  </p>\n  <p>\n   When used for component prop binding, the prop must be properly declared in the child component.\n  </p>\n  <p>\n   When used without an argument, can be used to bind an object containing attribute name-value pairs.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example:\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- bind an attribute --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">imageSrc</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- dynamic attribute name --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind:</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- shorthand --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">imageSrc</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- shorthand dynamic attribute name --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> :[</span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- with inline string concatenation --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"\'</span><span style="color:#C3E88D;">/path/to/images/</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;"> + </span><span style="color:#A6ACCD;">fileName</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- class binding --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">{ </span><span style="color:#F07178;">red</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">isRed</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">classA</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">classB</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">classA</span><span style="color:#89DDFF;">, { </span><span style="color:#F07178;">classB</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">isB</span><span style="color:#89DDFF;">, </span><span style="color:#F07178;">classC</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">isC</span><span style="color:#89DDFF;"> }]</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- style binding --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">{ </span><span style="color:#F07178;">fontSize</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;"> + </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">px</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">styleObjectA</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">styleObjectB</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- binding an object of attributes --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">{ </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">someProp</span><span style="color:#89DDFF;">, </span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">other-attr</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">otherProp</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- prop binding. "prop" must be declared in the child component. --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">prop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">someThing</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- pass down parent props in common with a child component --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">$props</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- XLink --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">svg</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">xlink</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">special</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">svg</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   The\n   <code>\n    .prop\n   </code>\n   modifier also has a dedicated shorthand,\n   <code>\n    .\n   </code>\n   :\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">someProperty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">prop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">someObject</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- equivalent to --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> .</span><span style="color:#C792EA;">someProperty</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">someObject</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   The\n   <code>\n    .camel\n   </code>\n   modifier allows camelizing a\n   <code>\n    v-bind\n   </code>\n   attribute name when using in-DOM templates, e.g. the SVG\n   <code>\n    viewBox\n   </code>\n   attribute:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">svg</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">view-box</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">camel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">viewBox</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">svg</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   <code>\n    .camel\n   </code>\n   is not needed if you are using string templates, or pre-compiling the template with a build step.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/class-and-style.html">\n     Class and Style Bindings\n    </a>\n   </li>\n   <li>\n    <a href="/guide/components/props.html#prop-passing-details">\n     Components - Prop Passing Details\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-model",
    body: '<p>\n Create a two-way binding on a form input element or a component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   varies based on value of form inputs element or output of components\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Limited to:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <code>\n     &lt;input&gt;\n    </code>\n   </li>\n   <li>\n    <code>\n     &lt;select&gt;\n    </code>\n   </li>\n   <li>\n    <code>\n     &lt;textarea&gt;\n    </code>\n   </li>\n   <li>\n    components\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Modifiers:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/forms.html#lazy">\n     <code>\n      .lazy\n     </code>\n    </a>\n    - listen to\n    <code>\n     change\n    </code>\n    events instead of\n    <code>\n     input\n    </code>\n   </li>\n   <li>\n    <a href="/guide/essentials/forms.html#number">\n     <code>\n      .number\n     </code>\n    </a>\n    - cast valid input string to numbers\n   </li>\n   <li>\n    <a href="/guide/essentials/forms.html#trim">\n     <code>\n      .trim\n     </code>\n    </a>\n    - trim input\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/forms.html">\n     Form Input Bindings\n    </a>\n   </li>\n   <li>\n    <a href="/guide/components/v-model.html">\n     Component Events - Usage with\n     <code>\n      v-model\n     </code>\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-slot",
    body: '<p>\n Denote named slots or scoped slots that expect to receive props.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Shorthand:\n   </strong>\n   <code>\n    #\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   JavaScript expression that is valid in a function argument position, including support for destructuring. Optional - only needed if expecting props to be passed to the slot.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Argument:\n   </strong>\n   slot name (optional, defaults to\n   <code>\n    default\n   </code>\n   )\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Limited to:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <code>\n     &lt;template&gt;\n    </code>\n   </li>\n   <li>\n    <a href="/guide/components/slots.html#scoped-slots">\n     components\n    </a>\n    (for a lone default slot with props)\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example:\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- Named slots --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BaseLayout</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot:header</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    Header content</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot:default</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    Default slot content</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot:footer</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    Footer content</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">BaseLayout</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- Named slot that receives props --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">InfiniteScroll</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">item</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">slotProps</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> slotProps</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">InfiniteScroll</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- Default slot that receive props, with destructuring --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Mouse</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">{ </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  Mouse position: </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Mouse</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/components/slots.html">\n     Components - Slots\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-pre",
    body: '<p>\n Skip compilation for this element and all its children.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Does not expect expression\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Inside the element with\n   <code>\n    v-pre\n   </code>\n   , all Vue template syntax will be preserved and rendered as-is. The most common use case of this is displaying raw mustache tags.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example:\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-pre</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> will not be compiled </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-once",
    body: '<p>\n Render the element and component once only, and skip future updates.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Does not expect expression\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- single element --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-once</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This will never change: </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- the element have children --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-once</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">comment</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- component --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-once</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">comment</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- `v-for` directive --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;"> in </span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-once</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Since 3.2, you can also memoize part of the template with invalidation conditions using\n   <a href="#v-memo">\n    <code>\n     v-memo\n    </code>\n   </a>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/template-syntax.html#text-interpolation">\n     Data Binding Syntax - interpolations\n    </a>\n   </li>\n   <li>\n    <a href="#v-memo">\n     v-memo\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-memo",
    body: '<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    any[]\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Memoize a sub-tree of the template. Can be used on both elements and components. The directive expects a fixed-length array of dependency values to compare for the memoization. If every value in the array was the same as last render, then updates for the entire sub-tree will be skipped. For example:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-memo</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">valueA</span><span style="color:#89DDFF;">, </span><span style="color:#A6ACCD;">valueB</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ...</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When the component re-renders, if both\n   <code>\n    valueA\n   </code>\n   and\n   <code>\n    valueB\n   </code>\n   remain the same, all updates for this\n   <code>\n    &lt;div&gt;\n   </code>\n   and its children will be skipped. In fact, even the Virtual DOM VNode creation will also be skipped since the memoized copy of the sub-tree can be reused.\n  </p>\n  <p>\n   It is important to specify the memoization array correctly, otherwise we may skip updates that should indeed be applied.\n   <code>\n    v-memo\n   </code>\n   with an empty dependency array (\n   <code>\n    v-memo="[]"\n   </code>\n   ) would be functionally equivalent to\n   <code>\n    v-once\n   </code>\n   .\n  </p>\n  <p>\n   <strong>\n    Usage with\n    <code>\n     v-for\n    </code>\n   </strong>\n  </p>\n  <p>\n   <code>\n    v-memo\n   </code>\n   is provided solely for micro optimizations in performance-critical scenarios and should be rarely needed. The most common case where this may prove helpful is when rendering large\n   <code>\n    v-for\n   </code>\n   lists (where\n   <code>\n    length &gt; 1000\n   </code>\n   ):\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;"> in </span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-memo</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;"> === </span><span style="color:#A6ACCD;">selected</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">ID: </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;"> - selected: </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> selected </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...more child nodes</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When the component\'s\n   <code>\n    selected\n   </code>\n   state changes, a large amount of VNodes will be created even though most of the items remained exactly the same. The\n   <code>\n    v-memo\n   </code>\n   usage here is essentially saying "only update this item if it went from non-selected to selected, or the other way around". This allows every unaffected item to reuse its previous VNode and skip diffing entirely. Note we don\'t need to include\n   <code>\n    item.id\n   </code>\n   in the memo dependency array here since Vue automatically infers it from the item\'s\n   <code>\n    :key\n   </code>\n   .\n  </p>\n  <div class="warning custom-block">\n   <p class="custom-block-title">\n    WARNING\n   </p>\n   <p>\n    When using\n    <code>\n     v-memo\n    </code>\n    with\n    <code>\n     v-for\n    </code>\n    , make sure they are used on the same element.\n    <strong>\n     <code>\n      v-memo\n     </code>\n     does not work inside\n     <code>\n      v-for\n     </code>\n     .\n    </strong>\n   </p>\n  </div>\n  <p>\n   <code>\n    v-memo\n   </code>\n   can also be used on components to manually prevent unwanted updates in certain edge cases where the child component update check has been de-optimized. But again, it is the developer\'s responsibility to specify correct dependency arrays to avoid skipping necessary updates.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="#v-once">\n     v-once\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Directives",
    type: ["Built Ins"],
    name: "v-cloak",
    body: '<p>\n Used to hide un-compiled template until it is ready.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Does not expect expression\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <strong>\n    This directive is only needed in no-build-step setups.\n   </strong>\n  </p>\n  <p>\n   When using in-DOM templates, there can be a "flash of un-compiled templates": the user may see raw mustache tags until the mounted component replaces them with rendered content.\n  </p>\n  <p>\n   <code>\n    v-cloak\n   </code>\n   will remain on the element until the associated component instance is mounted. Combined with CSS rules such as\n   <code>\n    [v-cloak] { display: none }\n   </code>\n   , it can be used to hide the raw templates until the component is ready.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example:\n   </strong>\n  </p>\n  <div class="language-css">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    css\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">v-cloak</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-cloak</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   The\n   <code>\n    &lt;div&gt;\n   </code>\n   will not be visible until the compilation is done.\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Built-in Components",
    type: ["Built Ins"],
    name: "<Transition>",
    body: '<p>\n Provides animated transition effects to a\n <strong>\n  single\n </strong>\n element or component.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Props\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransitionProps</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Used to automatically generate transition CSS class names.</span></span>\n<span class="line"><span style="color:#676E95;">   * e.g. `name: \'fade\'` will auto expand to `.fade-enter`,</span></span>\n<span class="line"><span style="color:#676E95;">   * `.fade-enter-active`, etc.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Whether to apply CSS transition classes.</span></span>\n<span class="line"><span style="color:#676E95;">   * Default: true</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">css</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Specifies the type of transition events to wait for to</span></span>\n<span class="line"><span style="color:#676E95;">   * determine transition end timing.</span></span>\n<span class="line"><span style="color:#676E95;">   * Default behavior is auto detecting the type that has</span></span>\n<span class="line"><span style="color:#676E95;">   * longer duration.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">transition</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">animation</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Specifies explicit durations of the transition.</span></span>\n<span class="line"><span style="color:#676E95;">   * Default behavior is wait for the first `transitionend`</span></span>\n<span class="line"><span style="color:#676E95;">   * or `animationend` event on the root transition element.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">duration</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">enter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">leave</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Controls the timing sequence of leaving/entering transitions.</span></span>\n<span class="line"><span style="color:#676E95;">   * Default behavior is simultaneous.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">in-out</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">out-in</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Whether to apply transition on initial render.</span></span>\n<span class="line"><span style="color:#676E95;">   * Default: false</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">appear</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Props for customizing transition classes.</span></span>\n<span class="line"><span style="color:#676E95;">   * Use kebab-case in templates, e.g. enter-from-class="xxx"</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enterFromClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enterActiveClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enterToClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">appearFromClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">appearActiveClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">appearToClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">leaveFromClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">leaveActiveClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">leaveToClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Events\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <code>\n     @before-enter\n    </code>\n   </li>\n   <li>\n    <code>\n     @before-leave\n    </code>\n   </li>\n   <li>\n    <code>\n     @enter\n    </code>\n   </li>\n   <li>\n    <code>\n     @leave\n    </code>\n   </li>\n   <li>\n    <code>\n     @appear\n    </code>\n   </li>\n   <li>\n    <code>\n     @after-enter\n    </code>\n   </li>\n   <li>\n    <code>\n     @after-leave\n    </code>\n   </li>\n   <li>\n    <code>\n     @after-appear\n    </code>\n   </li>\n   <li>\n    <code>\n     @enter-cancelled\n    </code>\n   </li>\n   <li>\n    <code>\n     @leave-cancelled\n    </code>\n    (\n    <code>\n     v-show\n    </code>\n    only)\n   </li>\n   <li>\n    <code>\n     @appear-cancelled\n    </code>\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Simple element:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">ok</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">toggled content</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Dynamic component, with transition mode + animate on appear:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">fade</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">mode</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">out-in</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">appear</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Listening to transition events:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">after-enter</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">onTransitionComplete</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-show</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">ok</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">toggled content</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/transition.html">\n    <code>\n     &lt;Transition&gt;\n    </code>\n    Guide\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Components",
    type: ["Built Ins"],
    name: "<TransitionGroup>",
    body: '<p>\n Provides transition effects for\n <strong>\n  multiple\n </strong>\n elements or components in a list.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Props\n   </strong>\n  </p>\n  <p>\n   <code>\n    &lt;TransitionGroup&gt;\n   </code>\n   accepts the same props as\n   <code>\n    &lt;Transition&gt;\n   </code>\n   except\n   <code>\n    mode\n   </code>\n   , plus two additional props:\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransitionGroupProps</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Omit</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TransitionProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">mode</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * If not defined, renders as a fragment.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tag</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * For customizing the CSS class applied during move transitions.</span></span>\n<span class="line"><span style="color:#676E95;">   * Use kebab-case in templates, e.g. move-class="xxx"</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">moveClass</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Events\n   </strong>\n  </p>\n  <p>\n   <code>\n    &lt;TransitionGroup&gt;\n   </code>\n   emits the same events as\n   <code>\n    &lt;Transition&gt;\n   </code>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   By default,\n   <code>\n    &lt;TransitionGroup&gt;\n   </code>\n   doesn\'t render a wrapper DOM element, but one can be defined via the\n   <code>\n    tag\n   </code>\n   prop.\n  </p>\n  <p>\n   Note that every child in a\n   <code>\n    &lt;transition-group&gt;\n   </code>\n   must be\n   <a href="/guide/essentials/list.html#maintaining-state-with-key">\n    <strong>\n     uniquely keyed\n    </strong>\n   </a>\n   for the animations to work properly.\n  </p>\n  <p>\n   <code>\n    &lt;TransitionGroup&gt;\n   </code>\n   supports moving transitions via CSS transform. When a child\'s position on screen has changed after an update, it will get applied a moving CSS class (auto generated from the\n   <code>\n    name\n   </code>\n   attribute or configured with the\n   <code>\n    move-class\n   </code>\n   prop). If the CSS\n   <code>\n    transform\n   </code>\n   property is "transition-able" when the moving class is applied, the element will be smoothly animated to its destination using the\n   <a href="https://aerotwist.com/blog/flip-your-animations/" rel="noreferrer" target="_blank">\n    FLIP technique\n   </a>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TransitionGroup</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">tag</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">ul</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">slide</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;"> in </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">TransitionGroup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/transition-group.html">\n    Guide - TransitionGroup\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Components",
    type: ["Built Ins"],
    name: "<KeepAlive>",
    body: '<p>\n Caches dynamically toggled components wrapped inside.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Props\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">KeepAliveProps</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * If specified, only components with names matched by</span></span>\n<span class="line"><span style="color:#676E95;">   * `include` will be cached.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">include</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MatchPattern</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Any component with a name matched by `exclude` will</span></span>\n<span class="line"><span style="color:#676E95;">   * not be cached.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">exclude</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MatchPattern</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * The maximum number of component instances to cache.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">max</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MatchPattern</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RegExp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RegExp</span><span style="color:#A6ACCD;">)[]</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   When wrapped around a dynamic component,\n   <code>\n    &lt;KeepAlive&gt;\n   </code>\n   caches the inactive component instances without destroying them.\n  </p>\n  <p>\n   There can only be one active component instance as the direct child of\n   <code>\n    &lt;KeepAlive&gt;\n   </code>\n   at any time.\n  </p>\n  <p>\n   When a component is toggled inside\n   <code>\n    &lt;KeepAlive&gt;\n   </code>\n   , its\n   <code>\n    activated\n   </code>\n   and\n   <code>\n    deactivated\n   </code>\n   lifecycle hooks will be invoked accordingly, providing an alternative to\n   <code>\n    mounted\n   </code>\n   and\n   <code>\n    unmounted\n   </code>\n   , which are not called. This applies to the direct child of\n   <code>\n    &lt;KeepAlive&gt;\n   </code>\n   as well as to all of its descendants.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Basic usage:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When used with\n   <code>\n    v-if\n   </code>\n   /\n   <code>\n    v-else\n   </code>\n   branches, there must be only one component rendered at a time:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">comp-a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;"> &gt; </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">comp-a</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">comp-b</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-else</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">comp-b</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Used together with\n   <code>\n    &lt;Transition&gt;\n   </code>\n   :\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Using\n   <code>\n    include\n   </code>\n   /\n   <code>\n    exclude\n   </code>\n   :\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- comma-delimited string --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">a,b</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- regex (use `v-bind`) --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"/</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">/"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">&lt;!-- Array (use `v-bind`) --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">, </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Usage with\n   <code>\n    max\n   </code>\n   :\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">max</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/keep-alive.html">\n    Guide - KeepAlive\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Components",
    type: ["Built Ins"],
    name: "<Teleport>",
    body: '<p>\n Renders its slot content to another part of the DOM.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Props\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TeleportProps</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Required. Specify target container.</span></span>\n<span class="line"><span style="color:#676E95;">   * Can either be a selector or an actual element.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HTMLElement</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * When `true`, the content will remain in its original</span></span>\n<span class="line"><span style="color:#676E95;">   * location instead of moved into the target container.</span></span>\n<span class="line"><span style="color:#676E95;">   * Can be changed dynamically.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">disabled</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Specifying target container:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">teleport</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">#some-id</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">teleport</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">.some-class</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">teleport</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">[data-teleport]</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Conditionally disabling:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">teleport</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">#popup</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">disabled</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">displayVideoInline</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">video</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">./my-movie.mp4</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">teleport</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/teleport.html">\n    Guide - Teleport\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Components",
    type: ["Built Ins"],
    name: "<Suspense>",
    body: '<p>\n Used for orchestrating nested async dependencies in a component tree.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Props\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SuspenseProps</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">timeout</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Events\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <code>\n     @resolve\n    </code>\n   </li>\n   <li>\n    <code>\n     @pending\n    </code>\n   </li>\n   <li>\n    <code>\n     @fallback\n    </code>\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    &lt;Suspense&gt;\n   </code>\n   accepts two slots: the\n   <code>\n    #default\n   </code>\n   slot and the\n   <code>\n    #fallback\n   </code>\n   slot. It will display the content of the fallback slot while rendering the default slot in memory.\n  </p>\n  <p>\n   If it encounters async dependencies (\n   <a href="/guide/components/async.html">\n    Async Components\n   </a>\n   and components with\n   <a href="/guide/built-ins/suspense.html#async-setup">\n    <code>\n     async setup()\n    </code>\n   </a>\n   ) while rendering the default slot, it will wait until all of them are resolved before displaying the default slot.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/built-ins/suspense.html">\n    Guide - Suspense\n   </a>\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Built-in Special Elements",
    type: ["Built Ins"],
    name: "<component>",
    body: '<p>\n A "meta component" for rendering dynamic components or elements.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Props\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DynamicComponentProps</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">is</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The actual component to render is determined by the\n   <code>\n    is\n   </code>\n   prop.\n  </p>\n  <ul>\n   <li>\n    <p>\n     When\n     <code>\n      is\n     </code>\n     is a string, it could be either an HTML tag name or a component\'s registered name.\n    </p>\n   </li>\n   <li>\n    <p>\n     Alternatively,\n     <code>\n      is\n     </code>\n     can also be directly bound to the definition of a component.\n    </p>\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Rendering components by registered name (Options API):\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Foo </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Foo.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Bar </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Bar.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> Foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Bar </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      view</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Foo</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Rendering components by definition (Composition API with\n   <code>\n    &lt;script setup&gt;\n   </code>\n   ):\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Foo </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Foo.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Bar </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Bar.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#89DDFF;">() &gt; </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;"> ? </span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;"> : </span><span style="color:#A6ACCD;">Bar</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Rendering HTML elements:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">href</span><span style="color:#89DDFF;"> ? </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;"> : </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">\'"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   The\n   <a href="./built-in-components.html">\n    built-in components\n   </a>\n   can all be passed to\n   <code>\n    is\n   </code>\n   , but you must register them if you want to pass them by name. For example:\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Transition</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">TransitionGroup</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    Transition</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    TransitionGroup</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">isGroup</span><span style="color:#89DDFF;"> ? </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">TransitionGroup</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;"> : </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Transition</span><span style="color:#89DDFF;">\'"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Registration is not required if you pass the component itself to\n   <code>\n    is\n   </code>\n   rather than its name, e.g. in\n   <code>\n    &lt;script setup&gt;\n   </code>\n   .\n  </p>\n  <p>\n   If\n   <code>\n    v-model\n   </code>\n   is used on a\n   <code>\n    &lt;component&gt;\n   </code>\n   tag, the template compiler will expand it to a\n   <code>\n    modelValue\n   </code>\n   prop and\n   <code>\n    update:modelValue\n   </code>\n   event listener, much like it would for any other component. However, this won\'t be compatible with native HTML elements, such as\n   <code>\n    &lt;input&gt;\n   </code>\n   or\n   <code>\n    &lt;select&gt;\n   </code>\n   . As a result, using\n   <code>\n    v-model\n   </code>\n   with a dynamically created native element won\'t work:\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> tag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> username </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">&lt;!-- This won\'t work as \'input\' is a native HTML element --&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   In practice, this edge case isn\'t common as native form fields are typically wrapped in components in real applications. If you do need to use a native element directly then you can split the\n   <code>\n    v-model\n   </code>\n   into an attribute and event manually.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/component-basics.html#dynamic-components">\n    Dynamic Components\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Special Elements",
    type: ["Built Ins"],
    name: "<slot>",
    body: '<p>\n Denotes slot content outlets in templates.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Props\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SlotProps</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Any props passed to &lt;slot&gt; to passed as arguments</span></span>\n<span class="line"><span style="color:#676E95;">   * for scoped slots</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;">   * Reserved for specifying slot name.</span></span>\n<span class="line"><span style="color:#676E95;">   */</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The\n   <code>\n    &lt;slot&gt;\n   </code>\n   element can use the\n   <code>\n    name\n   </code>\n   attribute to specify a slot name. When no\n   <code>\n    name\n   </code>\n   is specified, it will render the default slot. Additional attributes passed to the slot element will be passed as slot props to the scoped slot defined in the parent.\n  </p>\n  <p>\n   The element itself will be replaced by its matched slot content.\n  </p>\n  <p>\n   <code>\n    &lt;slot&gt;\n   </code>\n   elements in Vue templates are compiled into JavaScript, so they are not to be confused with\n   <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot" rel="noreferrer" target="_blank">\n    native\n    <code>\n     &lt;slot&gt;\n    </code>\n    elements\n   </a>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/components/slots.html">\n    Component - Slots\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Special Elements",
    type: ["Built Ins"],
    name: "<template>",
    body: '<p>\n The\n <code>\n  &lt;template&gt;\n </code>\n tag is used as a placeholder when we want to use a built-in directive without rendering an element in the DOM.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Details:\n   </strong>\n  </p>\n  <p>\n   The special handling for\n   <code>\n    &lt;template&gt;\n   </code>\n   is only triggered if it is used with one of these directives:\n  </p>\n  <ul>\n   <li>\n    <code>\n     v-if\n    </code>\n    ,\n    <code>\n     v-else-if\n    </code>\n    , or\n    <code>\n     v-else\n    </code>\n   </li>\n   <li>\n    <code>\n     v-for\n    </code>\n   </li>\n   <li>\n    <code>\n     v-slot\n    </code>\n   </li>\n  </ul>\n  <p>\n   If none of those directives are present then it will be rendered as a\n   <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" rel="noreferrer" target="_blank">\n    native\n    <code>\n     &lt;template&gt;\n    </code>\n    element\n   </a>\n   instead.\n  </p>\n  <p>\n   A\n   <code>\n    &lt;template&gt;\n   </code>\n   with a\n   <code>\n    v-for\n   </code>\n   can also have a\n   <a href="/api/built-in-special-attributes.html#key">\n    <code>\n     key\n    </code>\n    attribute\n   </a>\n   . All other attributes and directives will be discarded, as they aren\'t meaningful without a corresponding element.\n  </p>\n  <p>\n   Single-file components use a\n   <a href="/api/sfc-spec.html#language-blocks">\n    top-level\n    <code>\n     &lt;template&gt;\n    </code>\n    tag\n   </a>\n   to wrap the entire template. That usage is separate from the use of\n   <code>\n    &lt;template&gt;\n   </code>\n   described above. That top-level tag is not part of the template itself and doesn\'t support template syntax, such as directives.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/conditional.html#v-if-on-template">\n     Guide -\n     <code>\n      v-if\n     </code>\n     on\n     <code>\n      &lt;template&gt;\n     </code>\n    </a>\n   </li>\n   <li>\n    <a href="/guide/essentials/list.html#v-for-on-template">\n     Guide -\n     <code>\n      v-for\n     </code>\n     on\n     <code>\n      &lt;template&gt;\n     </code>\n    </a>\n   </li>\n   <li>\n    <a href="/guide/components/slots.html#named-slots">\n     Guide - Named slots\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>',
  },
  {
    group: "Built-in Special Attributes",
    type: ["Built Ins"],
    name: "key",
    body: '<p>\n The\n <code>\n  key\n </code>\n special attribute is primarily used as a hint for Vue\'s virtual DOM algorithm to identify vnodes when diffing the new list of nodes against the old list.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    number | string | symbol\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed / destroyed.\n  </p>\n  <p>\n   Children of the same common parent must have\n   <strong>\n    unique keys\n   </strong>\n   . Duplicate keys will cause render errors.\n  </p>\n  <p>\n   The most common use case is combined with\n   <code>\n    v-for\n   </code>\n   :\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;"> in </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n  </p>\n  <ul>\n   <li>\n    Properly trigger lifecycle hooks of a component\n   </li>\n   <li>\n    Trigger transitions\n   </li>\n  </ul>\n  <p>\n   For example:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   When\n   <code>\n    text\n   </code>\n   changes, the\n   <code>\n    &lt;span&gt;\n   </code>\n   will always be replaced instead of patched, so a transition will be triggered.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/essentials/list.html#maintaining-state-with-key">\n    Guide - List Rendering - Maintaining State with\n    <code>\n     key\n    </code>\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Special Attributes",
    type: ["Built Ins"],
    name: "ref",
    body: '<p>\n Denotes a\n <a href="/guide/essentials/template-refs.html">\n  template ref\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    string | Function\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    ref\n   </code>\n   is used to register a reference to an element or a child component.\n  </p>\n  <p>\n   In Options API, the reference will be registered under the component\'s\n   <code>\n    this.$refs\n   </code>\n   object:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- stored as this.$refs.p --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   In Composition API, the reference will be stored in a ref with matching name:\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be the child component instance.\n  </p>\n  <p>\n   Alternatively\n   <code>\n    ref\n   </code>\n   can accept a function value which provides full control over where to store the reference:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ChildComponent</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> </span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;"> = </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you must wait until the component is mounted before accessing them.\n  </p>\n  <p>\n   <code>\n    this.$refs\n   </code>\n   is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/guide/essentials/template-refs.html">\n     Guide - Template Refs\n    </a>\n   </li>\n   <li>\n    <a href="/guide/typescript/composition-api.html#typing-template-refs">\n     Guide - Typing Template Refs\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n   <li>\n    <a href="/guide/typescript/composition-api.html#typing-component-template-refs">\n     Guide - Typing Component Template Refs\n    </a>\n    <sup class="vt-badge ts">\n    </sup>\n   </li>\n  </ul>\n </li>\n</ul>\n',
  },
  {
    group: "Built-in Special Attributes",
    type: ["Built Ins"],
    name: "is",
    body: '<p>\n Used for binding\n <a href="/guide/essentials/component-basics.html#dynamic-components">\n  dynamic components\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Expects:\n   </strong>\n   <code>\n    string | Component\n   </code>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Usage on native elements\n   </strong>\n   <sup class="vt-badge">\n    3.1+\n   </sup>\n  </p>\n  <p>\n   When the\n   <code>\n    is\n   </code>\n   attribute is used on a native HTML element, it will be interpreted as a\n   <a href="https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example" rel="noreferrer" target="_blank">\n    Customized built-in element\n   </a>\n   , which is a native web platform feature.\n  </p>\n  <p>\n   There is, however, a use case where you may need Vue to replace a native element with a Vue component, as explained in\n   <a href="/guide/essentials/component-basics.html#dom-template-parsing-caveats">\n    DOM Template Parsing Caveats\n   </a>\n   . You can prefix the value of the\n   <code>\n    is\n   </code>\n   attribute with\n   <code>\n    vue:\n   </code>\n   so that Vue will render the element as a Vue component instead:\n  </p>\n  <div class="language-vue-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    template\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">table</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">tr</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">vue:my-row-component</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">tr</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">table</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n  </p>\n  <ul>\n   <li>\n    <a href="/api/built-in-special-elements.html#component">\n     Built-in Special Element -\n     <code>\n      &lt;component&gt;\n     </code>\n    </a>\n   </li>\n   <li>\n    <a href="/guide/essentials/component-basics.html#dynamic-components">\n     Dynamic Components\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>',
  },
  {
    group: "SFC Syntax Specification",
    type: ["Single-File Component"],
    name: "Overview",
    body: '<p>\n A Vue Single-File Component (SFC), conventionally using the\n <code>\n  *.vue\n </code>\n file extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML.\n</p>\n<p>\n Each\n <code>\n  *.vue\n </code>\n file consists of three types of top-level language blocks:\n <code>\n  &lt;template&gt;\n </code>\n ,\n <code>\n  &lt;script&gt;\n </code>\n , and\n <code>\n  &lt;style&gt;\n </code>\n , and optionally additional custom blocks:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      msg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">&lt;custom1&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  This could be e.g. documentation for the component.</span></span>\n<span class="line"><span style="color:#A6ACCD;">&lt;/custom1&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n',
  },
  {
    group: "SFC Syntax Specification",
    type: ["Single-File Component"],
    name: "Language Blocks",
    body: '<h3 id="template" tabindex="-1">\n <code>\n  &lt;template&gt;\n </code>\n <a aria-hidden="true" class="header-anchor" href="#template">\n  #\n </a>\n</h3>\n<ul>\n <li>\n  <p>\n   Each\n   <code>\n    *.vue\n   </code>\n   file can contain at most one top-level\n   <code>\n    &lt;template&gt;\n   </code>\n   block at a time.\n  </p>\n </li>\n <li>\n  <p>\n   Contents will be extracted and passed on to\n   <code>\n    @vue/compiler-dom\n   </code>\n   , pre-compiled into JavaScript render functions, and attached to the exported component as its\n   <code>\n    render\n   </code>\n   option.\n  </p>\n </li>\n</ul>\n<h3 id="script" tabindex="-1">\n <code>\n  &lt;script&gt;\n </code>\n <a aria-hidden="true" class="header-anchor" href="#script">\n  #\n </a>\n</h3>\n<ul>\n <li>\n  <p>\n   Each\n   <code>\n    *.vue\n   </code>\n   file can contain at most one\n   <code>\n    &lt;script&gt;\n   </code>\n   block at a time (excluding\n   <a href="/api/sfc-script-setup.html">\n    <code>\n     &lt;script setup&gt;\n    </code>\n   </a>\n   ).\n  </p>\n </li>\n <li>\n  <p>\n   The script is executed as an ES Module.\n  </p>\n </li>\n <li>\n  <p>\n   The\n   <strong>\n    default export\n   </strong>\n   should be a Vue component options object, either as a plain object or as the return value of\n   <a href="/api/general.html#definecomponent">\n    defineComponent\n   </a>\n   .\n  </p>\n </li>\n</ul>\n<h3 id="script-setup" tabindex="-1">\n <code>\n  &lt;script setup&gt;\n </code>\n <a aria-hidden="true" class="header-anchor" href="#script-setup">\n  #\n </a>\n</h3>\n<ul>\n <li>\n  <p>\n   Each\n   <code>\n    *.vue\n   </code>\n   file can contain at most one\n   <code>\n    &lt;script setup&gt;\n   </code>\n   block at a time (excluding normal\n   <code>\n    &lt;script&gt;\n   </code>\n   ).\n  </p>\n </li>\n <li>\n  <p>\n   The script is pre-processed and used as the component\'s\n   <code>\n    setup()\n   </code>\n   function, which means it will be executed\n   <strong>\n    for each instance of the component\n   </strong>\n   . Top-level bindings in\n   <code>\n    &lt;script setup&gt;\n   </code>\n   are automatically exposed to the template. For more details, see\n   <a href="/api/sfc-script-setup.html">\n    dedicated documentation on\n    <code>\n     &lt;script setup&gt;\n    </code>\n   </a>\n   .\n  </p>\n </li>\n</ul>\n<h3 id="style" tabindex="-1">\n <code>\n  &lt;style&gt;\n </code>\n <a aria-hidden="true" class="header-anchor" href="#style">\n  #\n </a>\n</h3>\n<ul>\n <li>\n  <p>\n   A single\n   <code>\n    *.vue\n   </code>\n   file can contain multiple\n   <code>\n    &lt;style&gt;\n   </code>\n   tags.\n  </p>\n </li>\n <li>\n  <p>\n   A\n   <code>\n    &lt;style&gt;\n   </code>\n   tag can have\n   <code>\n    scoped\n   </code>\n   or\n   <code>\n    module\n   </code>\n   attributes (see\n   <a href="/api/sfc-css-features.html">\n    SFC Style Features\n   </a>\n   for more details) to help encapsulate the styles to the current component. Multiple\n   <code>\n    &lt;style&gt;\n   </code>\n   tags with different encapsulation modes can be mixed in the same component.\n  </p>\n </li>\n</ul>\n<h3 id="custom-blocks" tabindex="-1">\n Custom Blocks\n <a aria-hidden="true" class="header-anchor" href="#custom-blocks">\n  #\n </a>\n</h3>\n<p>\n Additional custom blocks can be included in a\n <code>\n  *.vue\n </code>\n file for any project-specific needs, for example a\n <code>\n  &lt;docs&gt;\n </code>\n block. Some real-world examples of custom blocks include:\n</p>\n<ul>\n <li>\n  <a href="https://gridsome.org/docs/querying-data/" rel="noreferrer" target="_blank">\n   Gridsome:\n   <code>\n    &lt;page-query&gt;\n   </code>\n  </a>\n </li>\n <li>\n  <a href="https://github.com/wheatjs/vite-plugin-vue-gql" rel="noreferrer" target="_blank">\n   vite-plugin-vue-gql:\n   <code>\n    &lt;gql&gt;\n   </code>\n  </a>\n </li>\n <li>\n  <a href="https://github.com/intlify/bundle-tools/tree/main/packages/vite-plugin-vue-i18n#i18n-custom-block" rel="noreferrer" target="_blank">\n   vue-i18n:\n   <code>\n    &lt;i18n&gt;\n   </code>\n  </a>\n </li>\n</ul>\n<p>\n Handling of Custom Blocks will depend on tooling - if you want to build your own custom block integrations, see\n <a href="/guide/scaling-up/tooling.html#sfc-custom-block-integrations">\n  relevant tooling section\n </a>\n for more details.\n</p>\n',
  },
  {
    group: "SFC Syntax Specification",
    type: ["Single-File Component"],
    name: "Automatic Name Inference",
    body: "<p>\n An SFC automatically infers the component's name from its\n <strong>\n  filename\n </strong>\n in the following cases:\n</p>\n<ul>\n <li>\n  Dev warning formatting\n </li>\n <li>\n  DevTools inspection\n </li>\n <li>\n  Recursive self-reference. E.g. a file named\n  <code>\n   FooBar.vue\n  </code>\n  can refer to itself as\n  <code>\n   &lt;FooBar/&gt;\n  </code>\n  in its template. This has lower priority than explicitly registered/imported components.\n </li>\n</ul>\n",
  },
  {
    group: "SFC Syntax Specification",
    type: ["Single-File Component"],
    name: "Pre-Processors",
    body: '<p>\n Blocks can declare pre-processor languages using the\n <code>\n  lang\n </code>\n attribute. The most common case is using TypeScript for the\n <code>\n  &lt;script&gt;\n </code>\n block:\n</p>\n<div class="language-vue-html">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  template\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  // use TypeScript</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n <code>\n  lang\n </code>\n can be applied to any block - for example we can use\n <code>\n  &lt;style&gt;\n </code>\n with\n <a href="https://sass-lang.com/" rel="noreferrer" target="_blank">\n  Sass\n </a>\n and\n <code>\n  &lt;template&gt;\n </code>\n with\n <a href="https://pugjs.org/api/getting-started.html" rel="noreferrer" target="_blank">\n  Pug\n </a>\n :\n</p>\n<div class="language-vue-html">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  template\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">pug</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">scss</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  $primary-color: #333;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  body {</span></span>\n<span class="line"><span style="color:#A6ACCD;">    color: $primary-color;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  }</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n Note that integration with various pre-processors may differ by toolchain. Check out the respective documentation for examples:\n</p>\n<ul>\n <li>\n  <a href="https://vitejs.dev/guide/features.html#css-pre-processors" rel="noreferrer" target="_blank">\n   Vite\n  </a>\n </li>\n <li>\n  <a href="https://cli.vuejs.org/guide/css.html#pre-processors" rel="noreferrer" target="_blank">\n   Vue CLI\n  </a>\n </li>\n <li>\n  <a href="https://vue-loader.vuejs.org/guide/pre-processors.html#using-pre-processors" rel="noreferrer" target="_blank">\n   webpack + vue-loader\n  </a>\n </li>\n</ul>\n',
  },
  {
    group: "SFC Syntax Specification",
    type: ["Single-File Component"],
    name: "Src Imports",
    body: '<p>\n If you prefer splitting up your\n <code>\n  *.vue\n </code>\n components into multiple files, you can use the\n <code>\n  src\n </code>\n attribute to import an external file for a language block:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">src</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">./template.html</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">src</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">./style.css</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">src</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">./script.js</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n Beware that\n <code>\n  src\n </code>\n imports follow the same path resolution rules as webpack module requests, which means:\n</p>\n<ul>\n <li>\n  Relative paths need to start with\n  <code>\n   ./\n  </code>\n </li>\n <li>\n  You can import resources from npm dependencies:\n </li>\n</ul>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- import a file from the installed "todomvc-app-css" npm package --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">src</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">todomvc-app-css/index.css</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;"> /</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n <code>\n  src\n </code>\n imports also work with custom blocks, e.g.:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">&lt;unit-test src="./unit-test.js"&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">&lt;/unit-test&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n',
  },
  {
    group: "SFC Syntax Specification",
    type: ["Single-File Component"],
    name: "Comments",
    body: "<p>\n Inside each block you shall use the comment syntax of the language being used (HTML, CSS, JavaScript, Pug, etc.). For top-level comments, use HTML comment syntax:\n <code>\n  &lt;!-- comment contents here --&gt;\n </code>\n</p>",
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "Basic Syntax",
    body: '<p>\n To opt-in to the syntax, add the\n <code>\n  setup\n </code>\n attribute to the\n <code>\n  &lt;script&gt;\n </code>\n block:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello script setup</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n The code inside is compiled as the content of the component\'s\n <code>\n  setup()\n </code>\n function. This means that unlike normal\n <code>\n  &lt;script&gt;\n </code>\n , which only executes once when the component is first imported, code inside\n <code>\n  &lt;script setup&gt;\n </code>\n will\n <strong>\n  execute every time an instance of the component is created\n </strong>\n .\n</p>\n<h3 id="top-level-bindings-are-exposed-to-template" tabindex="-1">\n Top-level bindings are exposed to template\n <a aria-hidden="true" class="header-anchor" href="#top-level-bindings-are-exposed-to-template">\n  #\n </a>\n</h3>\n<p>\n When using\n <code>\n  &lt;script setup&gt;\n </code>\n , any top-level bindings (including variables, function declarations, and imports) declared inside\n <code>\n  &lt;script setup&gt;\n </code>\n are directly usable in the template:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">// variable</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">Hello!</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// functions</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n Imports are exposed in the same fashion. This means you can directly use an imported helper function in template expressions without having to expose it via the\n <code>\n  methods\n </code>\n option:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">capitalize</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./helpers</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">capitalize</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "Reactivity",
    body: '<p>\n Reactive state needs to be explicitly created using\n <a href="./reactivity-core.html">\n  Reactivity APIs\n </a>\n . Similar to values returned from a\n <code>\n  setup()\n </code>\n function, refs are automatically unwrapped when referenced in templates:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "Using Components",
    body: '<p>\n Values in the scope of\n <code>\n  &lt;script setup&gt;\n </code>\n can also be used directly as custom component tag names:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> MyComponent </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./MyComponent.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n Think of\n <code>\n  MyComponent\n </code>\n as being referenced as a variable. If you have used JSX, the mental model is similar here. The kebab-case equivalent\n <code>\n  &lt;my-component&gt;\n </code>\n also works in the template - however PascalCase component tags are strongly recommended for consistency. It also helps differentiating from native custom elements.\n</p>\n<h3 id="dynamic-components" tabindex="-1">\n Dynamic Components\n <a aria-hidden="true" class="header-anchor" href="#dynamic-components">\n  #\n </a>\n</h3>\n<p>\n Since components are referenced as variables instead of registered under string keys, we should use dynamic\n <code>\n  :is\n </code>\n binding when using dynamic components inside\n <code>\n  &lt;script setup&gt;\n </code>\n :\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Foo </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Foo.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Bar </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Bar.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">someCondition</span><span style="color:#89DDFF;"> ? </span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;"> : </span><span style="color:#A6ACCD;">Bar</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n Note how the components can be used as variables in a ternary expression.\n</p>\n<h3 id="recursive-components" tabindex="-1">\n Recursive Components\n <a aria-hidden="true" class="header-anchor" href="#recursive-components">\n  #\n </a>\n</h3>\n<p>\n An SFC can implicitly refer to itself via its filename. E.g. a file named\n <code>\n  FooBar.vue\n </code>\n can refer to itself as\n <code>\n  &lt;FooBar/&gt;\n </code>\n in its template.\n</p>\n<p>\n Note this has lower priority than imported components. If you have a named import that conflicts with the component\'s inferred name, you can alias the import:\n</p>\n<div class="language-js">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  js\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">FooBar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">FooBarChild</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./components</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span></code></pre>\n</div>\n<h3 id="namespaced-components" tabindex="-1">\n Namespaced Components\n <a aria-hidden="true" class="header-anchor" href="#namespaced-components">\n  #\n </a>\n</h3>\n<p>\n You can use component tags with dots like\n <code>\n  &lt;Foo.Bar&gt;\n </code>\n to refer to components nested under object properties. This is useful when you import multiple components from a single file:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> Form </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./form-components</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Input</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Label</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">label</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Label</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Input</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "Using Custom Directives",
    body: '<p>\n Globally registered custom directives just work as normal. Local custom directives don\'t need to be explicitly registered with\n <code>\n  &lt;script setup&gt;\n </code>\n , but they must follow the naming scheme\n <code>\n  vNameOfDirective\n </code>\n :\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vMyDirective </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">beforeMount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// do something with the element</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-my-directive</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This is a Heading</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n If you\'re importing a directive from elsewhere, it can be renamed to fit the required naming scheme:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myDirective</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vMyDirective</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./MyDirective.js</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "defineProps() & defineEmits()",
    body: '<p>\n To declare options like\n <code>\n  props\n </code>\n and\n <code>\n  emits\n </code>\n with full type inference support, we can use the\n <code>\n  defineProps\n </code>\n and\n <code>\n  defineEmits\n </code>\n APIs, which are automatically available inside\n <code>\n  &lt;script setup&gt;\n </code>\n :\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> emit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineEmits</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">change</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">delete</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">])</span></span>\n<span class="line"><span style="color:#676E95;">// setup code</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<ul>\n <li>\n  <p>\n   <code>\n    defineProps\n   </code>\n   and\n   <code>\n    defineEmits\n   </code>\n   are\n   <strong>\n    compiler macros\n   </strong>\n   only usable inside\n   <code>\n    &lt;script setup&gt;\n   </code>\n   . They do not need to be imported, and are compiled away when\n   <code>\n    &lt;script setup&gt;\n   </code>\n   is processed.\n  </p>\n </li>\n <li>\n  <p>\n   <code>\n    defineProps\n   </code>\n   accepts the same value as the\n   <code>\n    props\n   </code>\n   option, while\n   <code>\n    defineEmits\n   </code>\n   accepts the same value as the\n   <code>\n    emits\n   </code>\n   option.\n  </p>\n </li>\n <li>\n  <p>\n   <code>\n    defineProps\n   </code>\n   and\n   <code>\n    defineEmits\n   </code>\n   provide proper type inference based on the options passed.\n  </p>\n </li>\n <li>\n  <p>\n   The options passed to\n   <code>\n    defineProps\n   </code>\n   and\n   <code>\n    defineEmits\n   </code>\n   will be hoisted out of setup into module scope. Therefore, the options cannot reference local variables declared in setup scope. Doing so will result in a compile error. However, it\n   <em>\n    can\n   </em>\n   reference imported bindings since they are in the module scope as well.\n  </p>\n </li>\n</ul>\n<p>\n If you are using TypeScript, it is also possible to\n <a href="#typescript-only-features">\n  declare props and emits using pure type annotations\n </a>\n .\n</p>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "defineExpose()",
    body: '<p>\n Components using\n <code>\n  &lt;script setup&gt;\n </code>\n are\n <strong>\n  closed by default\n </strong>\n - i.e. the public instance of the component, which is retrieved via template refs or\n <code>\n  $parent\n </code>\n chains, will\n <strong>\n  not\n </strong>\n expose any of the bindings declared inside\n <code>\n  &lt;script setup&gt;\n </code>\n .\n</p>\n<p>\n To explicitly expose properties in a\n <code>\n  &lt;script setup&gt;\n </code>\n component, use the\n <code>\n  defineExpose\n </code>\n compiler macro:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">defineExpose</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  a</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  b</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n When a parent gets an instance of this component via template refs, the retrieved instance will be of the shape\n <code>\n  { a: number, b: number }\n </code>\n (refs are automatically unwrapped just like on normal instances).\n</p>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "useSlots() & useAttrs()",
    body: '<p>\n Usage of\n <code>\n  slots\n </code>\n and\n <code>\n  attrs\n </code>\n inside\n <code>\n  &lt;script setup&gt;\n </code>\n should be relatively rare, since you can access them directly as\n <code>\n  $slots\n </code>\n and\n <code>\n  $attrs\n </code>\n in the template. In the rare case where you do need them, use the\n <code>\n  useSlots\n </code>\n and\n <code>\n  useAttrs\n </code>\n helpers respectively:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useSlots</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useAttrs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> slots </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSlots</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> attrs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useAttrs</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n <code>\n  useSlots\n </code>\n and\n <code>\n  useAttrs\n </code>\n are actual runtime functions that return the equivalent of\n <code>\n  setupContext.slots\n </code>\n and\n <code>\n  setupContext.attrs\n </code>\n . They can be used in normal composition API functions as well.\n</p>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "Usage alongside normal <script>",
    body: '<p>\n <code>\n  &lt;script setup&gt;\n </code>\n can be used alongside normal\n <code>\n  &lt;script&gt;\n </code>\n . A normal\n <code>\n  &lt;script&gt;\n </code>\n may be needed in cases where we need to:\n</p>\n<ul>\n <li>\n  Declare options that cannot be expressed in\n  <code>\n   &lt;script setup&gt;\n  </code>\n  , for example\n  <code>\n   inheritAttrs\n  </code>\n  or custom options enabled via plugins.\n </li>\n <li>\n  Declaring named exports.\n </li>\n <li>\n  Run side effects or create objects that should only execute once.\n </li>\n</ul>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">// normal &lt;script&gt;, executed in module scope (only once)</span></span>\n<span class="line"><span style="color:#82AAFF;">runSideEffectOnce</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// declare additional options</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inheritAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">customOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">// executed in setup() scope (for each instance)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n Support for combining\n <code>\n  &lt;script setup&gt;\n </code>\n and\n <code>\n  &lt;script&gt;\n </code>\n in the same component is limited to the scenarios described above. Specifically:\n</p>\n<ul>\n <li>\n  Do\n  <strong>\n   NOT\n  </strong>\n  use a separate\n  <code>\n   &lt;script&gt;\n  </code>\n  section for options that can already be defined using\n  <code>\n   &lt;script setup&gt;\n  </code>\n  , such as\n  <code>\n   props\n  </code>\n  and\n  <code>\n   emits\n  </code>\n  .\n </li>\n <li>\n  Variables created inside\n  <code>\n   &lt;script setup&gt;\n  </code>\n  are not added as properties to the component instance, making them inaccessible from the Options API. Mixing APIs in this way is strongly discouraged.\n </li>\n</ul>\n<p>\n If you find yourself in one of the scenarios that is not supported then you should consider switching to an explicit\n <a href="/api/composition-api-setup.html">\n  <code>\n   setup()\n  </code>\n </a>\n function, instead of using\n <code>\n  &lt;script setup&gt;\n </code>\n .\n</p>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "Top-level await",
    body: '<p>\n Top-level\n <code>\n  await\n </code>\n can be used inside\n <code>\n  &lt;script setup&gt;\n </code>\n . The resulting code will be compiled as\n <code>\n  async setup()\n </code>\n :\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> post </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">/api/post/1</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#A6ACCD;">())</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n In addition, the awaited expression will be automatically compiled in a format that preserves the current component instance context after the\n <code>\n  await\n </code>\n .\n</p>\n<div class="warning custom-block">\n <p class="custom-block-title">\n  Note\n </p>\n <p>\n  <code>\n   async setup()\n  </code>\n  must be used in combination with\n  <code>\n   Suspense\n  </code>\n  , which is currently still an experimental feature. We plan to finalize and document it in a future release - but if you are curious now, you can refer to its\n  <a href="https://github.com/vuejs/core/blob/main/packages/runtime-core/__tests__/components/Suspense.spec.ts" rel="noreferrer" target="_blank">\n   tests\n  </a>\n  to see how it works.\n </p>\n</div>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "TypeScript-only Features",
    body: '<h3 id="type-only-props-emit-declarations" tabindex="-1">\n Type-only props/emit declarations\n <a aria-hidden="true" class="header-anchor" href="#type-only-props-emit-declarations">\n  #\n </a>\n</h3>\n<p>\n Props and emits can also be declared using pure-type syntax by passing a literal type argument to\n <code>\n  defineProps\n </code>\n or\n <code>\n  defineEmits\n </code>\n :\n</p>\n<div class="language-ts">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  ts\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> emit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineEmits</span><span style="color:#89DDFF;">&lt;{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">change</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">update</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre>\n</div>\n<ul>\n <li>\n  <p>\n   <code>\n    defineProps\n   </code>\n   or\n   <code>\n    defineEmits\n   </code>\n   can only use either runtime declaration OR type declaration. Using both at the same time will result in a compile error.\n  </p>\n </li>\n <li>\n  <p>\n   When using type declaration, the equivalent runtime declaration is automatically generated from static analysis to remove the need for double declaration and still ensure correct runtime behavior.\n  </p>\n  <ul>\n   <li>\n    <p>\n     In dev mode, the compiler will try to infer corresponding runtime validation from the types. For example here\n     <code>\n      foo: String\n     </code>\n     is inferred from the\n     <code>\n      foo: string\n     </code>\n     type. If the type is a reference to an imported type, the inferred result will be\n     <code>\n      foo: null\n     </code>\n     (equal to\n     <code>\n      any\n     </code>\n     type) since the compiler does not have information of external files.\n    </p>\n   </li>\n   <li>\n    <p>\n     In prod mode, the compiler will generate the array format declaration to reduce bundle size (the props here will be compiled into\n     <code>\n      [\'foo\', \'bar\']\n     </code>\n     )\n    </p>\n   </li>\n   <li>\n    <p>\n     The emitted code is still TypeScript with valid typing, which can be further processed by other tools.\n    </p>\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   As of now, the type declaration argument must be one of the following to ensure correct static analysis:\n  </p>\n  <ul>\n   <li>\n    A type literal\n   </li>\n   <li>\n    A reference to an interface or a type literal in the same file\n   </li>\n  </ul>\n  <p>\n   Currently complex types and type imports from other files are not supported. It is possible to support type imports in the future.\n  </p>\n </li>\n</ul>\n<h3 id="default-props-values-when-using-type-declaration" tabindex="-1">\n Default props values when using type declaration\n <a aria-hidden="true" class="header-anchor" href="#default-props-values-when-using-type-declaration">\n  #\n </a>\n</h3>\n<p>\n One drawback of the type-only\n <code>\n  defineProps\n </code>\n declaration is that it doesn\'t have a way to provide default values for the props. To resolve this problem, a\n <code>\n  withDefaults\n </code>\n compiler macro is also provided:\n</p>\n<div class="language-ts">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  ts\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Props</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">labels</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">withDefaults</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Props</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">labels</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">one</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">two</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n This will be compiled to equivalent runtime props\n <code>\n  default\n </code>\n options. In addition, the\n <code>\n  withDefaults\n </code>\n helper provides type checks for the default values, and ensures the returned\n <code>\n  props\n </code>\n type has the optional flags removed for properties that do have default values declared.\n</p>\n',
  },
  {
    group: "<script setup>",
    type: ["Single-File Component"],
    name: "Restrictions",
    body: "<p>\n Due to the difference in module execution semantics, code inside\n <code>\n  &lt;script setup&gt;\n </code>\n relies on the context of an SFC. When moved into external\n <code>\n  .js\n </code>\n or\n <code>\n  .ts\n </code>\n files, it may lead to confusion for both developers and tools. Therefore,\n <strong>\n  <code>\n   &lt;script setup&gt;\n  </code>\n </strong>\n cannot be used with the\n <code>\n  src\n </code>\n attribute.\n</p>",
  },
  {
    group: "SFC CSS Features",
    type: ["Single-File Component"],
    name: "Scoped CSS",
    body: '<p>\n When a\n <code>\n  &lt;style&gt;\n </code>\n tag has the\n <code>\n  scoped\n </code>\n attribute, its CSS will apply to elements of the current component only. This is similar to the style encapsulation found in Shadow DOM. It comes with some caveats, but doesn\'t require any polyfills. It is achieved by using PostCSS to transform the following:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hi</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n Into the following:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">example</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">data-v-f3f3eg9</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data-v-f3f3eg9</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hi</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<h3 id="child-component-root-elements" tabindex="-1">\n Child Component Root Elements\n <a aria-hidden="true" class="header-anchor" href="#child-component-root-elements">\n  #\n </a>\n</h3>\n<p>\n With\n <code>\n  scoped\n </code>\n , the parent component\'s styles will not leak into child components. However, a child component\'s root node will be affected by both the parent\'s scoped CSS and the child\'s scoped CSS. This is by design so that the parent can style the child root element for layout purposes.\n</p>\n<h3 id="deep-selectors" tabindex="-1">\n Deep Selectors\n <a aria-hidden="true" class="header-anchor" href="#deep-selectors">\n  #\n </a>\n</h3>\n<p>\n If you want a selector in\n <code>\n  scoped\n </code>\n styles to be "deep", i.e. affecting child components, you can use the\n <code>\n  :deep()\n </code>\n pseudo-class:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> :deep(</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">b</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n The above will be compiled into:\n</p>\n<div class="language-css">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  css\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">data-v-f3f3eg9</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">b</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n</div>\n<div class="tip custom-block">\n <p class="custom-block-title">\n  TIP\n </p>\n <p>\n  DOM content created with\n  <code>\n   v-html\n  </code>\n  are not affected by scoped styles, but you can still style them using deep selectors.\n </p>\n</div>\n<h3 id="slotted-selectors" tabindex="-1">\n Slotted Selectors\n <a aria-hidden="true" class="header-anchor" href="#slotted-selectors">\n  #\n </a>\n</h3>\n<p>\n By default, scoped styles do not affect contents rendered by\n <code>\n  &lt;slot/&gt;\n </code>\n , as they are considered to be owned by the parent component passing them in. To explicitly target slot content, use the\n <code>\n  :slotted\n </code>\n pseudo-class:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">:slotted(</span><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<h3 id="global-selectors" tabindex="-1">\n Global Selectors\n <a aria-hidden="true" class="header-anchor" href="#global-selectors">\n  #\n </a>\n</h3>\n<p>\n If you want just one rule to apply globally, you can use the\n <code>\n  :global\n </code>\n pseudo-class rather than creating another\n <code>\n  &lt;style&gt;\n </code>\n (see below):\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">:global(</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">red</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<h3 id="mixing-local-and-global-styles" tabindex="-1">\n Mixing Local and Global Styles\n <a aria-hidden="true" class="header-anchor" href="#mixing-local-and-global-styles">\n  #\n </a>\n</h3>\n<p>\n You can also include both scoped and non-scoped styles in the same component:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">/* global styles */</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;">/* local styles */</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<h3 id="scoped-style-tips" tabindex="-1">\n Scoped Style Tips\n <a aria-hidden="true" class="header-anchor" href="#scoped-style-tips">\n  #\n </a>\n</h3>\n<ul>\n <li>\n  <p>\n   <strong>\n    Scoped styles do not eliminate the need for classes\n   </strong>\n   . Due to the way browsers render various CSS selectors,\n   <code>\n    p { color: red }\n   </code>\n   will be many times slower when scoped (i.e. when combined with an attribute selector). If you use classes or ids instead, such as in\n   <code>\n    .example { color: red }\n   </code>\n   , then you virtually eliminate that performance hit.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Be careful with descendant selectors in recursive components!\n   </strong>\n   For a CSS rule with the selector\n   <code>\n    .a .b\n   </code>\n   , if the element that matches\n   <code>\n    .a\n   </code>\n   contains a recursive child component, then all\n   <code>\n    .b\n   </code>\n   in that child component will be matched by the rule.\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "SFC CSS Features",
    type: ["Single-File Component"],
    name: "CSS Modules",
    body: '<p>\n A\n <code>\n  &lt;style module&gt;\n </code>\n tag is compiled as\n <a href="https://github.com/css-modules/css-modules" rel="noreferrer" target="_blank">\n  CSS Modules\n </a>\n and exposes the resulting CSS classes to the component as an object under the key of\n <code>\n  $style\n </code>\n :\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">$style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">red</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This should be red</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">red</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n The resulting classes are hashed to avoid collision, achieving the same effect of scoping the CSS to the current component only.\n</p>\n<p>\n Refer to the\n <a href="https://github.com/css-modules/css-modules" rel="noreferrer" target="_blank">\n  CSS Modules spec\n </a>\n for more details such as\n <a href="https://github.com/css-modules/css-modules#exceptions" rel="noreferrer" target="_blank">\n  global exceptions\n </a>\n and\n <a href="https://github.com/css-modules/css-modules#composition" rel="noreferrer" target="_blank">\n  composition\n </a>\n .\n</p>\n<h3 id="custom-inject-name" tabindex="-1">\n Custom Inject Name\n <a aria-hidden="true" class="header-anchor" href="#custom-inject-name">\n  #\n </a>\n</h3>\n<p>\n You can customize the property key of the injected classes object by giving the\n <code>\n  module\n </code>\n attribute a value:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#A6ACCD;">classes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">red</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">red</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">classes</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">red</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<h3 id="usage-with-composition-api" tabindex="-1">\n Usage with Composition API\n <a aria-hidden="true" class="header-anchor" href="#usage-with-composition-api">\n  #\n </a>\n</h3>\n<p>\n The injected classes can be accessed in\n <code>\n  setup()\n </code>\n and\n <code>\n  &lt;script setup&gt;\n </code>\n via the\n <code>\n  useCssModule\n </code>\n API. For\n <code>\n  &lt;style module&gt;\n </code>\n blocks with custom injection names,\n <code>\n  useCssModule\n </code>\n accepts the matching\n <code>\n  module\n </code>\n attribute value as the first argument:\n</p>\n<div class="language-js">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  js\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useCssModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// inside setup() scope...</span></span>\n<span class="line"><span style="color:#676E95;">// default, returns classes for &lt;style module&gt;</span></span>\n<span class="line"><span style="color:#82AAFF;">useCssModule</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// named, returns classes for &lt;style module="classes"&gt;</span></span>\n<span class="line"><span style="color:#82AAFF;">useCssModule</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">classes</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n</div>\n',
  },
  {
    group: "SFC CSS Features",
    type: ["Single-File Component"],
    name: "v-bind() in CSS",
    body: '<p>\n SFC\n <code>\n  &lt;style&gt;\n </code>\n tags support linking CSS values to dynamic component state using the\n <code>\n  v-bind\n </code>\n CSS function:\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      color</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> v-bind(color)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n The syntax works with\n <a href="./sfc-script-setup.html">\n  <code>\n   &lt;script setup&gt;\n  </code>\n </a>\n , and supports JavaScript expressions (must be wrapped in quotes):\n</p>\n<div class="language-vue">\n <button class="copy" title="Copy Code">\n </button>\n <span class="lang">\n  vue\n </span>\n <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> theme </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> v-bind(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">theme.color</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n</div>\n<p>\n The actual value will be compiled into a hashed CSS custom property, so the CSS is still static. The custom property will be applied to the component\'s root element via inline styles and reactively updated if the source value changes.\n</p>',
  },
  {
    group: "Render Function APIs",
    type: ["Advanced API"],
    name: "h()",
    body: '<p>\n Creates virtual DOM nodes (vnodes).\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// full signature</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Children</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slots</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// omitting props</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Children</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slot</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Children</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Children</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Children</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slots</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <blockquote>\n   <p>\n    Types are simplified for readability.\n   </p>\n  </blockquote>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   The first argument can either be a string (for native elements) or a Vue component definition. The second argument is the props to be passed, and the third argument is the children.\n  </p>\n  <p>\n   When creating a component vnode, the children must be passed as slot functions. A single slot function can be passed if the component expects only the default slot. Otherwise, the slots must be passed as an object of slot functions.\n  </p>\n  <p>\n   For convenience, the props argument can be omitted when the children is not a slots object.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Creating native elements:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">h</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// all arguments except the type are optional</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// both attributes and properties can be used in props</span></span>\n<span class="line"><span style="color:#676E95;">// Vue automatically picks the right way to assign it</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">innerHTML</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// class and style have the same object / array</span></span>\n<span class="line"><span style="color:#676E95;">// value support like in templates</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// event listeners should be passed as onXxx</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onClick</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// children can be a string</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// props can be omitted when there are no props</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// children array can contain mixed vnodes and strings</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)])</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Creating components:\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Foo </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">./Foo.vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// passing props</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(Foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// equivalent of some-prop="hello"</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">someProp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// equivalent of @update="() =&gt; {}"</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">onUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// passing single default slot</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(Foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">default slot</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// passing named slots</span></span>\n<span class="line"><span style="color:#676E95;">// notice the `null` is required to avoid</span></span>\n<span class="line"><span style="color:#676E95;">// slots object being treated as props</span></span>\n<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(MyComponent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">default slot</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [</span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">one</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">two</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/render-function.html#creating-vnodes">\n    Guide - Render Functions - Creating VNodes\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Render Function APIs",
    type: ["Advanced API"],
    name: "mergeProps()",
    body: '<p>\n Merge multiple props objects with special handling for certain props.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mergeProps</span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <code>\n    mergeProps()\n   </code>\n   supports merging multiple props objects with special handling for the following props:\n  </p>\n  <ul>\n   <li>\n    <code>\n     class\n    </code>\n   </li>\n   <li>\n    <code>\n     style\n    </code>\n   </li>\n   <li>\n    <code>\n     onXxx\n    </code>\n    event listeners - multiple listeners with the same name will be merged into an array.\n   </li>\n  </ul>\n  <p>\n   If you do not need the merge behavior and want simple overwrites, native object spread can be used instead.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mergeProps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> one </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onClick</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> handlerA</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> two </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onClick</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> handlerB</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> merged </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mergeProps</span><span style="color:#A6ACCD;">(one</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> two)</span></span>\n<span class="line"><span style="color:#676E95;">/**</span></span>\n<span class="line"><span style="color:#676E95;"> {</span></span>\n<span class="line"><span style="color:#676E95;">   class: \'foo bar\',</span></span>\n<span class="line"><span style="color:#676E95;">   onClick: [handlerA, handlerB]</span></span>\n<span class="line"><span style="color:#676E95;"> }</span></span>\n<span class="line"><span style="color:#676E95;"> */</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Render Function APIs",
    type: ["Advanced API"],
    name: "cloneVNode()",
    body: '<p>\n Clones a vnode.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cloneVNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vnode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">extraProps</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Returns a cloned vnode, optionally with extra props to merge with the original.\n  </p>\n  <p>\n   Vnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.\n  </p>\n  <p>\n   Vnodes have special internal properties, so cloning them is not as simple as an object spread.\n   <code>\n    cloneVNode()\n   </code>\n   handles most of the internal logic.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cloneVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> original </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> cloned </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cloneVNode</span><span style="color:#A6ACCD;">(original</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Render Function APIs",
    type: ["Advanced API"],
    name: "isVNode()",
    body: '<p>\n Checks if a value is a vnode.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isVNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Render Function APIs",
    type: ["Advanced API"],
    name: "resolveComponent()",
    body: '<p>\n For manually resolving a registered component by name.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resolveComponent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <strong>\n    Note: you do not need this if you can import the component directly.\n   </strong>\n  </p>\n  <p>\n   <code>\n    resolveComponent()\n   </code>\n   must be called inside\n   <span class="composition-api">\n    either\n    <code>\n     setup()\n    </code>\n    or\n   </span>\n   the render function in order to resolve from the correct component context.\n  </p>\n  <p>\n   If the component is not found, a runtime warning will be emitted, and the name string is returned.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="composition-api">\n   <div class="language-js">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     js\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> h</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> resolveComponent </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ButtonCounter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">resolveComponent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">ButtonCounter</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">h</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ButtonCounter</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n   </div>\n  </div>\n  <div class="options-api">\n   <div class="language-js">\n    <button class="copy" title="Copy Code">\n    </button>\n    <span class="lang">\n     js\n    </span>\n    <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> h</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> resolveComponent </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ButtonCounter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">resolveComponent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">ButtonCounter</span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">h</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ButtonCounter</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n   </div>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/render-function.html#components">\n    Guide - Render Functions - Components\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Render Function APIs",
    type: ["Advanced API"],
    name: "resolveDirective()",
    body: '<p>\n For manually resolving a registered directive by name.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resolveDirective</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Directive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   <strong>\n    Note: you do not need this if you can import the component directly.\n   </strong>\n  </p>\n  <p>\n   <code>\n    resolveDirective()\n   </code>\n   must be called inside\n   <span class="composition-api">\n    either\n    <code>\n     setup()\n    </code>\n    or\n   </span>\n   the render function in order to resolve from the correct component context.\n  </p>\n  <p>\n   If the directive is not found, a runtime warning will be emitted, and the function returns\n   <code>\n    undefined\n   </code>\n   .\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/render-function.html#custom-directives">\n    Guide - Render Functions - Custom Directives\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Render Function APIs",
    type: ["Advanced API"],
    name: "withDirectives()",
    body: '<p>\n For adding custom directives to vnodes.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">withDirectives</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">vnode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">directives</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DirectiveArguments</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// [Directive, value, argument, modifiers]</span></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DirectiveArguments</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">Directive</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">Directive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">Directive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">Directive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DirectiveModifiers</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Details\n   </strong>\n  </p>\n  <p>\n   Wraps an existing vnode with custom directives. The second argument is an array of custom directives. Each custom directive is also represented as an array in the form of\n   <code>\n    [Directive, value, argument, modifiers]\n   </code>\n   . Tailing elements of the array can be omitted if not needed.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withDirectives</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// a custom directive</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">updated</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;">/* ... */</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// &lt;div v-pin:top.animate="200"&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vnode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">withDirectives</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span></span>\n<span class="line"><span style="color:#A6ACCD;">  [pin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">top</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">animate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">])</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/render-function.html#custom-directives">\n    Guide - Render Functions - Custom Directives\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Render Function APIs",
    type: ["Advanced API"],
    name: "withModifiers()",
    body: '<p>\n For adding built-in\n <a href="/guide/essentials/event-handling.html#event-modifiers">\n  <code>\n   v-on\n  </code>\n  modifiers\n </a>\n to an event handler function.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">withModifiers</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">modifiers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withModifiers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vnode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// equivalent of v-on.stop.prevent</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onClick</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">withModifiers</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">stop</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">prevent</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;">])</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/extras/render-function.html#event-modifiers">\n    Guide - Render Functions - Event Modifiers\n   </a>\n  </p>\n </li>\n</ul>',
  },
  {
    group: "Server-Side Rendering API",
    type: ["Advanced API"],
    name: "renderToString()",
    body: '<ul>\n <li>\n  <p>\n   <strong>\n    Exported from\n    <code>\n     vue/server-renderer\n    </code>\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderToString</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SSRContext</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createSSRApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">renderToString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue/server-renderer</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createSSRApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;div&gt;{{ msg }}&lt;/div&gt;</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">renderToString</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <h3 id="ssr-context" tabindex="-1">\n   SSR Context\n   <a aria-hidden="true" class="header-anchor" href="#ssr-context">\n    #\n   </a>\n  </h3>\n  <p>\n   You can pass an optional context object, which can be used to record additional data during the render, for example\n   <a href="/guide/scaling-up/ssr.html#teleports">\n    accessing content of Teleports\n   </a>\n   :\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ctx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> html </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderToString</span><span style="color:#A6ACCD;">(app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">teleports) </span><span style="color:#676E95;">// { \'#teleported\': \'teleported content\' }</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Most other SSR APIs on this page also optionally accept a context object. The context object can be accessed in component code via the\n   <a href="#usessrcontext">\n    useSSRContext\n   </a>\n   helper.\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/scaling-up/ssr.html">\n    Guide - Server-Side Rendering\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Server-Side Rendering API",
    type: ["Advanced API"],
    name: "renderToNodeStream()",
    body: '<p>\n Renders input as a\n <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable" rel="noreferrer" target="_blank">\n  Node.js Readable stream\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Exported from\n    <code>\n     vue/server-renderer\n    </code>\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderToNodeStream</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SSRContext</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Readable</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// inside a Node.js http handler</span></span>\n<span class="line"><span style="color:#82AAFF;">renderToNodeStream</span><span style="color:#A6ACCD;">(app)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipe</span><span style="color:#A6ACCD;">(res)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="tip custom-block">\n   <p class="custom-block-title">\n    Note\n   </p>\n   <p>\n    This method is not supported in the ESM build of\n    <code>\n     vue/server-renderer\n    </code>\n    , which is decoupled from Node.js environments. Use\n    <a href="#pipetonodewritable">\n     <code>\n      pipeToNodeWritable\n     </code>\n    </a>\n    instead.\n   </p>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Server-Side Rendering API",
    type: ["Advanced API"],
    name: "pipeToNodeWritable()",
    body: '<p>\n Render and pipe to an existing\n <a href="https://nodejs.org/api/stream.html#stream_writable_streams" rel="noreferrer" target="_blank">\n  Node.js Writable stream\n </a>\n instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Exported from\n    <code>\n     vue/server-renderer\n    </code>\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pipeToNodeWritable</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SSRContext</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Writable</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// inside a Node.js http handler</span></span>\n<span class="line"><span style="color:#82AAFF;">pipeToNodeWritable</span><span style="color:#A6ACCD;">(app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> res)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Server-Side Rendering API",
    type: ["Advanced API"],
    name: "renderToWebStream()",
    body: '<p>\n Renders input as a\n <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API" rel="noreferrer" target="_blank">\n  Web ReadableStream\n </a>\n .\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Exported from\n    <code>\n     vue/server-renderer\n    </code>\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderToWebStream</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SSRContext</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReadableStream</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// inside an environment with ReadableStream support</span></span>\n<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Response</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">renderToWebStream</span><span style="color:#A6ACCD;">(app))</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="tip custom-block">\n   <p class="custom-block-title">\n    Note\n   </p>\n   <p>\n    In environments that do not expose\n    <code>\n     ReadableStream\n    </code>\n    constructor in the global scope,\n    <a href="#pipetowebwritable">\n     <code>\n      pipeToWebWritable()\n     </code>\n    </a>\n    should be used instead.\n   </p>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Server-Side Rendering API",
    type: ["Advanced API"],
    name: "pipeToWebWritable()",
    body: '<p>\n Render and pipe to an existing\n <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStream" rel="noreferrer" target="_blank">\n  Web WritableStream\n </a>\n instance.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Exported from\n    <code>\n     vue/server-renderer\n    </code>\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pipeToWebWritable</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SSRContext</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WritableStream</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   This is typically used in combination with\n   <a href="https://developer.mozilla.org/en-US/docs/Web/API/TransformStream" rel="noreferrer" target="_blank">\n    <code>\n     TransformStream\n    </code>\n   </a>\n   :\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// TransformStream is available in environments such as CloudFlare workers.</span></span>\n<span class="line"><span style="color:#676E95;">// in Node.js, TransformStream needs to be explicitly imported from \'stream/web\'</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> readable</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> writable </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TransformStream</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#82AAFF;">pipeToWebWritable</span><span style="color:#A6ACCD;">(app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> writable)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Response</span><span style="color:#A6ACCD;">(readable)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Server-Side Rendering API",
    type: ["Advanced API"],
    name: "renderToSimpleStream()",
    body: '<p>\n Renders input in streaming mode using a simple readable interface.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Exported from\n    <code>\n     vue/server-renderer\n    </code>\n   </strong>\n  </p>\n </li>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderToSimpleStream</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SSRContext</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleReadable</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleReadable</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleReadable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">destroy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">renderToSimpleStream</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  app</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">chunk</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">chunk</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// done</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">console</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">render complete: </span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">}`</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">chunk</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">destroy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// error encountered</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Server-Side Rendering API",
    type: ["Advanced API"],
    name: "useSSRContext()",
    body: '<p>\n A runtime API used to retrieve the context object passed to\n <code>\n  renderToString()\n </code>\n or other server render APIs.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSSRContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;&gt;():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   The retrieved context can be used to attach information that is needed for rendering the final HTML (e.g. head metadata).\n  </p>\n  <div class="language-vue">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    vue\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useSSRContext</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// make sure to only call it during SSR</span></span>\n<span class="line"><span style="color:#676E95;">// https://vitejs.dev/guide/ssr.html#conditional-logic</span></span>\n<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SSR) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ctx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useSSRContext</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...attach properties to the context</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>',
  },
  {
    group: "Utility Types",
    type: ["Advanced API"],
    name: "PropType<T>",
    body: '<p>\n Used to annotate a prop with more advanced types when using runtime props declarations.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PropType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Book</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">author</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">year</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">book</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// provide more specific type to `Object`</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Object </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Book</span><span style="color:#89DDFF;">&gt;,</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/typescript/options-api.html#typing-component-props">\n    Guide - Typing Component Props\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Utility Types",
    type: ["Advanced API"],
    name: "ComponentCustomProperties",
    body: '<p>\n Used to augment the component instance type to support custom global properties.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> axios </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ComponentCustomProperties</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    $http</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">axios</span></span>\n<span class="line"><span style="color:#F07178;">    $translate</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="tip custom-block">\n   <p class="custom-block-title">\n    TIP\n   </p>\n   <p>\n    Augmentations must be placed in a module\n    <code>\n     .ts\n    </code>\n    or\n    <code>\n     .d.ts\n    </code>\n    file. See\n    <a href="/guide/typescript/options-api.html#augmenting-global-properties">\n     Type Augmentation Placement\n    </a>\n    for more details.\n   </p>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/typescript/options-api.html#augmenting-global-properties">\n    Guide - Augmenting Global Properties\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Utility Types",
    type: ["Advanced API"],
    name: "ComponentCustomOptions",
    body: '<p>\n Used to augment the component options type to support custom options.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Route</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ComponentCustomOptions</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    beforeRouteEnter</span><span style="color:#89DDFF;">?(</span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">from</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="tip custom-block">\n   <p class="custom-block-title">\n    TIP\n   </p>\n   <p>\n    Augmentations must be placed in a module\n    <code>\n     .ts\n    </code>\n    or\n    <code>\n     .d.ts\n    </code>\n    file. See\n    <a href="/guide/typescript/options-api.html#augmenting-global-properties">\n     Type Augmentation Placement\n    </a>\n    for more details.\n   </p>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    See also:\n   </strong>\n   <a href="/guide/typescript/options-api.html#augmenting-custom-options">\n    Guide - Augmenting Custom Options\n   </a>\n  </p>\n </li>\n</ul>\n',
  },
  {
    group: "Utility Types",
    type: ["Advanced API"],
    name: "ComponentCustomProps",
    body: '<p>\n Used to augment allowed TSX props in order to use non-declared props on TSX elements.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ComponentCustomProps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    hello</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="language-tsx">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    tsx\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#676E95;">// now works even if hello is not a declared prop</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">hello</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="tip custom-block">\n   <p class="custom-block-title">\n    TIP\n   </p>\n   <p>\n    Augmentations must be placed in a module\n    <code>\n     .ts\n    </code>\n    or\n    <code>\n     .d.ts\n    </code>\n    file. See\n    <a href="/guide/typescript/options-api.html#augmenting-global-properties">\n     Type Augmentation Placement\n    </a>\n    for more details.\n   </p>\n  </div>\n </li>\n</ul>\n',
  },
  {
    group: "Utility Types",
    type: ["Advanced API"],
    name: "CSSProperties",
    body: '<p>\n Used to augment allowed values in style property bindings.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <p>\n   Allow any custom CSS property\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">CSSProperties</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">--</span><span style="color:#89DDFF;">${</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">}`</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="language-tsx">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    tsx\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#F07178;">--bg-color</span><span style="color:#89DDFF;">\'</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">blue</span><span style="color:#89DDFF;">\'</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <div class="language-html">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    html\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">"</span><span style="color:#C3E88D;">{ \'--bg-color\': \'blue\' }</span><span style="color:#89DDFF;">"</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n</ul>\n<div class="tip custom-block">\n <p class="custom-block-title">\n  TIP\n </p>\n <p>\n  Augmentations must be placed in a module\n  <code>\n   .ts\n  </code>\n  or\n  <code>\n   .d.ts\n  </code>\n  file. See\n  <a href="/guide/typescript/options-api.html#augmenting-global-properties">\n   Type Augmentation Placement\n  </a>\n  for more details.\n </p>\n</div>\n<div class="info custom-block">\n <p class="custom-block-title">\n  See also\n </p>\n <p>\n  SFC\n  <code>\n   &lt;style&gt;\n  </code>\n  tags support linking CSS values to dynamic component state using the\n  <code>\n   v-bind\n  </code>\n  CSS function. This allows for custom properties without type augmentation.\n </p>\n <ul>\n  <li>\n   <a href="/api/sfc-css-features.html#v-bind-in-css">\n    v-bind() in CSS\n   </a>\n  </li>\n </ul>\n</div>',
  },
  {
    group: "Custom Renderer API",
    type: ["Advanced API"],
    name: "createRenderer()",
    body: '<p>\n Creates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue\'s core runtime to target non-DOM environments.\n</p>\n<ul>\n <li>\n  <p>\n   <strong>\n    Type\n   </strong>\n  </p>\n  <div class="language-ts">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    ts\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRenderer</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">&gt;(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RendererOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Renderer</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Renderer</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RootRenderFunction</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">createApp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CreateAppFunction</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RendererOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">patchProp</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">prevValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">nextValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// the rest is unused for most custom renderers</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">isSVG</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">prevChildren</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">parentComponent</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentInternalInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">parentSuspense</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SuspenseBoundary</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">unmountChildren</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UnmountChildrenFn</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">insert</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">anchor</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">remove</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">createElement</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">isSVG</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">isCustomizedBuiltIn</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">vnodeProps</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">VNodeProps</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">createText</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">createComment</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setText</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setElementText</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">parentNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">nextSibling</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// optional, DOM-specific</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">querySelector</span><span style="color:#89DDFF;">?(</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setScopeId</span><span style="color:#89DDFF;">?(</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">cloneNode</span><span style="color:#89DDFF;">?(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">insertStaticContent</span><span style="color:#89DDFF;">?(</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostElement</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">anchor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">isSVG</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">HostNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostNode</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre>\n  </div>\n </li>\n <li>\n  <p>\n   <strong>\n    Example\n   </strong>\n  </p>\n  <div class="language-js">\n   <button class="copy" title="Copy Code">\n   </button>\n   <span class="lang">\n    js\n   </span>\n   <pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createRenderer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">@vue/runtime-core</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> render</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> createApp </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRenderer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  patchProp</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  insert</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  remove</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  createElement</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// `render` is the low-level API</span></span>\n<span class="line"><span style="color:#676E95;">// `createApp` returns an app instance</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">render</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// re-export Vue core APIs</span></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\'</span><span style="color:#C3E88D;">@vue/runtime-core</span><span style="color:#89DDFF;">\'</span></span>\n<span class="line"></span></code></pre>\n  </div>\n  <p>\n   Vue\'s own\n   <code>\n    @vue/runtime-dom\n   </code>\n   is\n   <a href="https://github.com/vuejs/core/blob/main/packages/runtime-dom/src/index.ts" rel="noreferrer" target="_blank">\n    implemented using the same API\n   </a>\n   . For a simpler implementation, check out\n   <a href="https://github.com/vuejs/core/blob/main/packages/runtime-test/src/index.ts" rel="noreferrer" target="_blank">\n    <code>\n     @vue/runtime-test\n    </code>\n   </a>\n   which is a private package for Vue\'s own unit testing.\n  </p>\n </li>\n</ul>',
  },
];

const lua=[
  {
      "group": "function",
      "type": [],
      "name": "lua_absindex",
      "body": "<pre>int lua_absindex (lua_State *L, int idx);</pre>\n<p>\n Converts the acceptable index\n <code>\n  idx\n </code>\n into an equivalent absolute index\n(that is, one that does not depend on the stack size).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_Alloc",
      "body": "<pre>typedef void * (*lua_Alloc) (void *ud,\n                             void *ptr,\n                             size_t osize,\n                             size_t nsize);</pre>\n<p>\n The type of the memory-allocation function used by Lua states.\nThe allocator function must provide a\nfunctionality similar to\n <code>\n  realloc\n </code>\n ,\nbut not exactly the same.\nIts arguments are\n <code>\n  ud\n </code>\n , an opaque pointer passed to\n <a href=\"#lua_newstate\">\n  <code>\n   lua_newstate\n  </code>\n </a>\n ;\n <code>\n  ptr\n </code>\n , a pointer to the block being allocated/reallocated/freed;\n <code>\n  osize\n </code>\n , the original size of the block or some code about what\nis being allocated;\nand\n <code>\n  nsize\n </code>\n , the new size of the block.\n</p>\n<p>\n When\n <code>\n  ptr\n </code>\n is not\n <code>\n  NULL\n </code>\n ,\n <code>\n  osize\n </code>\n is the size of the block pointed by\n <code>\n  ptr\n </code>\n ,\nthat is, the size given when it was allocated or reallocated.\n</p>\n<p>\n When\n <code>\n  ptr\n </code>\n is\n <code>\n  NULL\n </code>\n ,\n <code>\n  osize\n </code>\n encodes the kind of object that Lua is allocating.\n <code>\n  osize\n </code>\n is any of\n <a href=\"#pdf-LUA_TSTRING\">\n  <code>\n   LUA_TSTRING\n  </code>\n </a>\n ,\n <a href=\"#pdf-LUA_TTABLE\">\n  <code>\n   LUA_TTABLE\n  </code>\n </a>\n ,\n <a href=\"#pdf-LUA_TFUNCTION\">\n  <code>\n   LUA_TFUNCTION\n  </code>\n </a>\n ,\n <a href=\"#pdf-LUA_TUSERDATA\">\n  <code>\n   LUA_TUSERDATA\n  </code>\n </a>\n , or\n <a href=\"#pdf-LUA_TTHREAD\">\n  <code>\n   LUA_TTHREAD\n  </code>\n </a>\n when (and only when)\nLua is creating a new object of that type.\nWhen\n <code>\n  osize\n </code>\n is some other value,\nLua is allocating memory for something else.\n</p>\n<p>\n Lua assumes the following behavior from the allocator function:\n</p>\n<p>\n When\n <code>\n  nsize\n </code>\n is zero,\nthe allocator must behave like\n <code>\n  free\n </code>\n and then return\n <code>\n  NULL\n </code>\n .\n</p>\n<p>\n When\n <code>\n  nsize\n </code>\n is not zero,\nthe allocator must behave like\n <code>\n  realloc\n </code>\n .\nIn particular, the allocator returns\n <code>\n  NULL\n </code>\n if and only if it cannot fulfill the request.\n</p>\n<p>\n Here is a simple implementation for the allocator function.\nIt is used in the auxiliary library by\n <a href=\"#luaL_newstate\">\n  <code>\n   luaL_newstate\n  </code>\n </a>\n .\n</p>\n<pre>     static void *l_alloc (void *ud, void *ptr, size_t osize,\n                                                size_t nsize) {\n       (void)ud;  (void)osize;  /* not used */\n       if (nsize == 0) {\n         free(ptr);\n         return NULL;\n       }\n       else\n         return realloc(ptr, nsize);\n     }\n</pre>\n<p>\n Note that Standard\u00a0C ensures\nthat\n <code>\n  free(NULL)\n </code>\n has no effect and that\n <code>\n  realloc(NULL,size)\n </code>\n is equivalent to\n <code>\n  malloc(size)\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_arith",
      "body": "<pre>void lua_arith (lua_State *L, int op);</pre>\n<p>\n Performs an arithmetic or bitwise operation over the two values\n(or one, in the case of negations)\nat the top of the stack,\nwith the value on the top being the second operand,\npops these values, and pushes the result of the operation.\nThe function follows the semantics of the corresponding Lua operator\n(that is, it may call metamethods).\n</p>\n<p>\n The value of\n <code>\n  op\n </code>\n must be one of the following constants:\n</p>\n<ul>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPADD\">\n    <code>\n     LUA_OPADD\n    </code>\n   </a>\n   :\n  </b>\n  performs addition (\n  <code>\n   +\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPSUB\">\n    <code>\n     LUA_OPSUB\n    </code>\n   </a>\n   :\n  </b>\n  performs subtraction (\n  <code>\n   -\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPMUL\">\n    <code>\n     LUA_OPMUL\n    </code>\n   </a>\n   :\n  </b>\n  performs multiplication (\n  <code>\n   *\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPDIV\">\n    <code>\n     LUA_OPDIV\n    </code>\n   </a>\n   :\n  </b>\n  performs float division (\n  <code>\n   /\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPIDIV\">\n    <code>\n     LUA_OPIDIV\n    </code>\n   </a>\n   :\n  </b>\n  performs floor division (\n  <code>\n   //\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPMOD\">\n    <code>\n     LUA_OPMOD\n    </code>\n   </a>\n   :\n  </b>\n  performs modulo (\n  <code>\n   %\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPPOW\">\n    <code>\n     LUA_OPPOW\n    </code>\n   </a>\n   :\n  </b>\n  performs exponentiation (\n  <code>\n   ^\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPUNM\">\n    <code>\n     LUA_OPUNM\n    </code>\n   </a>\n   :\n  </b>\n  performs mathematical negation (unary\n  <code>\n   -\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPBNOT\">\n    <code>\n     LUA_OPBNOT\n    </code>\n   </a>\n   :\n  </b>\n  performs bitwise NOT (\n  <code>\n   ~\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPBAND\">\n    <code>\n     LUA_OPBAND\n    </code>\n   </a>\n   :\n  </b>\n  performs bitwise AND (\n  <code>\n   &amp;\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPBOR\">\n    <code>\n     LUA_OPBOR\n    </code>\n   </a>\n   :\n  </b>\n  performs bitwise OR (\n  <code>\n   |\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPBXOR\">\n    <code>\n     LUA_OPBXOR\n    </code>\n   </a>\n   :\n  </b>\n  performs bitwise exclusive OR (\n  <code>\n   ~\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPSHL\">\n    <code>\n     LUA_OPSHL\n    </code>\n   </a>\n   :\n  </b>\n  performs left shift (\n  <code>\n   &lt;&lt;\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPSHR\">\n    <code>\n     LUA_OPSHR\n    </code>\n   </a>\n   :\n  </b>\n  performs right shift (\n  <code>\n   &gt;&gt;\n  </code>\n  )\n </li>\n</ul>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_atpanic",
      "body": "<pre>lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf);</pre>\n<p>\n Sets a new panic function and returns the old one (see\n <a href=\"#4.4\">\n  \u00a74.4\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_call",
      "body": "<pre>void lua_call (lua_State *L, int nargs, int nresults);</pre>\n<p>\n Calls a function.\nLike regular Lua calls,\n <code>\n  lua_call\n </code>\n respects the\n <code>\n  __call\n </code>\n metamethod.\nSo, here the word \"function\"\nmeans any callable value.\n</p>\n<p>\n To do a call you must use the following protocol:\nfirst, the function to be called is pushed onto the stack;\nthen, the arguments to the call are pushed\nin direct order;\nthat is, the first argument is pushed first.\nFinally you call\n <a href=\"#lua_call\">\n  <code>\n   lua_call\n  </code>\n </a>\n ;\n <code>\n  nargs\n </code>\n is the number of arguments that you pushed onto the stack.\nWhen the function returns,\nall arguments and the function value are popped\nand the call results are pushed onto the stack.\nThe number of results is adjusted to\n <code>\n  nresults\n </code>\n ,\nunless\n <code>\n  nresults\n </code>\n is\n <a name=\"pdf-LUA_MULTRET\">\n  <code>\n   LUA_MULTRET\n  </code>\n </a>\n .\nIn this case, all results from the function are pushed;\nLua takes care that the returned values fit into the stack space,\nbut it does not ensure any extra space in the stack.\nThe function results are pushed onto the stack in direct order\n(the first result is pushed first),\nso that after the call the last result is on the top of the stack.\n</p>\n<p>\n Any error while calling and running the function is propagated upwards\n(with a\n <code>\n  longjmp\n </code>\n ).\n</p>\n<p>\n The following example shows how the host program can do the\nequivalent to this Lua code:\n</p>\n<pre>     a = f(\"how\", t.x, 14)\n</pre>\n<p>\n Here it is in\u00a0C:\n</p>\n<pre>     lua_getglobal(L, \"f\");                  /* function to be called */\n     lua_pushliteral(L, \"how\");                       /* 1st argument */\n     lua_getglobal(L, \"t\");                    /* table to be indexed */\n     lua_getfield(L, -1, \"x\");        /* push result of t.x (2nd arg) */\n     lua_remove(L, -2);                  /* remove 't' from the stack */\n     lua_pushinteger(L, 14);                          /* 3rd argument */\n     lua_call(L, 3, 1);     /* call 'f' with 3 arguments and 1 result */\n     lua_setglobal(L, \"a\");                         /* set global 'a' */\n</pre>\n<p>\n Note that the code above is\n <em>\n  balanced\n </em>\n :\nat its end, the stack is back to its original configuration.\nThis is considered good programming practice.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_callk",
      "body": "<pre>void lua_callk (lua_State *L,\n                int nargs,\n                int nresults,\n                lua_KContext ctx,\n                lua_KFunction k);</pre>\n<p>\n This function behaves exactly like\n <a href=\"#lua_call\">\n  <code>\n   lua_call\n  </code>\n </a>\n ,\nbut allows the called function to yield (see\n <a href=\"#4.5\">\n  \u00a74.5\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_CFunction",
      "body": "<pre>typedef int (*lua_CFunction) (lua_State *L);</pre>\n<p>\n Type for C\u00a0functions.\n</p>\n<p>\n In order to communicate properly with Lua,\na C\u00a0function must use the following protocol,\nwhich defines the way parameters and results are passed:\na C\u00a0function receives its arguments from Lua in its stack\nin direct order (the first argument is pushed first).\nSo, when the function starts,\n <code>\n  lua_gettop(L)\n </code>\n returns the number of arguments received by the function.\nThe first argument (if any) is at index 1\nand its last argument is at index\n <code>\n  lua_gettop(L)\n </code>\n .\nTo return values to Lua, a C\u00a0function just pushes them onto the stack,\nin direct order (the first result is pushed first),\nand returns in C the number of results.\nAny other value in the stack below the results will be properly\ndiscarded by Lua.\nLike a Lua function, a C\u00a0function called by Lua can also return\nmany results.\n</p>\n<p>\n As an example, the following function receives a variable number\nof numeric arguments and returns their average and their sum:\n</p>\n<pre>     static int foo (lua_State *L) {\n       int n = lua_gettop(L);    /* number of arguments */\n       lua_Number sum = 0.0;\n       int i;\n       for (i = 1; i &lt;= n; i++) {\n         if (!lua_isnumber(L, i)) {\n           lua_pushliteral(L, \"incorrect argument\");\n           lua_error(L);\n         }\n         sum += lua_tonumber(L, i);\n       }\n       lua_pushnumber(L, sum/n);        /* first result */\n       lua_pushnumber(L, sum);         /* second result */\n       return 2;                   /* number of results */\n     }\n</pre>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_checkstack",
      "body": "<pre>int lua_checkstack (lua_State *L, int n);</pre>\n<p>\n Ensures that the stack has space for at least\n <code>\n  n\n </code>\n extra elements,\nthat is, that you can safely push up to\n <code>\n  n\n </code>\n values into it.\nIt returns false if it cannot fulfill the request,\neither because it would cause the stack\nto be greater than a fixed maximum size\n(typically at least several thousand elements) or\nbecause it cannot allocate memory for the extra space.\nThis function never shrinks the stack;\nif the stack already has space for the extra elements,\nit is left unchanged.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_close",
      "body": "<pre>void lua_close (lua_State *L);</pre>\n<p>\n Close all active to-be-closed variables in the main thread,\nrelease all objects in the given Lua state\n(calling the corresponding garbage-collection metamethods, if any),\nand frees all dynamic memory used by this state.\n</p>\n<p>\n On several platforms, you may not need to call this function,\nbecause all resources are naturally released when the host program ends.\nOn the other hand, long-running programs that create multiple states,\nsuch as daemons or web servers,\nwill probably need to close states as soon as they are not needed.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_closeslot",
      "body": "<pre>void lua_closeslot (lua_State *L, int index);</pre>\n<p>\n Close the to-be-closed slot at the given index and set its value to\n <b>\n  nil\n </b>\n .\nThe index must be the last index previously marked to be closed\n(see\n <a href=\"#lua_toclose\">\n  <code>\n   lua_toclose\n  </code>\n </a>\n ) that is still active (that is, not closed yet).\n</p>\n<p>\n A\n <code>\n  __close\n </code>\n metamethod cannot yield\nwhen called through this function.\n</p>\n<p>\n (Exceptionally, this function was introduced in release 5.4.3.\nIt is not present in previous 5.4 releases.)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_compare",
      "body": "<pre>int lua_compare (lua_State *L, int index1, int index2, int op);</pre>\n<p>\n Compares two Lua values.\nReturns 1 if the value at index\n <code>\n  index1\n </code>\n satisfies\n <code>\n  op\n </code>\n when compared with the value at index\n <code>\n  index2\n </code>\n ,\nfollowing the semantics of the corresponding Lua operator\n(that is, it may call metamethods).\nOtherwise returns\u00a00.\nAlso returns\u00a00 if any of the indices is not valid.\n</p>\n<p>\n The value of\n <code>\n  op\n </code>\n must be one of the following constants:\n</p>\n<ul>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPEQ\">\n    <code>\n     LUA_OPEQ\n    </code>\n   </a>\n   :\n  </b>\n  compares for equality (\n  <code>\n   ==\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPLT\">\n    <code>\n     LUA_OPLT\n    </code>\n   </a>\n   :\n  </b>\n  compares for less than (\n  <code>\n   &lt;\n  </code>\n  )\n </li>\n <li>\n  <b>\n   <a name=\"pdf-LUA_OPLE\">\n    <code>\n     LUA_OPLE\n    </code>\n   </a>\n   :\n  </b>\n  compares for less or equal (\n  <code>\n   &lt;=\n  </code>\n  )\n </li>\n</ul>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_concat",
      "body": "<pre>void lua_concat (lua_State *L, int n);</pre>\n<p>\n Concatenates the\n <code>\n  n\n </code>\n values at the top of the stack,\npops them, and leaves the result on the top.\nIf\n <code>\n  n\n </code>\n is\u00a01, the result is the single value on the stack\n(that is, the function does nothing);\nif\n <code>\n  n\n </code>\n is 0, the result is the empty string.\nConcatenation is performed following the usual semantics of Lua\n(see\n <a href=\"#3.4.6\">\n  \u00a73.4.6\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_copy",
      "body": "<pre>void lua_copy (lua_State *L, int fromidx, int toidx);</pre>\n<p>\n Copies the element at index\n <code>\n  fromidx\n </code>\n into the valid index\n <code>\n  toidx\n </code>\n ,\nreplacing the value at that position.\nValues at other positions are not affected.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_createtable",
      "body": "<pre>void lua_createtable (lua_State *L, int narr, int nrec);</pre>\n<p>\n Creates a new empty table and pushes it onto the stack.\nParameter\n <code>\n  narr\n </code>\n is a hint for how many elements the table\nwill have as a sequence;\nparameter\n <code>\n  nrec\n </code>\n is a hint for how many other elements\nthe table will have.\nLua may use these hints to preallocate memory for the new table.\nThis preallocation may help performance when you know in advance\nhow many elements the table will have.\nOtherwise you can use the function\n <a href=\"#lua_newtable\">\n  <code>\n   lua_newtable\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_dump",
      "body": "<pre>int lua_dump (lua_State *L,\n                        lua_Writer writer,\n                        void *data,\n                        int strip);</pre>\n<p>\n Dumps a function as a binary chunk.\nReceives a Lua function on the top of the stack\nand produces a binary chunk that,\nif loaded again,\nresults in a function equivalent to the one dumped.\nAs it produces parts of the chunk,\n <a href=\"#lua_dump\">\n  <code>\n   lua_dump\n  </code>\n </a>\n calls function\n <code>\n  writer\n </code>\n (see\n <a href=\"#lua_Writer\">\n  <code>\n   lua_Writer\n  </code>\n </a>\n )\nwith the given\n <code>\n  data\n </code>\n to write them.\n</p>\n<p>\n If\n <code>\n  strip\n </code>\n is true,\nthe binary representation may not include all debug information\nabout the function,\nto save space.\n</p>\n<p>\n The value returned is the error code returned by the last\ncall to the writer;\n0\u00a0means no errors.\n</p>\n<p>\n This function does not pop the Lua function from the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_error",
      "body": "<pre>int lua_error (lua_State *L);</pre>\n<p>\n Raises a Lua error,\nusing the value on the top of the stack as the error object.\nThis function does a long jump,\nand therefore never returns\n(see\n <a href=\"#luaL_error\">\n  <code>\n   luaL_error\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_gc",
      "body": "<pre>int lua_gc (lua_State *L, int what, ...);</pre>\n<p>\n Controls the garbage collector.\n</p>\n<p>\n This function performs several tasks,\naccording to the value of the parameter\n <code>\n  what\n </code>\n .\nFor options that need extra arguments,\nthey are listed after the option.\n</p>\n<ul>\n <li>\n  <b>\n   <code>\n    LUA_GCCOLLECT\n   </code>\n   :\n  </b>\n  Performs a full garbage-collection cycle.\n </li>\n <li>\n  <b>\n   <code>\n    LUA_GCSTOP\n   </code>\n   :\n  </b>\n  Stops the garbage collector.\n </li>\n <li>\n  <b>\n   <code>\n    LUA_GCRESTART\n   </code>\n   :\n  </b>\n  Restarts the garbage collector.\n </li>\n <li>\n  <b>\n   <code>\n    LUA_GCCOUNT\n   </code>\n   :\n  </b>\n  Returns the current amount of memory (in Kbytes) in use by Lua.\n </li>\n <li>\n  <b>\n   <code>\n    LUA_GCCOUNTB\n   </code>\n   :\n  </b>\n  Returns the remainder of dividing the current amount of bytes of\nmemory in use by Lua by 1024.\n </li>\n <li>\n  <b>\n   <code>\n    LUA_GCSTEP\n   </code>\n   <code>\n    (int stepsize)\n   </code>\n   :\n  </b>\n  Performs an incremental step of garbage collection,\ncorresponding to the allocation of\n  <code>\n   stepsize\n  </code>\n  Kbytes.\n </li>\n <li>\n  <b>\n   <code>\n    LUA_GCISRUNNING\n   </code>\n   :\n  </b>\n  Returns a boolean that tells whether the collector is running\n(i.e., not stopped).\n </li>\n <li>\n  <b>\n   <code>\n    LUA_GCINC\n   </code>\n   (int pause, int stepmul, stepsize):\n  </b>\n  Changes the collector to incremental mode\nwith the given parameters (see\n  <a href=\"#2.5.1\">\n   \u00a72.5.1\n  </a>\n  ).\nReturns the previous mode (\n  <code>\n   LUA_GCGEN\n  </code>\n  or\n  <code>\n   LUA_GCINC\n  </code>\n  ).\n </li>\n <li>\n  <b>\n   <code>\n    LUA_GCGEN\n   </code>\n   (int minormul, int majormul):\n  </b>\n  Changes the collector to generational mode\nwith the given parameters (see\n  <a href=\"#2.5.2\">\n   \u00a72.5.2\n  </a>\n  ).\nReturns the previous mode (\n  <code>\n   LUA_GCGEN\n  </code>\n  or\n  <code>\n   LUA_GCINC\n  </code>\n  ).\n </li>\n</ul>\n<p>\n For more details about these options,\nsee\n <a href=\"#pdf-collectgarbage\">\n  <code>\n   collectgarbage\n  </code>\n </a>\n .\n</p>\n<p>\n This function should not be called by a finalizer.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getallocf",
      "body": "<pre>lua_Alloc lua_getallocf (lua_State *L, void **ud);</pre>\n<p>\n Returns the memory-allocation function of a given state.\nIf\n <code>\n  ud\n </code>\n is not\n <code>\n  NULL\n </code>\n , Lua stores in\n <code>\n  *ud\n </code>\n the\nopaque pointer given when the memory-allocator function was set.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getfield",
      "body": "<pre>int lua_getfield (lua_State *L, int index, const char *k);</pre>\n<p>\n Pushes onto the stack the value\n <code>\n  t[k]\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the value at the given index.\nAs in Lua, this function may trigger a metamethod\nfor the \"index\" event (see\n <a href=\"#2.4\">\n  \u00a72.4\n </a>\n ).\n</p>\n<p>\n Returns the type of the pushed value.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getextraspace",
      "body": "<pre>void *lua_getextraspace (lua_State *L);</pre>\n<p>\n Returns a pointer to a raw memory area associated with the\ngiven Lua state.\nThe application can use this area for any purpose;\nLua does not use it for anything.\n</p>\n<p>\n Each new thread has this area initialized with a copy\nof the area of the main thread.\n</p>\n<p>\n By default, this area has the size of a pointer to void,\nbut you can recompile Lua with a different size for this area.\n(See\n <code>\n  LUA_EXTRASPACE\n </code>\n in\n <code>\n  luaconf.h\n </code>\n .)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getglobal",
      "body": "<pre>int lua_getglobal (lua_State *L, const char *name);</pre>\n<p>\n Pushes onto the stack the value of the global\n <code>\n  name\n </code>\n .\nReturns the type of that value.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_geti",
      "body": "<pre>int lua_geti (lua_State *L, int index, lua_Integer i);</pre>\n<p>\n Pushes onto the stack the value\n <code>\n  t[i]\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the value at the given index.\nAs in Lua, this function may trigger a metamethod\nfor the \"index\" event (see\n <a href=\"#2.4\">\n  \u00a72.4\n </a>\n ).\n</p>\n<p>\n Returns the type of the pushed value.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getmetatable",
      "body": "<pre>int lua_getmetatable (lua_State *L, int index);</pre>\n<p>\n If the value at the given index has a metatable,\nthe function pushes that metatable onto the stack and returns\u00a01.\nOtherwise,\nthe function returns\u00a00 and pushes nothing on the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_gettable",
      "body": "<pre>int lua_gettable (lua_State *L, int index);</pre>\n<p>\n Pushes onto the stack the value\n <code>\n  t[k]\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the value at the given index\nand\n <code>\n  k\n </code>\n is the value on the top of the stack.\n</p>\n<p>\n This function pops the key from the stack,\npushing the resulting value in its place.\nAs in Lua, this function may trigger a metamethod\nfor the \"index\" event (see\n <a href=\"#2.4\">\n  \u00a72.4\n </a>\n ).\n</p>\n<p>\n Returns the type of the pushed value.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_gettop",
      "body": "<pre>int lua_gettop (lua_State *L);</pre>\n<p>\n Returns the index of the top element in the stack.\nBecause indices start at\u00a01,\nthis result is equal to the number of elements in the stack;\nin particular, 0\u00a0means an empty stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getiuservalue",
      "body": "<pre>int lua_getiuservalue (lua_State *L, int index, int n);</pre>\n<p>\n Pushes onto the stack the\n <code>\n  n\n </code>\n -th user value associated with the\nfull userdata at the given index and\nreturns the type of the pushed value.\n</p>\n<p>\n If the userdata does not have that value,\npushes\n <b>\n  nil\n </b>\n and returns\n <a href=\"#pdf-LUA_TNONE\">\n  <code>\n   LUA_TNONE\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_insert",
      "body": "<pre>void lua_insert (lua_State *L, int index);</pre>\n<p>\n Moves the top element into the given valid index,\nshifting up the elements above this index to open space.\nThis function cannot be called with a pseudo-index,\nbecause a pseudo-index is not an actual stack position.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_Integer",
      "body": "<pre>typedef ... lua_Integer;</pre>\n<p>\n The type of integers in Lua.\n</p>\n<p>\n By default this type is\n <code>\n  long long\n </code>\n ,\n(usually a 64-bit two-complement integer),\nbut that can be changed to\n <code>\n  long\n </code>\n or\n <code>\n  int\n </code>\n (usually a 32-bit two-complement integer).\n(See\n <code>\n  LUA_INT_TYPE\n </code>\n in\n <code>\n  luaconf.h\n </code>\n .)\n</p>\n<p>\n Lua also defines the constants\n <a name=\"pdf-LUA_MININTEGER\">\n  <code>\n   LUA_MININTEGER\n  </code>\n </a>\n and\n <a name=\"pdf-LUA_MAXINTEGER\">\n  <code>\n   LUA_MAXINTEGER\n  </code>\n </a>\n ,\nwith the minimum and the maximum values that fit in this type.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isboolean",
      "body": "<pre>int lua_isboolean (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a boolean,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_iscfunction",
      "body": "<pre>int lua_iscfunction (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a C\u00a0function,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isfunction",
      "body": "<pre>int lua_isfunction (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a function\n(either C or Lua), and 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isinteger",
      "body": "<pre>int lua_isinteger (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is an integer\n(that is, the value is a number and is represented as an integer),\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_islightuserdata",
      "body": "<pre>int lua_islightuserdata (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a light userdata,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isnil",
      "body": "<pre>int lua_isnil (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is\n <b>\n  nil\n </b>\n ,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isnone",
      "body": "<pre>int lua_isnone (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the given index is not valid,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isnoneornil",
      "body": "<pre>int lua_isnoneornil (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the given index is not valid\nor if the value at this index is\n <b>\n  nil\n </b>\n ,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isnumber",
      "body": "<pre>int lua_isnumber (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a number\nor a string convertible to a number,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isstring",
      "body": "<pre>int lua_isstring (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a string\nor a number (which is always convertible to a string),\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_istable",
      "body": "<pre>int lua_istable (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a table,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isthread",
      "body": "<pre>int lua_isthread (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a thread,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isuserdata",
      "body": "<pre>int lua_isuserdata (lua_State *L, int index);</pre>\n<p>\n Returns 1 if the value at the given index is a userdata\n(either full or light), and 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_isyieldable",
      "body": "<pre>int lua_isyieldable (lua_State *L);</pre>\n<p>\n Returns 1 if the given coroutine can yield,\nand 0\u00a0otherwise.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_KContext",
      "body": "<pre>typedef ... lua_KContext;</pre>\n<p>\n The type for continuation-function contexts.\nIt must be a numeric type.\nThis type is defined as\n <code>\n  intptr_t\n </code>\n when\n <code>\n  intptr_t\n </code>\n is available,\nso that it can store pointers too.\nOtherwise, it is defined as\n <code>\n  ptrdiff_t\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_KFunction",
      "body": "<pre>typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);</pre>\n<p>\n Type for continuation functions (see\n <a href=\"#4.5\">\n  \u00a74.5\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_len",
      "body": "<pre>void lua_len (lua_State *L, int index);</pre>\n<p>\n Returns the length of the value at the given index.\nIt is equivalent to the '\n <code>\n  #\n </code>\n ' operator in Lua (see\n <a href=\"#3.4.7\">\n  \u00a73.4.7\n </a>\n ) and\nmay trigger a metamethod for the \"length\" event (see\n <a href=\"#2.4\">\n  \u00a72.4\n </a>\n ).\nThe result is pushed on the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_load",
      "body": "<pre>int lua_load (lua_State *L,\n              lua_Reader reader,\n              void *data,\n              const char *chunkname,\n              const char *mode);</pre>\n<p>\n Loads a Lua chunk without running it.\nIf there are no errors,\n <code>\n  lua_load\n </code>\n pushes the compiled chunk as a Lua\nfunction on top of the stack.\nOtherwise, it pushes an error message.\n</p>\n<p>\n The\n <code>\n  lua_load\n </code>\n function uses a user-supplied\n <code>\n  reader\n </code>\n function\nto read the chunk (see\n <a href=\"#lua_Reader\">\n  <code>\n   lua_Reader\n  </code>\n </a>\n ).\nThe\n <code>\n  data\n </code>\n argument is an opaque value passed to the reader function.\n</p>\n<p>\n The\n <code>\n  chunkname\n </code>\n argument gives a name to the chunk,\nwhich is used for error messages and in debug information (see\n <a href=\"#4.7\">\n  \u00a74.7\n </a>\n ).\n</p>\n<p>\n <code>\n  lua_load\n </code>\n automatically detects whether the chunk is text or binary\nand loads it accordingly (see program\n <code>\n  luac\n </code>\n ).\nThe string\n <code>\n  mode\n </code>\n works as in function\n <a href=\"#pdf-load\">\n  <code>\n   load\n  </code>\n </a>\n ,\nwith the addition that\na\n <code>\n  NULL\n </code>\n value is equivalent to the string \"\n <code>\n  bt\n </code>\n \".\n</p>\n<p>\n <code>\n  lua_load\n </code>\n uses the stack internally,\nso the reader function must always leave the stack\nunmodified when returning.\n</p>\n<p>\n <code>\n  lua_load\n </code>\n can return\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n ,\n <a href=\"#pdf-LUA_ERRSYNTAX\">\n  <code>\n   LUA_ERRSYNTAX\n  </code>\n </a>\n , or\n <a href=\"#pdf-LUA_ERRMEM\">\n  <code>\n   LUA_ERRMEM\n  </code>\n </a>\n .\nThe function may also return other values corresponding to\nerrors raised by the read function (see\n <a href=\"#4.4.1\">\n  \u00a74.4.1\n </a>\n ).\n</p>\n<p>\n If the resulting function has upvalues,\nits first upvalue is set to the value of the global environment\nstored at index\n <code>\n  LUA_RIDX_GLOBALS\n </code>\n in the registry (see\n <a href=\"#4.3\">\n  \u00a74.3\n </a>\n ).\nWhen loading main chunks,\nthis upvalue will be the\n <code>\n  _ENV\n </code>\n variable (see\n <a href=\"#2.2\">\n  \u00a72.2\n </a>\n ).\nOther upvalues are initialized with\n <b>\n  nil\n </b>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_newstate",
      "body": "<pre>lua_State *lua_newstate (lua_Alloc f, void *ud);</pre>\n<p>\n Creates a new independent state and returns its main thread.\nReturns\n <code>\n  NULL\n </code>\n if it cannot create the state\n(due to lack of memory).\nThe argument\n <code>\n  f\n </code>\n is the allocator function;\nLua will do all memory allocation for this state\nthrough this function (see\n <a href=\"#lua_Alloc\">\n  <code>\n   lua_Alloc\n  </code>\n </a>\n ).\nThe second argument,\n <code>\n  ud\n </code>\n , is an opaque pointer that Lua\npasses to the allocator in every call.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_newtable",
      "body": "<pre>void lua_newtable (lua_State *L);</pre>\n<p>\n Creates a new empty table and pushes it onto the stack.\nIt is equivalent to\n <code>\n  lua_createtable(L, 0, 0)\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_newthread",
      "body": "<pre>lua_State *lua_newthread (lua_State *L);</pre>\n<p>\n Creates a new thread, pushes it on the stack,\nand returns a pointer to a\n <a href=\"#lua_State\">\n  <code>\n   lua_State\n  </code>\n </a>\n that represents this new thread.\nThe new thread returned by this function shares with the original thread\nits global environment,\nbut has an independent execution stack.\n</p>\n<p>\n Threads are subject to garbage collection,\nlike any Lua object.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_newuserdatauv",
      "body": "<pre>void *lua_newuserdatauv (lua_State *L, size_t size, int nuvalue);</pre>\n<p>\n This function creates and pushes on the stack a new full userdata,\nwith\n <code>\n  nuvalue\n </code>\n associated Lua values, called\n <code>\n  user values\n </code>\n ,\nplus an associated block of raw memory with\n <code>\n  size\n </code>\n bytes.\n(The user values can be set and read with the functions\n <a href=\"#lua_setiuservalue\">\n  <code>\n   lua_setiuservalue\n  </code>\n </a>\n and\n <a href=\"#lua_getiuservalue\">\n  <code>\n   lua_getiuservalue\n  </code>\n </a>\n .)\n</p>\n<p>\n The function returns the address of the block of memory.\nLua ensures that this address is valid as long as\nthe corresponding userdata is alive (see\n <a href=\"#2.5\">\n  \u00a72.5\n </a>\n ).\nMoreover, if the userdata is marked for finalization (see\n <a href=\"#2.5.3\">\n  \u00a72.5.3\n </a>\n ),\nits address is valid at least until the call to its finalizer.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_next",
      "body": "<pre>int lua_next (lua_State *L, int index);</pre>\n<p>\n Pops a key from the stack,\nand pushes a key\u2013value pair from the table at the given index,\nthe \"next\" pair after the given key.\nIf there are no more elements in the table,\nthen\n <a href=\"#lua_next\">\n  <code>\n   lua_next\n  </code>\n </a>\n returns 0 and pushes nothing.\n</p>\n<p>\n A typical table traversal looks like this:\n</p>\n<pre>     /* table is in the stack at index 't' */\n     lua_pushnil(L);  /* first key */\n     while (lua_next(L, t) != 0) {\n       /* uses 'key' (at index -2) and 'value' (at index -1) */\n       printf(\"%s - %s\\n\",\n              lua_typename(L, lua_type(L, -2)),\n              lua_typename(L, lua_type(L, -1)));\n       /* removes 'value'; keeps 'key' for next iteration */\n       lua_pop(L, 1);\n     }\n</pre>\n<p>\n While traversing a table,\navoid calling\n <a href=\"#lua_tolstring\">\n  <code>\n   lua_tolstring\n  </code>\n </a>\n directly on a key,\nunless you know that the key is actually a string.\nRecall that\n <a href=\"#lua_tolstring\">\n  <code>\n   lua_tolstring\n  </code>\n </a>\n may change\nthe value at the given index;\nthis confuses the next call to\n <a href=\"#lua_next\">\n  <code>\n   lua_next\n  </code>\n </a>\n .\n</p>\n<p>\n This function may raise an error if the given key\nis neither\n <b>\n  nil\n </b>\n nor present in the table.\nSee function\n <a href=\"#pdf-next\">\n  <code>\n   next\n  </code>\n </a>\n for the caveats of modifying\nthe table during its traversal.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_Number",
      "body": "<pre>typedef ... lua_Number;</pre>\n<p>\n The type of floats in Lua.\n</p>\n<p>\n By default this type is double,\nbut that can be changed to a single float or a long double.\n(See\n <code>\n  LUA_FLOAT_TYPE\n </code>\n in\n <code>\n  luaconf.h\n </code>\n .)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_numbertointeger",
      "body": "<pre>int lua_numbertointeger (lua_Number n, lua_Integer *p);</pre>\n<p>\n Tries to convert a Lua float to a Lua integer;\nthe float\n <code>\n  n\n </code>\n must have an integral value.\nIf that value is within the range of Lua integers,\nit is converted to an integer and assigned to\n <code>\n  *p\n </code>\n .\nThe macro results in a boolean indicating whether the\nconversion was successful.\n(Note that this range test can be tricky to do\ncorrectly without this macro, due to rounding.)\n</p>\n<p>\n This macro may evaluate its arguments more than once.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pcall",
      "body": "<pre>int lua_pcall (lua_State *L, int nargs, int nresults, int msgh);</pre>\n<p>\n Calls a function (or a callable object) in protected mode.\n</p>\n<p>\n Both\n <code>\n  nargs\n </code>\n and\n <code>\n  nresults\n </code>\n have the same meaning as\nin\n <a href=\"#lua_call\">\n  <code>\n   lua_call\n  </code>\n </a>\n .\nIf there are no errors during the call,\n <a href=\"#lua_pcall\">\n  <code>\n   lua_pcall\n  </code>\n </a>\n behaves exactly like\n <a href=\"#lua_call\">\n  <code>\n   lua_call\n  </code>\n </a>\n .\nHowever, if there is any error,\n <a href=\"#lua_pcall\">\n  <code>\n   lua_pcall\n  </code>\n </a>\n catches it,\npushes a single value on the stack (the error object),\nand returns an error code.\nLike\n <a href=\"#lua_call\">\n  <code>\n   lua_call\n  </code>\n </a>\n ,\n <a href=\"#lua_pcall\">\n  <code>\n   lua_pcall\n  </code>\n </a>\n always removes the function\nand its arguments from the stack.\n</p>\n<p>\n If\n <code>\n  msgh\n </code>\n is 0,\nthen the error object returned on the stack\nis exactly the original error object.\nOtherwise,\n <code>\n  msgh\n </code>\n is the stack index of a\n <em>\n  message handler\n </em>\n .\n(This index cannot be a pseudo-index.)\nIn case of runtime errors,\nthis handler will be called with the error object\nand its return value will be the object\nreturned on the stack by\n <a href=\"#lua_pcall\">\n  <code>\n   lua_pcall\n  </code>\n </a>\n .\n</p>\n<p>\n Typically, the message handler is used to add more debug\ninformation to the error object, such as a stack traceback.\nSuch information cannot be gathered after the return of\n <a href=\"#lua_pcall\">\n  <code>\n   lua_pcall\n  </code>\n </a>\n ,\nsince by then the stack has unwound.\n</p>\n<p>\n The\n <a href=\"#lua_pcall\">\n  <code>\n   lua_pcall\n  </code>\n </a>\n function returns one of the following status codes:\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n ,\n <a href=\"#pdf-LUA_ERRRUN\">\n  <code>\n   LUA_ERRRUN\n  </code>\n </a>\n ,\n <a href=\"#pdf-LUA_ERRMEM\">\n  <code>\n   LUA_ERRMEM\n  </code>\n </a>\n , or\n <a href=\"#pdf-LUA_ERRERR\">\n  <code>\n   LUA_ERRERR\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pcallk",
      "body": "<pre>int lua_pcallk (lua_State *L,\n                int nargs,\n                int nresults,\n                int msgh,\n                lua_KContext ctx,\n                lua_KFunction k);</pre>\n<p>\n This function behaves exactly like\n <a href=\"#lua_pcall\">\n  <code>\n   lua_pcall\n  </code>\n </a>\n ,\nexcept that it allows the called function to yield (see\n <a href=\"#4.5\">\n  \u00a74.5\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pop",
      "body": "<pre>void lua_pop (lua_State *L, int n);</pre>\n<p>\n Pops\n <code>\n  n\n </code>\n elements from the stack.\nIt is implemented as a macro over\n <a href=\"#lua_settop\">\n  <code>\n   lua_settop\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushboolean",
      "body": "<pre>void lua_pushboolean (lua_State *L, int b);</pre>\n<p>\n Pushes a boolean value with value\n <code>\n  b\n </code>\n onto the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushcclosure",
      "body": "<pre>void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n);</pre>\n<p>\n Pushes a new C\u00a0closure onto the stack.\nThis function receives a pointer to a C\u00a0function\nand pushes onto the stack a Lua value of type\n <code>\n  function\n </code>\n that,\nwhen called, invokes the corresponding C\u00a0function.\nThe parameter\n <code>\n  n\n </code>\n tells how many upvalues this function will have\n(see\n <a href=\"#4.2\">\n  \u00a74.2\n </a>\n ).\n</p>\n<p>\n Any function to be callable by Lua must\nfollow the correct protocol to receive its parameters\nand return its results (see\n <a href=\"#lua_CFunction\">\n  <code>\n   lua_CFunction\n  </code>\n </a>\n ).\n</p>\n<p>\n When a C\u00a0function is created,\nit is possible to associate some values with it,\nthe so called upvalues;\nthese upvalues are then accessible to the function whenever it is called.\nThis association is called a C\u00a0closure (see\n <a href=\"#4.2\">\n  \u00a74.2\n </a>\n ).\nTo create a C\u00a0closure,\nfirst the initial values for its upvalues must be pushed onto the stack.\n(When there are multiple upvalues, the first value is pushed first.)\nThen\n <a href=\"#lua_pushcclosure\">\n  <code>\n   lua_pushcclosure\n  </code>\n </a>\n is called to create and push the C\u00a0function onto the stack,\nwith the argument\n <code>\n  n\n </code>\n telling how many values will be\nassociated with the function.\n <a href=\"#lua_pushcclosure\">\n  <code>\n   lua_pushcclosure\n  </code>\n </a>\n also pops these values from the stack.\n</p>\n<p>\n The maximum value for\n <code>\n  n\n </code>\n is 255.\n</p>\n<p>\n When\n <code>\n  n\n </code>\n is zero,\nthis function creates a\n <em>\n  light C\u00a0function\n </em>\n ,\nwhich is just a pointer to the C\u00a0function.\nIn that case, it never raises a memory error.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushcfunction",
      "body": "<pre>void lua_pushcfunction (lua_State *L, lua_CFunction f);</pre>\n<p>\n Pushes a C\u00a0function onto the stack.\nThis function is equivalent to\n <a href=\"#lua_pushcclosure\">\n  <code>\n   lua_pushcclosure\n  </code>\n </a>\n with no upvalues.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushfstring",
      "body": "<pre>const char *lua_pushfstring (lua_State *L, const char *fmt, ...);</pre>\n<p>\n Pushes onto the stack a formatted string\nand returns a pointer to this string (see\n <a href=\"#4.1.3\">\n  \u00a74.1.3\n </a>\n ).\nIt is similar to the ISO\u00a0C function\n <code>\n  sprintf\n </code>\n ,\nbut has two important differences.\nFirst,\nyou do not have to allocate space for the result;\nthe result is a Lua string and Lua takes care of memory allocation\n(and deallocation, through garbage collection).\nSecond,\nthe conversion specifiers are quite restricted.\nThere are no flags, widths, or precisions.\nThe conversion specifiers can only be\n'\n <code>\n  %%\n </code>\n ' (inserts the character '\n <code>\n  %\n </code>\n '),\n'\n <code>\n  %s\n </code>\n ' (inserts a zero-terminated string, with no size restrictions),\n'\n <code>\n  %f\n </code>\n ' (inserts a\n <a href=\"#lua_Number\">\n  <code>\n   lua_Number\n  </code>\n </a>\n ),\n'\n <code>\n  %I\n </code>\n ' (inserts a\n <a href=\"#lua_Integer\">\n  <code>\n   lua_Integer\n  </code>\n </a>\n ),\n'\n <code>\n  %p\n </code>\n ' (inserts a pointer),\n'\n <code>\n  %d\n </code>\n ' (inserts an\n <code>\n  int\n </code>\n ),\n'\n <code>\n  %c\n </code>\n ' (inserts an\n <code>\n  int\n </code>\n as a one-byte character), and\n'\n <code>\n  %U\n </code>\n ' (inserts a\n <code>\n  long int\n </code>\n as a UTF-8 byte sequence).\n</p>\n<p>\n This function may raise errors due to memory overflow\nor an invalid conversion specifier.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushglobaltable",
      "body": "<pre>void lua_pushglobaltable (lua_State *L);</pre>\n<p>\n Pushes the global environment onto the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushinteger",
      "body": "<pre>void lua_pushinteger (lua_State *L, lua_Integer n);</pre>\n<p>\n Pushes an integer with value\n <code>\n  n\n </code>\n onto the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushlightuserdata",
      "body": "<pre>void lua_pushlightuserdata (lua_State *L, void *p);</pre>\n<p>\n Pushes a light userdata onto the stack.\n</p>\n<p>\n Userdata represent C\u00a0values in Lua.\nA\n <em>\n  light userdata\n </em>\n represents a pointer, a\n <code>\n  void*\n </code>\n .\nIt is a value (like a number):\nyou do not create it, it has no individual metatable,\nand it is not collected (as it was never created).\nA light userdata is equal to \"any\"\nlight userdata with the same C\u00a0address.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushliteral",
      "body": "<pre>const char *lua_pushliteral (lua_State *L, const char *s);</pre>\n<p>\n This macro is equivalent to\n <a href=\"#lua_pushstring\">\n  <code>\n   lua_pushstring\n  </code>\n </a>\n ,\nbut should be used only when\n <code>\n  s\n </code>\n is a literal string.\n(Lua may optimize this case.)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushlstring",
      "body": "<pre>const char *lua_pushlstring (lua_State *L, const char *s, size_t len);</pre>\n<p>\n Pushes the string pointed to by\n <code>\n  s\n </code>\n with size\n <code>\n  len\n </code>\n onto the stack.\nLua will make or reuse an internal copy of the given string,\nso the memory at\n <code>\n  s\n </code>\n can be freed or reused immediately after\nthe function returns.\nThe string can contain any binary data,\nincluding embedded zeros.\n</p>\n<p>\n Returns a pointer to the internal copy of the string (see\n <a href=\"#4.1.3\">\n  \u00a74.1.3\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushnil",
      "body": "<pre>void lua_pushnil (lua_State *L);</pre>\n<p>\n Pushes a nil value onto the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushnumber",
      "body": "<pre>void lua_pushnumber (lua_State *L, lua_Number n);</pre>\n<p>\n Pushes a float with value\n <code>\n  n\n </code>\n onto the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushstring",
      "body": "<pre>const char *lua_pushstring (lua_State *L, const char *s);</pre>\n<p>\n Pushes the zero-terminated string pointed to by\n <code>\n  s\n </code>\n onto the stack.\nLua will make or reuse an internal copy of the given string,\nso the memory at\n <code>\n  s\n </code>\n can be freed or reused immediately after\nthe function returns.\n</p>\n<p>\n Returns a pointer to the internal copy of the string (see\n <a href=\"#4.1.3\">\n  \u00a74.1.3\n </a>\n ).\n</p>\n<p>\n If\n <code>\n  s\n </code>\n is\n <code>\n  NULL\n </code>\n , pushes\n <b>\n  nil\n </b>\n and returns\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushthread",
      "body": "<pre>int lua_pushthread (lua_State *L);</pre>\n<p>\n Pushes the thread represented by\n <code>\n  L\n </code>\n onto the stack.\nReturns 1 if this thread is the main thread of its state.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushvalue",
      "body": "<pre>void lua_pushvalue (lua_State *L, int index);</pre>\n<p>\n Pushes a copy of the element at the given index\nonto the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_pushvfstring",
      "body": "<pre>const char *lua_pushvfstring (lua_State *L,\n                              const char *fmt,\n                              va_list argp);</pre>\n<p>\n Equivalent to\n <a href=\"#lua_pushfstring\">\n  <code>\n   lua_pushfstring\n  </code>\n </a>\n , except that it receives a\n <code>\n  va_list\n </code>\n instead of a variable number of arguments.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rawequal",
      "body": "<pre>int lua_rawequal (lua_State *L, int index1, int index2);</pre>\n<p>\n Returns 1 if the two values in indices\n <code>\n  index1\n </code>\n and\n <code>\n  index2\n </code>\n are primitively equal\n(that is, equal without calling the\n <code>\n  __eq\n </code>\n metamethod).\nOtherwise returns\u00a00.\nAlso returns\u00a00 if any of the indices are not valid.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rawget",
      "body": "<pre>int lua_rawget (lua_State *L, int index);</pre>\n<p>\n Similar to\n <a href=\"#lua_gettable\">\n  <code>\n   lua_gettable\n  </code>\n </a>\n , but does a raw access\n(i.e., without metamethods).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rawgeti",
      "body": "<pre>int lua_rawgeti (lua_State *L, int index, lua_Integer n);</pre>\n<p>\n Pushes onto the stack the value\n <code>\n  t[n]\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the table at the given index.\nThe access is raw,\nthat is, it does not use the\n <code>\n  __index\n </code>\n metavalue.\n</p>\n<p>\n Returns the type of the pushed value.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rawgetp",
      "body": "<pre>int lua_rawgetp (lua_State *L, int index, const void *p);</pre>\n<p>\n Pushes onto the stack the value\n <code>\n  t[k]\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the table at the given index and\n <code>\n  k\n </code>\n is the pointer\n <code>\n  p\n </code>\n represented as a light userdata.\nThe access is raw;\nthat is, it does not use the\n <code>\n  __index\n </code>\n metavalue.\n</p>\n<p>\n Returns the type of the pushed value.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rawlen",
      "body": "<pre>lua_Unsigned lua_rawlen (lua_State *L, int index);</pre>\n<p>\n Returns the raw \"length\" of the value at the given index:\nfor strings, this is the string length;\nfor tables, this is the result of the length operator ('\n <code>\n  #\n </code>\n ')\nwith no metamethods;\nfor userdata, this is the size of the block of memory allocated\nfor the userdata.\nFor other values, this call returns\u00a00.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rawset",
      "body": "<pre>void lua_rawset (lua_State *L, int index);</pre>\n<p>\n Similar to\n <a href=\"#lua_settable\">\n  <code>\n   lua_settable\n  </code>\n </a>\n , but does a raw assignment\n(i.e., without metamethods).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rawseti",
      "body": "<pre>void lua_rawseti (lua_State *L, int index, lua_Integer i);</pre>\n<p>\n Does the equivalent of\n <code>\n  t[i] = v\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the table at the given index\nand\n <code>\n  v\n </code>\n is the value on the top of the stack.\n</p>\n<p>\n This function pops the value from the stack.\nThe assignment is raw,\nthat is, it does not use the\n <code>\n  __newindex\n </code>\n metavalue.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rawsetp",
      "body": "<pre>void lua_rawsetp (lua_State *L, int index, const void *p);</pre>\n<p>\n Does the equivalent of\n <code>\n  t[p] = v\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the table at the given index,\n <code>\n  p\n </code>\n is encoded as a light userdata,\nand\n <code>\n  v\n </code>\n is the value on the top of the stack.\n</p>\n<p>\n This function pops the value from the stack.\nThe assignment is raw,\nthat is, it does not use the\n <code>\n  __newindex\n </code>\n metavalue.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_Reader",
      "body": "<pre>typedef const char * (*lua_Reader) (lua_State *L,\n                                    void *data,\n                                    size_t *size);</pre>\n<p>\n The reader function used by\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n .\nEvery time\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n needs another piece of the chunk,\nit calls the reader,\npassing along its\n <code>\n  data\n </code>\n parameter.\nThe reader must return a pointer to a block of memory\nwith a new piece of the chunk\nand set\n <code>\n  size\n </code>\n to the block size.\nThe block must exist until the reader function is called again.\nTo signal the end of the chunk,\nthe reader must return\n <code>\n  NULL\n </code>\n or set\n <code>\n  size\n </code>\n to zero.\nThe reader function may return pieces of any size greater than zero.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_register",
      "body": "<pre>void lua_register (lua_State *L, const char *name, lua_CFunction f);</pre>\n<p>\n Sets the C\u00a0function\n <code>\n  f\n </code>\n as the new value of global\n <code>\n  name\n </code>\n .\nIt is defined as a macro:\n</p>\n<pre>     #define lua_register(L,n,f) \\\n            (lua_pushcfunction(L, f), lua_setglobal(L, n))\n</pre>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_remove",
      "body": "<pre>void lua_remove (lua_State *L, int index);</pre>\n<p>\n Removes the element at the given valid index,\nshifting down the elements above this index to fill the gap.\nThis function cannot be called with a pseudo-index,\nbecause a pseudo-index is not an actual stack position.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_replace",
      "body": "<pre>void lua_replace (lua_State *L, int index);</pre>\n<p>\n Moves the top element into the given valid index\nwithout shifting any element\n(therefore replacing the value at that given index),\nand then pops the top element.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_resetthread",
      "body": "<pre>int lua_resetthread (lua_State *L);</pre>\n<p>\n Resets a thread, cleaning its call stack and closing all pending\nto-be-closed variables.\nReturns a status code:\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n for no errors in the thread\n(either the original error that stopped the thread or\nerrors in closing methods),\nor an error status otherwise.\nIn case of error,\nleaves the error object on the top of the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_resume",
      "body": "<pre>int lua_resume (lua_State *L, lua_State *from, int nargs,\n                          int *nresults);</pre>\n<p>\n Starts and resumes a coroutine in the given thread\n <code>\n  L\n </code>\n .\n</p>\n<p>\n To start a coroutine,\nyou push the main function plus any arguments\nonto the empty stack of the thread.\nthen you call\n <a href=\"#lua_resume\">\n  <code>\n   lua_resume\n  </code>\n </a>\n ,\nwith\n <code>\n  nargs\n </code>\n being the number of arguments.\nThis call returns when the coroutine suspends or finishes its execution.\nWhen it returns,\n <code>\n  *nresults\n </code>\n is updated and\nthe top of the stack contains\nthe\n <code>\n  *nresults\n </code>\n values passed to\n <a href=\"#lua_yield\">\n  <code>\n   lua_yield\n  </code>\n </a>\n or returned by the body function.\n <a href=\"#lua_resume\">\n  <code>\n   lua_resume\n  </code>\n </a>\n returns\n <a href=\"#pdf-LUA_YIELD\">\n  <code>\n   LUA_YIELD\n  </code>\n </a>\n if the coroutine yields,\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n if the coroutine finishes its execution\nwithout errors,\nor an error code in case of errors (see\n <a href=\"#4.4.1\">\n  \u00a74.4.1\n </a>\n ).\nIn case of errors,\nthe error object is on the top of the stack.\n</p>\n<p>\n To resume a coroutine,\nyou remove the\n <code>\n  *nresults\n </code>\n yielded values from its stack,\npush the values to be passed as results from\n <code>\n  yield\n </code>\n ,\nand then call\n <a href=\"#lua_resume\">\n  <code>\n   lua_resume\n  </code>\n </a>\n .\n</p>\n<p>\n The parameter\n <code>\n  from\n </code>\n represents the coroutine that is resuming\n <code>\n  L\n </code>\n .\nIf there is no such coroutine,\nthis parameter can be\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_rotate",
      "body": "<pre>void lua_rotate (lua_State *L, int idx, int n);</pre>\n<p>\n Rotates the stack elements between the valid index\n <code>\n  idx\n </code>\n and the top of the stack.\nThe elements are rotated\n <code>\n  n\n </code>\n positions in the direction of the top,\nfor a positive\n <code>\n  n\n </code>\n ,\nor\n <code>\n  -n\n </code>\n positions in the direction of the bottom,\nfor a negative\n <code>\n  n\n </code>\n .\nThe absolute value of\n <code>\n  n\n </code>\n must not be greater than the size\nof the slice being rotated.\nThis function cannot be called with a pseudo-index,\nbecause a pseudo-index is not an actual stack position.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_setallocf",
      "body": "<pre>void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);</pre>\n<p>\n Changes the allocator function of a given state to\n <code>\n  f\n </code>\n with user data\n <code>\n  ud\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_setfield",
      "body": "<pre>void lua_setfield (lua_State *L, int index, const char *k);</pre>\n<p>\n Does the equivalent to\n <code>\n  t[k] = v\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the value at the given index\nand\n <code>\n  v\n </code>\n is the value on the top of the stack.\n</p>\n<p>\n This function pops the value from the stack.\nAs in Lua, this function may trigger a metamethod\nfor the \"newindex\" event (see\n <a href=\"#2.4\">\n  \u00a72.4\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_setglobal",
      "body": "<pre>void lua_setglobal (lua_State *L, const char *name);</pre>\n<p>\n Pops a value from the stack and\nsets it as the new value of global\n <code>\n  name\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_seti",
      "body": "<pre>void lua_seti (lua_State *L, int index, lua_Integer n);</pre>\n<p>\n Does the equivalent to\n <code>\n  t[n] = v\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the value at the given index\nand\n <code>\n  v\n </code>\n is the value on the top of the stack.\n</p>\n<p>\n This function pops the value from the stack.\nAs in Lua, this function may trigger a metamethod\nfor the \"newindex\" event (see\n <a href=\"#2.4\">\n  \u00a72.4\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_setiuservalue",
      "body": "<pre>int lua_setiuservalue (lua_State *L, int index, int n);</pre>\n<p>\n Pops a value from the stack and sets it as\nthe new\n <code>\n  n\n </code>\n -th user value associated to the\nfull userdata at the given index.\nReturns 0 if the userdata does not have that value.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_setmetatable",
      "body": "<pre>int lua_setmetatable (lua_State *L, int index);</pre>\n<p>\n Pops a table or\n <b>\n  nil\n </b>\n from the stack and\nsets that value as the new metatable for the value at the given index.\n(\n <b>\n  nil\n </b>\n means no metatable.)\n</p>\n<p>\n (For historical reasons, this function returns an\n <code>\n  int\n </code>\n ,\nwhich now is always 1.)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_settable",
      "body": "<pre>void lua_settable (lua_State *L, int index);</pre>\n<p>\n Does the equivalent to\n <code>\n  t[k] = v\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the value at the given index,\n <code>\n  v\n </code>\n is the value on the top of the stack,\nand\n <code>\n  k\n </code>\n is the value just below the top.\n</p>\n<p>\n This function pops both the key and the value from the stack.\nAs in Lua, this function may trigger a metamethod\nfor the \"newindex\" event (see\n <a href=\"#2.4\">\n  \u00a72.4\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_settop",
      "body": "<pre>void lua_settop (lua_State *L, int index);</pre>\n<p>\n Accepts any index, or\u00a00,\nand sets the stack top to this index.\nIf the new top is greater than the old one,\nthen the new elements are filled with\n <b>\n  nil\n </b>\n .\nIf\n <code>\n  index\n </code>\n is\u00a00, then all stack elements are removed.\n</p>\n<p>\n This function can run arbitrary code when removing an index\nmarked as to-be-closed from the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_setwarnf",
      "body": "<pre>void lua_setwarnf (lua_State *L, lua_WarnFunction f, void *ud);</pre>\n<p>\n Sets the warning function to be used by Lua to emit warnings\n(see\n <a href=\"#lua_WarnFunction\">\n  <code>\n   lua_WarnFunction\n  </code>\n </a>\n ).\nThe\n <code>\n  ud\n </code>\n parameter sets the value\n <code>\n  ud\n </code>\n passed to\nthe warning function.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_State",
      "body": "<pre>typedef struct lua_State lua_State;</pre>\n<p>\n An opaque structure that points to a thread and indirectly\n(through the thread) to the whole state of a Lua interpreter.\nThe Lua library is fully reentrant:\nit has no global variables.\nAll information about a state is accessible through this structure.\n</p>\n<p>\n A pointer to this structure must be passed as the first argument to\nevery function in the library, except to\n <a href=\"#lua_newstate\">\n  <code>\n   lua_newstate\n  </code>\n </a>\n ,\nwhich creates a Lua state from scratch.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_status",
      "body": "<pre>int lua_status (lua_State *L);</pre>\n<p>\n Returns the status of the thread\n <code>\n  L\n </code>\n .\n</p>\n<p>\n The status can be\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n for a normal thread,\nan error code if the thread finished the execution\nof a\n <a href=\"#lua_resume\">\n  <code>\n   lua_resume\n  </code>\n </a>\n with an error,\nor\n <a href=\"#pdf-LUA_YIELD\">\n  <code>\n   LUA_YIELD\n  </code>\n </a>\n if the thread is suspended.\n</p>\n<p>\n You can call functions only in threads with status\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n .\nYou can resume threads with status\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n (to start a new coroutine) or\n <a href=\"#pdf-LUA_YIELD\">\n  <code>\n   LUA_YIELD\n  </code>\n </a>\n (to resume a coroutine).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_stringtonumber",
      "body": "<pre>size_t lua_stringtonumber (lua_State *L, const char *s);</pre>\n<p>\n Converts the zero-terminated string\n <code>\n  s\n </code>\n to a number,\npushes that number into the stack,\nand returns the total size of the string,\nthat is, its length plus one.\nThe conversion can result in an integer or a float,\naccording to the lexical conventions of Lua (see\n <a href=\"#3.1\">\n  \u00a73.1\n </a>\n ).\nThe string may have leading and trailing whitespaces and a sign.\nIf the string is not a valid numeral,\nreturns 0 and pushes nothing.\n(Note that the result can be used as a boolean,\ntrue if the conversion succeeds.)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_toboolean",
      "body": "<pre>int lua_toboolean (lua_State *L, int index);</pre>\n<p>\n Converts the Lua value at the given index to a C\u00a0boolean\nvalue (0\u00a0or\u00a01).\nLike all tests in Lua,\n <a href=\"#lua_toboolean\">\n  <code>\n   lua_toboolean\n  </code>\n </a>\n returns true for any Lua value\ndifferent from\n <b>\n  false\n </b>\n and\n <b>\n  nil\n </b>\n ;\notherwise it returns false.\n(If you want to accept only actual boolean values,\nuse\n <a href=\"#lua_isboolean\">\n  <code>\n   lua_isboolean\n  </code>\n </a>\n to test the value's type.)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_tocfunction",
      "body": "<pre>lua_CFunction lua_tocfunction (lua_State *L, int index);</pre>\n<p>\n Converts a value at the given index to a C\u00a0function.\nThat value must be a C\u00a0function;\notherwise, returns\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_toclose",
      "body": "<pre>void lua_toclose (lua_State *L, int index);</pre>\n<p>\n Marks the given index in the stack as a\nto-be-closed slot (see\n <a href=\"#3.3.8\">\n  \u00a73.3.8\n </a>\n ).\nLike a to-be-closed variable in Lua,\nthe value at that slot in the stack will be closed\nwhen it goes out of scope.\nHere, in the context of a C function,\nto go out of scope means that the running function returns to Lua,\nor there is an error,\nor the slot is removed from the stack through\n <a href=\"#lua_settop\">\n  <code>\n   lua_settop\n  </code>\n </a>\n or\n <a href=\"#lua_pop\">\n  <code>\n   lua_pop\n  </code>\n </a>\n ,\nor there is a call to\n <a href=\"#lua_closeslot\">\n  <code>\n   lua_closeslot\n  </code>\n </a>\n .\nA slot marked as to-be-closed should not be removed from the stack\nby any other function in the API except\n <a href=\"#lua_settop\">\n  <code>\n   lua_settop\n  </code>\n </a>\n or\n <a href=\"#lua_pop\">\n  <code>\n   lua_pop\n  </code>\n </a>\n ,\nunless previously deactivated by\n <a href=\"#lua_closeslot\">\n  <code>\n   lua_closeslot\n  </code>\n </a>\n .\n</p>\n<p>\n This function should not be called for an index\nthat is equal to or below an active to-be-closed slot.\n</p>\n<p>\n Note that, both in case of errors and of a regular return,\nby the time the\n <code>\n  __close\n </code>\n metamethod runs,\nthe C\u00a0stack was already unwound,\nso that any automatic C\u00a0variable declared in the calling function\n(e.g., a buffer) will be out of scope.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_tointeger",
      "body": "<pre>lua_Integer lua_tointeger (lua_State *L, int index);</pre>\n<p>\n Equivalent to\n <a href=\"#lua_tointegerx\">\n  <code>\n   lua_tointegerx\n  </code>\n </a>\n with\n <code>\n  isnum\n </code>\n equal to\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_tointegerx",
      "body": "<pre>lua_Integer lua_tointegerx (lua_State *L, int index, int *isnum);</pre>\n<p>\n Converts the Lua value at the given index\nto the signed integral type\n <a href=\"#lua_Integer\">\n  <code>\n   lua_Integer\n  </code>\n </a>\n .\nThe Lua value must be an integer,\nor a number or string convertible to an integer (see\n <a href=\"#3.4.3\">\n  \u00a73.4.3\n </a>\n );\notherwise,\n <code>\n  lua_tointegerx\n </code>\n returns\u00a00.\n</p>\n<p>\n If\n <code>\n  isnum\n </code>\n is not\n <code>\n  NULL\n </code>\n ,\nits referent is assigned a boolean value that\nindicates whether the operation succeeded.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_tolstring",
      "body": "<pre>const char *lua_tolstring (lua_State *L, int index, size_t *len);</pre>\n<p>\n Converts the Lua value at the given index to a C\u00a0string.\nIf\n <code>\n  len\n </code>\n is not\n <code>\n  NULL\n </code>\n ,\nit sets\n <code>\n  *len\n </code>\n with the string length.\nThe Lua value must be a string or a number;\notherwise, the function returns\n <code>\n  NULL\n </code>\n .\nIf the value is a number,\nthen\n <code>\n  lua_tolstring\n </code>\n also\n <em>\n  changes the actual value in the stack to a string\n </em>\n .\n(This change confuses\n <a href=\"#lua_next\">\n  <code>\n   lua_next\n  </code>\n </a>\n when\n <code>\n  lua_tolstring\n </code>\n is applied to keys during a table traversal.)\n</p>\n<p>\n <code>\n  lua_tolstring\n </code>\n returns a pointer\nto a string inside the Lua state (see\n <a href=\"#4.1.3\">\n  \u00a74.1.3\n </a>\n ).\nThis string always has a zero ('\n <code>\n  \\0\n </code>\n ')\nafter its last character (as in\u00a0C),\nbut can contain other zeros in its body.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_tonumber",
      "body": "<pre>lua_Number lua_tonumber (lua_State *L, int index);</pre>\n<p>\n Equivalent to\n <a href=\"#lua_tonumberx\">\n  <code>\n   lua_tonumberx\n  </code>\n </a>\n with\n <code>\n  isnum\n </code>\n equal to\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_tonumberx",
      "body": "<pre>lua_Number lua_tonumberx (lua_State *L, int index, int *isnum);</pre>\n<p>\n Converts the Lua value at the given index\nto the C\u00a0type\n <a href=\"#lua_Number\">\n  <code>\n   lua_Number\n  </code>\n </a>\n (see\n <a href=\"#lua_Number\">\n  <code>\n   lua_Number\n  </code>\n </a>\n ).\nThe Lua value must be a number or a string convertible to a number\n(see\n <a href=\"#3.4.3\">\n  \u00a73.4.3\n </a>\n );\notherwise,\n <a href=\"#lua_tonumberx\">\n  <code>\n   lua_tonumberx\n  </code>\n </a>\n returns\u00a00.\n</p>\n<p>\n If\n <code>\n  isnum\n </code>\n is not\n <code>\n  NULL\n </code>\n ,\nits referent is assigned a boolean value that\nindicates whether the operation succeeded.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_topointer",
      "body": "<pre>const void *lua_topointer (lua_State *L, int index);</pre>\n<p>\n Converts the value at the given index to a generic\nC\u00a0pointer (\n <code>\n  void*\n </code>\n ).\nThe value can be a userdata, a table, a thread, a string, or a function;\notherwise,\n <code>\n  lua_topointer\n </code>\n returns\n <code>\n  NULL\n </code>\n .\nDifferent objects will give different pointers.\nThere is no way to convert the pointer back to its original value.\n</p>\n<p>\n Typically this function is used only for hashing and debug information.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_tostring",
      "body": "<pre>const char *lua_tostring (lua_State *L, int index);</pre>\n<p>\n Equivalent to\n <a href=\"#lua_tolstring\">\n  <code>\n   lua_tolstring\n  </code>\n </a>\n with\n <code>\n  len\n </code>\n equal to\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_tothread",
      "body": "<pre>lua_State *lua_tothread (lua_State *L, int index);</pre>\n<p>\n Converts the value at the given index to a Lua thread\n(represented as\n <code>\n  lua_State*\n </code>\n ).\nThis value must be a thread;\notherwise, the function returns\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_touserdata",
      "body": "<pre>void *lua_touserdata (lua_State *L, int index);</pre>\n<p>\n If the value at the given index is a full userdata,\nreturns its memory-block address.\nIf the value is a light userdata,\nreturns its value (a pointer).\nOtherwise, returns\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_type",
      "body": "<pre>int lua_type (lua_State *L, int index);</pre>\n<p>\n Returns the type of the value in the given valid index,\nor\n <code>\n  LUA_TNONE\n </code>\n for a non-valid but acceptable index.\nThe types returned by\n <a href=\"#lua_type\">\n  <code>\n   lua_type\n  </code>\n </a>\n are coded by the following constants\ndefined in\n <code>\n  lua.h\n </code>\n :\n <a name=\"pdf-LUA_TNIL\">\n  <code>\n   LUA_TNIL\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_TNUMBER\">\n  <code>\n   LUA_TNUMBER\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_TBOOLEAN\">\n  <code>\n   LUA_TBOOLEAN\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_TSTRING\">\n  <code>\n   LUA_TSTRING\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_TTABLE\">\n  <code>\n   LUA_TTABLE\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_TFUNCTION\">\n  <code>\n   LUA_TFUNCTION\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_TUSERDATA\">\n  <code>\n   LUA_TUSERDATA\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_TTHREAD\">\n  <code>\n   LUA_TTHREAD\n  </code>\n </a>\n ,\nand\n <a name=\"pdf-LUA_TLIGHTUSERDATA\">\n  <code>\n   LUA_TLIGHTUSERDATA\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_typename",
      "body": "<pre>const char *lua_typename (lua_State *L, int tp);</pre>\n<p>\n Returns the name of the type encoded by the value\n <code>\n  tp\n </code>\n ,\nwhich must be one the values returned by\n <a href=\"#lua_type\">\n  <code>\n   lua_type\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_Unsigned",
      "body": "<pre>typedef ... lua_Unsigned;</pre>\n<p>\n The unsigned version of\n <a href=\"#lua_Integer\">\n  <code>\n   lua_Integer\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_upvalueindex",
      "body": "<pre>int lua_upvalueindex (int i);</pre>\n<p>\n Returns the pseudo-index that represents the\n <code>\n  i\n </code>\n -th upvalue of\nthe running function (see\n <a href=\"#4.2\">\n  \u00a74.2\n </a>\n ).\n <code>\n  i\n </code>\n must be in the range\n <em>\n  [1,256]\n </em>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_version",
      "body": "<pre>lua_Number lua_version (lua_State *L);</pre>\n<p>\n Returns the version number of this core.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_WarnFunction",
      "body": "<pre>typedef void (*lua_WarnFunction) (void *ud, const char *msg, int tocont);</pre>\n<p>\n The type of warning functions, called by Lua to emit warnings.\nThe first parameter is an opaque pointer\nset by\n <a href=\"#lua_setwarnf\">\n  <code>\n   lua_setwarnf\n  </code>\n </a>\n .\nThe second parameter is the warning message.\nThe third parameter is a boolean that\nindicates whether the message is\nto be continued by the message in the next call.\n</p>\n<p>\n See\n <a href=\"#pdf-warn\">\n  <code>\n   warn\n  </code>\n </a>\n for more details about warnings.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_warning",
      "body": "<pre>void lua_warning (lua_State *L, const char *msg, int tocont);</pre>\n<p>\n Emits a warning with the given message.\nA message in a call with\n <code>\n  tocont\n </code>\n true should be\ncontinued in another call to this function.\n</p>\n<p>\n See\n <a href=\"#pdf-warn\">\n  <code>\n   warn\n  </code>\n </a>\n for more details about warnings.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_Writer",
      "body": "<pre>typedef int (*lua_Writer) (lua_State *L,\n                           const void* p,\n                           size_t sz,\n                           void* ud);</pre>\n<p>\n The type of the writer function used by\n <a href=\"#lua_dump\">\n  <code>\n   lua_dump\n  </code>\n </a>\n .\nEvery time\n <a href=\"#lua_dump\">\n  <code>\n   lua_dump\n  </code>\n </a>\n produces another piece of chunk,\nit calls the writer,\npassing along the buffer to be written (\n <code>\n  p\n </code>\n ),\nits size (\n <code>\n  sz\n </code>\n ),\nand the\n <code>\n  ud\n </code>\n parameter supplied to\n <a href=\"#lua_dump\">\n  <code>\n   lua_dump\n  </code>\n </a>\n .\n</p>\n<p>\n The writer returns an error code:\n0\u00a0means no errors;\nany other value means an error and stops\n <a href=\"#lua_dump\">\n  <code>\n   lua_dump\n  </code>\n </a>\n from\ncalling the writer again.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_xmove",
      "body": "<pre>void lua_xmove (lua_State *from, lua_State *to, int n);</pre>\n<p>\n Exchange values between different threads of the same state.\n</p>\n<p>\n This function pops\n <code>\n  n\n </code>\n values from the stack\n <code>\n  from\n </code>\n ,\nand pushes them onto the stack\n <code>\n  to\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_yield",
      "body": "<pre>int lua_yield (lua_State *L, int nresults);</pre>\n<p>\n This function is equivalent to\n <a href=\"#lua_yieldk\">\n  <code>\n   lua_yieldk\n  </code>\n </a>\n ,\nbut it has no continuation (see\n <a href=\"#4.5\">\n  \u00a74.5\n </a>\n ).\nTherefore, when the thread resumes,\nit continues the function that called\nthe function calling\n <code>\n  lua_yield\n </code>\n .\nTo avoid surprises,\nthis function should be called only in a tail call.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_yieldk",
      "body": "<pre>int lua_yieldk (lua_State *L,\n                int nresults,\n                lua_KContext ctx,\n                lua_KFunction k);</pre>\n<p>\n Yields a coroutine (thread).\n</p>\n<p>\n When a C\u00a0function calls\n <a href=\"#lua_yieldk\">\n  <code>\n   lua_yieldk\n  </code>\n </a>\n ,\nthe running coroutine suspends its execution,\nand the call to\n <a href=\"#lua_resume\">\n  <code>\n   lua_resume\n  </code>\n </a>\n that started this coroutine returns.\nThe parameter\n <code>\n  nresults\n </code>\n is the number of values from the stack\nthat will be passed as results to\n <a href=\"#lua_resume\">\n  <code>\n   lua_resume\n  </code>\n </a>\n .\n</p>\n<p>\n When the coroutine is resumed again,\nLua calls the given continuation function\n <code>\n  k\n </code>\n to continue\nthe execution of the C\u00a0function that yielded (see\n <a href=\"#4.5\">\n  \u00a74.5\n </a>\n ).\nThis continuation function receives the same stack\nfrom the previous function,\nwith the\n <code>\n  n\n </code>\n results removed and\nreplaced by the arguments passed to\n <a href=\"#lua_resume\">\n  <code>\n   lua_resume\n  </code>\n </a>\n .\nMoreover,\nthe continuation function receives the value\n <code>\n  ctx\n </code>\n that was passed to\n <a href=\"#lua_yieldk\">\n  <code>\n   lua_yieldk\n  </code>\n </a>\n .\n</p>\n<p>\n Usually, this function does not return;\nwhen the coroutine eventually resumes,\nit continues executing the continuation function.\nHowever, there is one special case,\nwhich is when this function is called\nfrom inside a line or a count hook (see\n <a href=\"#4.7\">\n  \u00a74.7\n </a>\n ).\nIn that case,\n <code>\n  lua_yieldk\n </code>\n should be called with no continuation\n(probably in the form of\n <a href=\"#lua_yield\">\n  <code>\n   lua_yield\n  </code>\n </a>\n ) and no results,\nand the hook should return immediately after the call.\nLua will yield and,\nwhen the coroutine resumes again,\nit will continue the normal execution\nof the (Lua) function that triggered the hook.\n</p>\n<p>\n This function can raise an error if it is called from a thread\nwith a pending C call with no continuation function\n(what is called a\n <em>\n  C-call boundary\n </em>\n ),\nor it is called from a thread that is not running inside a resume\n(typically the main thread).\n</p>\n<h2>\n 4.7 \u2013\n <a name=\"4.7\">\n  The Debug Interface\n </a>\n</h2>\n<p>\n Lua has no built-in debugging facilities.\nInstead, it offers a special interface\nby means of functions and\n <em>\n  hooks\n </em>\n .\nThis interface allows the construction of different\nkinds of debuggers, profilers, and other tools\nthat need \"inside information\" from the interpreter.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_Debug",
      "body": "<pre>typedef struct lua_Debug {\n  int event;\n  const char *name;           /* (n) */\n  const char *namewhat;       /* (n) */\n  const char *what;           /* (S) */\n  const char *source;         /* (S) */\n  size_t srclen;              /* (S) */\n  int currentline;            /* (l) */\n  int linedefined;            /* (S) */\n  int lastlinedefined;        /* (S) */\n  unsigned char nups;         /* (u) number of upvalues */\n  unsigned char nparams;      /* (u) number of parameters */\n  char isvararg;              /* (u) */\n  char istailcall;            /* (t) */\n  unsigned short ftransfer;   /* (r) index of first value transferred */\n  unsigned short ntransfer;   /* (r) number of transferred values */\n  char short_src[LUA_IDSIZE]; /* (S) */\n  /* private part */\n  <em>other fields</em>\n} lua_Debug;</pre>\n<p>\n A structure used to carry different pieces of\ninformation about a function or an activation record.\n <a href=\"#lua_getstack\">\n  <code>\n   lua_getstack\n  </code>\n </a>\n fills only the private part\nof this structure, for later use.\nTo fill the other fields of\n <a href=\"#lua_Debug\">\n  <code>\n   lua_Debug\n  </code>\n </a>\n with useful information,\nyou must call\n <a href=\"#lua_getinfo\">\n  <code>\n   lua_getinfo\n  </code>\n </a>\n with an appropriate parameter.\n(Specifically, to get a field,\nyou must add the letter between parentheses in the field's comment\nto the parameter\n <code>\n  what\n </code>\n of\n <a href=\"#lua_getinfo\">\n  <code>\n   lua_getinfo\n  </code>\n </a>\n .)\n</p>\n<p>\n The fields of\n <a href=\"#lua_Debug\">\n  <code>\n   lua_Debug\n  </code>\n </a>\n have the following meaning:\n</p>\n<ul>\n <li>\n  <b>\n   <code>\n    source\n   </code>\n   :\n  </b>\n  the source of the chunk that created the function.\nIf\n  <code>\n   source\n  </code>\n  starts with a '\n  <code>\n   @\n  </code>\n  ',\nit means that the function was defined in a file where\nthe file name follows the '\n  <code>\n   @\n  </code>\n  '.\nIf\n  <code>\n   source\n  </code>\n  starts with a '\n  <code>\n   =\n  </code>\n  ',\nthe remainder of its contents describes the source in a user-dependent manner.\nOtherwise,\nthe function was defined in a string where\n  <code>\n   source\n  </code>\n  is that string.\n </li>\n <li>\n  <b>\n   <code>\n    srclen\n   </code>\n   :\n  </b>\n  The length of the string\n  <code>\n   source\n  </code>\n  .\n </li>\n <li>\n  <b>\n   <code>\n    short_src\n   </code>\n   :\n  </b>\n  a \"printable\" version of\n  <code>\n   source\n  </code>\n  , to be used in error messages.\n </li>\n <li>\n  <b>\n   <code>\n    linedefined\n   </code>\n   :\n  </b>\n  the line number where the definition of the function starts.\n </li>\n <li>\n  <b>\n   <code>\n    lastlinedefined\n   </code>\n   :\n  </b>\n  the line number where the definition of the function ends.\n </li>\n <li>\n  <b>\n   <code>\n    what\n   </code>\n   :\n  </b>\n  the string\n  <code>\n   \"Lua\"\n  </code>\n  if the function is a Lua function,\n  <code>\n   \"C\"\n  </code>\n  if it is a C\u00a0function,\n  <code>\n   \"main\"\n  </code>\n  if it is the main part of a chunk.\n </li>\n <li>\n  <b>\n   <code>\n    currentline\n   </code>\n   :\n  </b>\n  the current line where the given function is executing.\nWhen no line information is available,\n  <code>\n   currentline\n  </code>\n  is set to -1.\n </li>\n <li>\n  <b>\n   <code>\n    name\n   </code>\n   :\n  </b>\n  a reasonable name for the given function.\nBecause functions in Lua are first-class values,\nthey do not have a fixed name:\nsome functions can be the value of multiple global variables,\nwhile others can be stored only in a table field.\nThe\n  <code>\n   lua_getinfo\n  </code>\n  function checks how the function was\ncalled to find a suitable name.\nIf it cannot find a name,\nthen\n  <code>\n   name\n  </code>\n  is set to\n  <code>\n   NULL\n  </code>\n  .\n </li>\n <li>\n  <b>\n   <code>\n    namewhat\n   </code>\n   :\n  </b>\n  explains the\n  <code>\n   name\n  </code>\n  field.\nThe value of\n  <code>\n   namewhat\n  </code>\n  can be\n  <code>\n   \"global\"\n  </code>\n  ,\n  <code>\n   \"local\"\n  </code>\n  ,\n  <code>\n   \"method\"\n  </code>\n  ,\n  <code>\n   \"field\"\n  </code>\n  ,\n  <code>\n   \"upvalue\"\n  </code>\n  , or\n  <code>\n   \"\"\n  </code>\n  (the empty string),\naccording to how the function was called.\n(Lua uses the empty string when no other option seems to apply.)\n </li>\n <li>\n  <b>\n   <code>\n    istailcall\n   </code>\n   :\n  </b>\n  true if this function invocation was called by a tail call.\nIn this case, the caller of this level is not in the stack.\n </li>\n <li>\n  <b>\n   <code>\n    nups\n   </code>\n   :\n  </b>\n  the number of upvalues of the function.\n </li>\n <li>\n  <b>\n   <code>\n    nparams\n   </code>\n   :\n  </b>\n  the number of parameters of the function\n(always 0\u00a0for C\u00a0functions).\n </li>\n <li>\n  <b>\n   <code>\n    isvararg\n   </code>\n   :\n  </b>\n  true if the function is a vararg function\n(always true for C\u00a0functions).\n </li>\n <li>\n  <b>\n   <code>\n    ftransfer\n   </code>\n   :\n  </b>\n  the index in the stack of the first value being \"transferred\",\nthat is, parameters in a call or return values in a return.\n(The other values are in consecutive indices.)\nUsing this index, you can access and modify these values\nthrough\n  <a href=\"#lua_getlocal\">\n   <code>\n    lua_getlocal\n   </code>\n  </a>\n  and\n  <a href=\"#lua_setlocal\">\n   <code>\n    lua_setlocal\n   </code>\n  </a>\n  .\nThis field is only meaningful during a\ncall hook, denoting the first parameter,\nor a return hook, denoting the first value being returned.\n(For call hooks, this value is always 1.)\n </li>\n <li>\n  <b>\n   <code>\n    ntransfer\n   </code>\n   :\n  </b>\n  The number of values being transferred (see previous item).\n(For calls of Lua functions,\nthis value is always equal to\n  <code>\n   nparams\n  </code>\n  .)\n </li>\n</ul>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_gethook",
      "body": "<pre>lua_Hook lua_gethook (lua_State *L);</pre>\n<p>\n Returns the current hook function.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_gethookcount",
      "body": "<pre>int lua_gethookcount (lua_State *L);</pre>\n<p>\n Returns the current hook count.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_gethookmask",
      "body": "<pre>int lua_gethookmask (lua_State *L);</pre>\n<p>\n Returns the current hook mask.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getinfo",
      "body": "<pre>int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);</pre>\n<p>\n Gets information about a specific function or function invocation.\n</p>\n<p>\n To get information about a function invocation,\nthe parameter\n <code>\n  ar\n </code>\n must be a valid activation record that was\nfilled by a previous call to\n <a href=\"#lua_getstack\">\n  <code>\n   lua_getstack\n  </code>\n </a>\n or\ngiven as argument to a hook (see\n <a href=\"#lua_Hook\">\n  <code>\n   lua_Hook\n  </code>\n </a>\n ).\n</p>\n<p>\n To get information about a function, you push it onto the stack\nand start the\n <code>\n  what\n </code>\n string with the character '\n <code>\n  &gt;\n </code>\n '.\n(In that case,\n <code>\n  lua_getinfo\n </code>\n pops the function from the top of the stack.)\nFor instance, to know in which line a function\n <code>\n  f\n </code>\n was defined,\nyou can write the following code:\n</p>\n<pre>     lua_Debug ar;\n     lua_getglobal(L, \"f\");  /* get global 'f' */\n     lua_getinfo(L, \"&gt;S\", &amp;ar);\n     printf(\"%d\\n\", ar.linedefined);\n</pre>\n<p>\n Each character in the string\n <code>\n  what\n </code>\n selects some fields of the structure\n <code>\n  ar\n </code>\n to be filled or\na value to be pushed on the stack.\n(These characters are also documented in the declaration of\nthe structure\n <a href=\"#lua_Debug\">\n  <code>\n   lua_Debug\n  </code>\n </a>\n ,\nbetween parentheses in the comments following each field.)\n</p>\n<ul>\n <li>\n  <b>\n   '\n   <code>\n    f\n   </code>\n   ':\n  </b>\n  pushes onto the stack the function that is\nrunning at the given level;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    l\n   </code>\n   ':\n  </b>\n  fills in the field\n  <code>\n   currentline\n  </code>\n  ;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    n\n   </code>\n   ':\n  </b>\n  fills in the fields\n  <code>\n   name\n  </code>\n  and\n  <code>\n   namewhat\n  </code>\n  ;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    r\n   </code>\n   ':\n  </b>\n  fills in the fields\n  <code>\n   ftransfer\n  </code>\n  and\n  <code>\n   ntransfer\n  </code>\n  ;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    S\n   </code>\n   ':\n  </b>\n  fills in the fields\n  <code>\n   source\n  </code>\n  ,\n  <code>\n   short_src\n  </code>\n  ,\n  <code>\n   linedefined\n  </code>\n  ,\n  <code>\n   lastlinedefined\n  </code>\n  , and\n  <code>\n   what\n  </code>\n  ;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    t\n   </code>\n   ':\n  </b>\n  fills in the field\n  <code>\n   istailcall\n  </code>\n  ;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    u\n   </code>\n   ':\n  </b>\n  fills in the fields\n  <code>\n   nups\n  </code>\n  ,\n  <code>\n   nparams\n  </code>\n  , and\n  <code>\n   isvararg\n  </code>\n  ;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    L\n   </code>\n   ':\n  </b>\n  pushes onto the stack a table whose indices are\nthe lines on the function with some associated code,\nthat is, the lines where you can put a break point.\n(Lines with no code include empty lines and comments.)\nIf this option is given together with option '\n  <code>\n   f\n  </code>\n  ',\nits table is pushed after the function.\nThis is the only option that can raise a memory error.\n </li>\n</ul>\n<p>\n This function returns 0 to signal an invalid option in\n <code>\n  what\n </code>\n ;\neven then the valid options are handled correctly.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getlocal",
      "body": "<pre>const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);</pre>\n<p>\n Gets information about a local variable or a temporary value\nof a given activation record or a given function.\n</p>\n<p>\n In the first case,\nthe parameter\n <code>\n  ar\n </code>\n must be a valid activation record that was\nfilled by a previous call to\n <a href=\"#lua_getstack\">\n  <code>\n   lua_getstack\n  </code>\n </a>\n or\ngiven as argument to a hook (see\n <a href=\"#lua_Hook\">\n  <code>\n   lua_Hook\n  </code>\n </a>\n ).\nThe index\n <code>\n  n\n </code>\n selects which local variable to inspect;\nsee\n <a href=\"#pdf-debug.getlocal\">\n  <code>\n   debug.getlocal\n  </code>\n </a>\n for details about variable indices\nand names.\n</p>\n<p>\n <a href=\"#lua_getlocal\">\n  <code>\n   lua_getlocal\n  </code>\n </a>\n pushes the variable's value onto the stack\nand returns its name.\n</p>\n<p>\n In the second case,\n <code>\n  ar\n </code>\n must be\n <code>\n  NULL\n </code>\n and the function\nto be inspected must be on the top of the stack.\nIn this case, only parameters of Lua functions are visible\n(as there is no information about what variables are active)\nand no values are pushed onto the stack.\n</p>\n<p>\n Returns\n <code>\n  NULL\n </code>\n (and pushes nothing)\nwhen the index is greater than\nthe number of active local variables.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getstack",
      "body": "<pre>int lua_getstack (lua_State *L, int level, lua_Debug *ar);</pre>\n<p>\n Gets information about the interpreter runtime stack.\n</p>\n<p>\n This function fills parts of a\n <a href=\"#lua_Debug\">\n  <code>\n   lua_Debug\n  </code>\n </a>\n structure with\nan identification of the\n <em>\n  activation record\n </em>\n of the function executing at a given level.\nLevel\u00a00 is the current running function,\nwhereas level\n <em>\n  n+1\n </em>\n is the function that has called level\n <em>\n  n\n </em>\n (except for tail calls, which do not count in the stack).\nWhen called with a level greater than the stack depth,\n <a href=\"#lua_getstack\">\n  <code>\n   lua_getstack\n  </code>\n </a>\n returns 0;\notherwise it returns 1.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_getupvalue",
      "body": "<pre>const char *lua_getupvalue (lua_State *L, int funcindex, int n);</pre>\n<p>\n Gets information about the\n <code>\n  n\n </code>\n -th upvalue\nof the closure at index\n <code>\n  funcindex\n </code>\n .\nIt pushes the upvalue's value onto the stack\nand returns its name.\nReturns\n <code>\n  NULL\n </code>\n (and pushes nothing)\nwhen the index\n <code>\n  n\n </code>\n is greater than the number of upvalues.\n</p>\n<p>\n See\n <a href=\"#pdf-debug.getupvalue\">\n  <code>\n   debug.getupvalue\n  </code>\n </a>\n for more information about upvalues.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_Hook",
      "body": "<pre>typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);</pre>\n<p>\n Type for debugging hook functions.\n</p>\n<p>\n Whenever a hook is called, its\n <code>\n  ar\n </code>\n argument has its field\n <code>\n  event\n </code>\n set to the specific event that triggered the hook.\nLua identifies these events with the following constants:\n <a name=\"pdf-LUA_HOOKCALL\">\n  <code>\n   LUA_HOOKCALL\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_HOOKRET\">\n  <code>\n   LUA_HOOKRET\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_HOOKTAILCALL\">\n  <code>\n   LUA_HOOKTAILCALL\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_HOOKLINE\">\n  <code>\n   LUA_HOOKLINE\n  </code>\n </a>\n ,\nand\n <a name=\"pdf-LUA_HOOKCOUNT\">\n  <code>\n   LUA_HOOKCOUNT\n  </code>\n </a>\n .\nMoreover, for line events, the field\n <code>\n  currentline\n </code>\n is also set.\nTo get the value of any other field in\n <code>\n  ar\n </code>\n ,\nthe hook must call\n <a href=\"#lua_getinfo\">\n  <code>\n   lua_getinfo\n  </code>\n </a>\n .\n</p>\n<p>\n For call events,\n <code>\n  event\n </code>\n can be\n <code>\n  LUA_HOOKCALL\n </code>\n ,\nthe normal value, or\n <code>\n  LUA_HOOKTAILCALL\n </code>\n , for a tail call;\nin this case, there will be no corresponding return event.\n</p>\n<p>\n While Lua is running a hook, it disables other calls to hooks.\nTherefore, if a hook calls back Lua to execute a function or a chunk,\nthis execution occurs without any calls to hooks.\n</p>\n<p>\n Hook functions cannot have continuations,\nthat is, they cannot call\n <a href=\"#lua_yieldk\">\n  <code>\n   lua_yieldk\n  </code>\n </a>\n ,\n <a href=\"#lua_pcallk\">\n  <code>\n   lua_pcallk\n  </code>\n </a>\n , or\n <a href=\"#lua_callk\">\n  <code>\n   lua_callk\n  </code>\n </a>\n with a non-null\n <code>\n  k\n </code>\n .\n</p>\n<p>\n Hook functions can yield under the following conditions:\nOnly count and line events can yield;\nto yield, a hook function must finish its execution\ncalling\n <a href=\"#lua_yield\">\n  <code>\n   lua_yield\n  </code>\n </a>\n with\n <code>\n  nresults\n </code>\n equal to zero\n(that is, with no values).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_sethook",
      "body": "<pre>void lua_sethook (lua_State *L, lua_Hook f, int mask, int count);</pre>\n<p>\n Sets the debugging hook function.\n</p>\n<p>\n Argument\n <code>\n  f\n </code>\n is the hook function.\n <code>\n  mask\n </code>\n specifies on which events the hook will be called:\nit is formed by a bitwise OR of the constants\n <a name=\"pdf-LUA_MASKCALL\">\n  <code>\n   LUA_MASKCALL\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_MASKRET\">\n  <code>\n   LUA_MASKRET\n  </code>\n </a>\n ,\n <a name=\"pdf-LUA_MASKLINE\">\n  <code>\n   LUA_MASKLINE\n  </code>\n </a>\n ,\nand\n <a name=\"pdf-LUA_MASKCOUNT\">\n  <code>\n   LUA_MASKCOUNT\n  </code>\n </a>\n .\nThe\n <code>\n  count\n </code>\n argument is only meaningful when the mask\nincludes\n <code>\n  LUA_MASKCOUNT\n </code>\n .\nFor each event, the hook is called as explained below:\n</p>\n<ul>\n <li>\n  <b>\n   The call hook:\n  </b>\n  is called when the interpreter calls a function.\nThe hook is called just after Lua enters the new function.\n </li>\n <li>\n  <b>\n   The return hook:\n  </b>\n  is called when the interpreter returns from a function.\nThe hook is called just before Lua leaves the function.\n </li>\n <li>\n  <b>\n   The line hook:\n  </b>\n  is called when the interpreter is about to\nstart the execution of a new line of code,\nor when it jumps back in the code (even to the same line).\nThis event only happens while Lua is executing a Lua function.\n </li>\n <li>\n  <b>\n   The count hook:\n  </b>\n  is called after the interpreter executes every\n  <code>\n   count\n  </code>\n  instructions.\nThis event only happens while Lua is executing a Lua function.\n </li>\n</ul>\n<p>\n Hooks are disabled by setting\n <code>\n  mask\n </code>\n to zero.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_setlocal",
      "body": "<pre>const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);</pre>\n<p>\n Sets the value of a local variable of a given activation record.\nIt assigns the value on the top of the stack\nto the variable and returns its name.\nIt also pops the value from the stack.\n</p>\n<p>\n Returns\n <code>\n  NULL\n </code>\n (and pops nothing)\nwhen the index is greater than\nthe number of active local variables.\n</p>\n<p>\n Parameters\n <code>\n  ar\n </code>\n and\n <code>\n  n\n </code>\n are as in the function\n <a href=\"#lua_getlocal\">\n  <code>\n   lua_getlocal\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_setupvalue",
      "body": "<pre>const char *lua_setupvalue (lua_State *L, int funcindex, int n);</pre>\n<p>\n Sets the value of a closure's upvalue.\nIt assigns the value on the top of the stack\nto the upvalue and returns its name.\nIt also pops the value from the stack.\n</p>\n<p>\n Returns\n <code>\n  NULL\n </code>\n (and pops nothing)\nwhen the index\n <code>\n  n\n </code>\n is greater than the number of upvalues.\n</p>\n<p>\n Parameters\n <code>\n  funcindex\n </code>\n and\n <code>\n  n\n </code>\n are as in\nthe function\n <a href=\"#lua_getupvalue\">\n  <code>\n   lua_getupvalue\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_upvalueid",
      "body": "<pre>void *lua_upvalueid (lua_State *L, int funcindex, int n);</pre>\n<p>\n Returns a unique identifier for the upvalue numbered\n <code>\n  n\n </code>\n from the closure at index\n <code>\n  funcindex\n </code>\n .\n</p>\n<p>\n These unique identifiers allow a program to check whether different\nclosures share upvalues.\nLua closures that share an upvalue\n(that is, that access a same external local variable)\nwill return identical ids for those upvalue indices.\n</p>\n<p>\n Parameters\n <code>\n  funcindex\n </code>\n and\n <code>\n  n\n </code>\n are as in\nthe function\n <a href=\"#lua_getupvalue\">\n  <code>\n   lua_getupvalue\n  </code>\n </a>\n ,\nbut\n <code>\n  n\n </code>\n cannot be greater than the number of upvalues.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "lua_upvaluejoin",
      "body": "<pre>void lua_upvaluejoin (lua_State *L, int funcindex1, int n1,\n                                    int funcindex2, int n2);</pre>\n<p>\n Make the\n <code>\n  n1\n </code>\n -th upvalue of the Lua closure at index\n <code>\n  funcindex1\n </code>\n refer to the\n <code>\n  n2\n </code>\n -th upvalue of the Lua closure at index\n <code>\n  funcindex2\n </code>\n .\n</p>\n<h1>\n 5 \u2013\n <a name=\"5\">\n  The Auxiliary Library\n </a>\n</h1>\n<p>\n The\n <em>\n  auxiliary library\n </em>\n provides several convenient functions\nto interface C with Lua.\nWhile the basic API provides the primitive functions for all\ninteractions between C and Lua,\nthe auxiliary library provides higher-level functions for some\ncommon tasks.\n</p>\n<p>\n All functions and types from the auxiliary library\nare defined in header file\n <code>\n  lauxlib.h\n </code>\n and\nhave a prefix\n <code>\n  luaL_\n </code>\n .\n</p>\n<p>\n All functions in the auxiliary library are built on\ntop of the basic API,\nand so they provide nothing that cannot be done with that API.\nNevertheless, the use of the auxiliary library ensures\nmore consistency to your code.\n</p>\n<p>\n Several functions in the auxiliary library use internally some\nextra stack slots.\nWhen a function in the auxiliary library uses less than five slots,\nit does not check the stack size;\nit simply assumes that there are enough slots.\n</p>\n<p>\n Several functions in the auxiliary library are used to\ncheck C\u00a0function arguments.\nBecause the error message is formatted for arguments\n(e.g., \"\n <code>\n  bad argument #1\n </code>\n \"),\nyou should not use these functions for other stack values.\n</p>\n<p>\n Functions called\n <code>\n  luaL_check*\n </code>\n always raise an error if the check is not satisfied.\n</p>\n<h2>\n 5.1 \u2013\n <a name=\"5.1\">\n  Functions and Types\n </a>\n</h2>\n<p>\n Here we list all functions and types from the auxiliary library\nin alphabetical order.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_addchar",
      "body": "<pre>void luaL_addchar (luaL_Buffer *B, char c);</pre>\n<p>\n Adds the byte\n <code>\n  c\n </code>\n to the buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_addgsub",
      "body": "<pre>const void luaL_addgsub (luaL_Buffer *B, const char *s,\n                         const char *p, const char *r);</pre>\n<p>\n Adds a copy of the string\n <code>\n  s\n </code>\n to the buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ),\nreplacing any occurrence of the string\n <code>\n  p\n </code>\n with the string\n <code>\n  r\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_addlstring",
      "body": "<pre>void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l);</pre>\n<p>\n Adds the string pointed to by\n <code>\n  s\n </code>\n with length\n <code>\n  l\n </code>\n to\nthe buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\nThe string can contain embedded zeros.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_addsize",
      "body": "<pre>void luaL_addsize (luaL_Buffer *B, size_t n);</pre>\n<p>\n Adds to the buffer\n <code>\n  B\n </code>\n a string of length\n <code>\n  n\n </code>\n previously copied to the\nbuffer area (see\n <a href=\"#luaL_prepbuffer\">\n  <code>\n   luaL_prepbuffer\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_addstring",
      "body": "<pre>void luaL_addstring (luaL_Buffer *B, const char *s);</pre>\n<p>\n Adds the zero-terminated string pointed to by\n <code>\n  s\n </code>\n to the buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_addvalue",
      "body": "<pre>void luaL_addvalue (luaL_Buffer *B);</pre>\n<p>\n Adds the value on the top of the stack\nto the buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\nPops the value.\n</p>\n<p>\n This is the only function on string buffers that can (and must)\nbe called with an extra element on the stack,\nwhich is the value to be added to the buffer.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_argcheck",
      "body": "<pre>void luaL_argcheck (lua_State *L,\n                    int cond,\n                    int arg,\n                    const char *extramsg);</pre>\n<p>\n Checks whether\n <code>\n  cond\n </code>\n is true.\nIf it is not, raises an error with a standard message (see\n <a href=\"#luaL_argerror\">\n  <code>\n   luaL_argerror\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_argerror",
      "body": "<pre>int luaL_argerror (lua_State *L, int arg, const char *extramsg);</pre>\n<p>\n Raises an error reporting a problem with argument\n <code>\n  arg\n </code>\n of the C\u00a0function that called it,\nusing a standard message\nthat includes\n <code>\n  extramsg\n </code>\n as a comment:\n</p>\n<pre>     bad argument #<em>arg</em> to '<em>funcname</em>' (<em>extramsg</em>)\n</pre>\n<p>\n This function never returns.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_argexpected",
      "body": "<pre>void luaL_argexpected (lua_State *L,\n                       int cond,\n                       int arg,\n                       const char *tname);</pre>\n<p>\n Checks whether\n <code>\n  cond\n </code>\n is true.\nIf it is not, raises an error about the type of the argument\n <code>\n  arg\n </code>\n with a standard message (see\n <a href=\"#luaL_typeerror\">\n  <code>\n   luaL_typeerror\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_Buffer",
      "body": "<pre>typedef struct luaL_Buffer luaL_Buffer;</pre>\n<p>\n Type for a\n <em>\n  string buffer\n </em>\n .\n</p>\n<p>\n A string buffer allows C\u00a0code to build Lua strings piecemeal.\nIts pattern of use is as follows:\n</p>\n<ul>\n <li>\n  First declare a variable\n  <code>\n   b\n  </code>\n  of type\n  <a href=\"#luaL_Buffer\">\n   <code>\n    luaL_Buffer\n   </code>\n  </a>\n  .\n </li>\n <li>\n  Then initialize it with a call\n  <code>\n   luaL_buffinit(L, &amp;b)\n  </code>\n  .\n </li>\n <li>\n  Then add string pieces to the buffer calling any of\nthe\n  <code>\n   luaL_add*\n  </code>\n  functions.\n </li>\n <li>\n  Finish by calling\n  <code>\n   luaL_pushresult(&amp;b)\n  </code>\n  .\nThis call leaves the final string on the top of the stack.\n </li>\n</ul>\n<p>\n If you know beforehand the maximum size of the resulting string,\nyou can use the buffer like this:\n</p>\n<ul>\n <li>\n  First declare a variable\n  <code>\n   b\n  </code>\n  of type\n  <a href=\"#luaL_Buffer\">\n   <code>\n    luaL_Buffer\n   </code>\n  </a>\n  .\n </li>\n <li>\n  Then initialize it and preallocate a space of\nsize\n  <code>\n   sz\n  </code>\n  with a call\n  <code>\n   luaL_buffinitsize(L, &amp;b, sz)\n  </code>\n  .\n </li>\n <li>\n  Then produce the string into that space.\n </li>\n <li>\n  Finish by calling\n  <code>\n   luaL_pushresultsize(&amp;b, sz)\n  </code>\n  ,\nwhere\n  <code>\n   sz\n  </code>\n  is the total size of the resulting string\ncopied into that space (which may be less than or\nequal to the preallocated size).\n </li>\n</ul>\n<p>\n During its normal operation,\na string buffer uses a variable number of stack slots.\nSo, while using a buffer, you cannot assume that you know where\nthe top of the stack is.\nYou can use the stack between successive calls to buffer operations\nas long as that use is balanced;\nthat is,\nwhen you call a buffer operation,\nthe stack is at the same level\nit was immediately after the previous buffer operation.\n(The only exception to this rule is\n <a href=\"#luaL_addvalue\">\n  <code>\n   luaL_addvalue\n  </code>\n </a>\n .)\nAfter calling\n <a href=\"#luaL_pushresult\">\n  <code>\n   luaL_pushresult\n  </code>\n </a>\n ,\nthe stack is back to its level when the buffer was initialized,\nplus the final string on its top.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_buffaddr",
      "body": "<pre>char *luaL_buffaddr (luaL_Buffer *B);</pre>\n<p>\n Returns the address of the current content of buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\nNote that any addition to the buffer may invalidate this address.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_buffinit",
      "body": "<pre>void luaL_buffinit (lua_State *L, luaL_Buffer *B);</pre>\n<p>\n Initializes a buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\nThis function does not allocate any space;\nthe buffer must be declared as a variable.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_bufflen",
      "body": "<pre>size_t luaL_bufflen (luaL_Buffer *B);</pre>\n<p>\n Returns the length of the current content of buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_buffinitsize",
      "body": "<pre>char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz);</pre>\n<p>\n Equivalent to the sequence\n <a href=\"#luaL_buffinit\">\n  <code>\n   luaL_buffinit\n  </code>\n </a>\n ,\n <a href=\"#luaL_prepbuffsize\">\n  <code>\n   luaL_prepbuffsize\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_buffsub",
      "body": "<pre>void luaL_buffsub (luaL_Buffer *B, int n);</pre>\n<p>\n Removes\n <code>\n  n\n </code>\n bytes from the the buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\nThe buffer must have at least that many bytes.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_callmeta",
      "body": "<pre>int luaL_callmeta (lua_State *L, int obj, const char *e);</pre>\n<p>\n Calls a metamethod.\n</p>\n<p>\n If the object at index\n <code>\n  obj\n </code>\n has a metatable and this\nmetatable has a field\n <code>\n  e\n </code>\n ,\nthis function calls this field passing the object as its only argument.\nIn this case this function returns true and pushes onto the\nstack the value returned by the call.\nIf there is no metatable or no metamethod,\nthis function returns false without pushing any value on the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checkany",
      "body": "<pre>void luaL_checkany (lua_State *L, int arg);</pre>\n<p>\n Checks whether the function has an argument\nof any type (including\n <b>\n  nil\n </b>\n ) at position\n <code>\n  arg\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checkinteger",
      "body": "<pre>lua_Integer luaL_checkinteger (lua_State *L, int arg);</pre>\n<p>\n Checks whether the function argument\n <code>\n  arg\n </code>\n is an integer\n(or can be converted to an integer)\nand returns this integer.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checklstring",
      "body": "<pre>const char *luaL_checklstring (lua_State *L, int arg, size_t *l);</pre>\n<p>\n Checks whether the function argument\n <code>\n  arg\n </code>\n is a string\nand returns this string;\nif\n <code>\n  l\n </code>\n is not\n <code>\n  NULL\n </code>\n fills its referent\nwith the string's length.\n</p>\n<p>\n This function uses\n <a href=\"#lua_tolstring\">\n  <code>\n   lua_tolstring\n  </code>\n </a>\n to get its result,\nso all conversions and caveats of that function apply here.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checknumber",
      "body": "<pre>lua_Number luaL_checknumber (lua_State *L, int arg);</pre>\n<p>\n Checks whether the function argument\n <code>\n  arg\n </code>\n is a number\nand returns this number converted to a\n <code>\n  lua_Number\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checkoption",
      "body": "<pre>int luaL_checkoption (lua_State *L,\n                      int arg,\n                      const char *def,\n                      const char *const lst[]);</pre>\n<p>\n Checks whether the function argument\n <code>\n  arg\n </code>\n is a string and\nsearches for this string in the array\n <code>\n  lst\n </code>\n (which must be NULL-terminated).\nReturns the index in the array where the string was found.\nRaises an error if the argument is not a string or\nif the string cannot be found.\n</p>\n<p>\n If\n <code>\n  def\n </code>\n is not\n <code>\n  NULL\n </code>\n ,\nthe function uses\n <code>\n  def\n </code>\n as a default value when\nthere is no argument\n <code>\n  arg\n </code>\n or when this argument is\n <b>\n  nil\n </b>\n .\n</p>\n<p>\n This is a useful function for mapping strings to C\u00a0enums.\n(The usual convention in Lua libraries is\nto use strings instead of numbers to select options.)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checkstack",
      "body": "<pre>void luaL_checkstack (lua_State *L, int sz, const char *msg);</pre>\n<p>\n Grows the stack size to\n <code>\n  top + sz\n </code>\n elements,\nraising an error if the stack cannot grow to that size.\n <code>\n  msg\n </code>\n is an additional text to go into the error message\n(or\n <code>\n  NULL\n </code>\n for no additional text).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checkstring",
      "body": "<pre>const char *luaL_checkstring (lua_State *L, int arg);</pre>\n<p>\n Checks whether the function argument\n <code>\n  arg\n </code>\n is a string\nand returns this string.\n</p>\n<p>\n This function uses\n <a href=\"#lua_tolstring\">\n  <code>\n   lua_tolstring\n  </code>\n </a>\n to get its result,\nso all conversions and caveats of that function apply here.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checktype",
      "body": "<pre>void luaL_checktype (lua_State *L, int arg, int t);</pre>\n<p>\n Checks whether the function argument\n <code>\n  arg\n </code>\n has type\n <code>\n  t\n </code>\n .\nSee\n <a href=\"#lua_type\">\n  <code>\n   lua_type\n  </code>\n </a>\n for the encoding of types for\n <code>\n  t\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checkudata",
      "body": "<pre>void *luaL_checkudata (lua_State *L, int arg, const char *tname);</pre>\n<p>\n Checks whether the function argument\n <code>\n  arg\n </code>\n is a userdata\nof the type\n <code>\n  tname\n </code>\n (see\n <a href=\"#luaL_newmetatable\">\n  <code>\n   luaL_newmetatable\n  </code>\n </a>\n ) and\nreturns the userdata's memory-block address (see\n <a href=\"#lua_touserdata\">\n  <code>\n   lua_touserdata\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_checkversion",
      "body": "<pre>void luaL_checkversion (lua_State *L);</pre>\n<p>\n Checks whether the code making the call and the Lua library being called\nare using the same version of Lua and the same numeric types.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_dofile",
      "body": "<pre>int luaL_dofile (lua_State *L, const char *filename);</pre>\n<p>\n Loads and runs the given file.\nIt is defined as the following macro:\n</p>\n<pre>     (luaL_loadfile(L, filename) || lua_pcall(L, 0, LUA_MULTRET, 0))\n</pre>\n<p>\n It returns\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n if there are no errors,\nor an error code in case of errors (see\n <a href=\"#4.4.1\">\n  \u00a74.4.1\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_dostring",
      "body": "<pre>int luaL_dostring (lua_State *L, const char *str);</pre>\n<p>\n Loads and runs the given string.\nIt is defined as the following macro:\n</p>\n<pre>     (luaL_loadstring(L, str) || lua_pcall(L, 0, LUA_MULTRET, 0))\n</pre>\n<p>\n It returns\n <a href=\"#pdf-LUA_OK\">\n  <code>\n   LUA_OK\n  </code>\n </a>\n if there are no errors,\nor an error code in case of errors (see\n <a href=\"#4.4.1\">\n  \u00a74.4.1\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_error",
      "body": "<pre>int luaL_error (lua_State *L, const char *fmt, ...);</pre>\n<p>\n Raises an error.\nThe error message format is given by\n <code>\n  fmt\n </code>\n plus any extra arguments,\nfollowing the same rules of\n <a href=\"#lua_pushfstring\">\n  <code>\n   lua_pushfstring\n  </code>\n </a>\n .\nIt also adds at the beginning of the message the file name and\nthe line number where the error occurred,\nif this information is available.\n</p>\n<p>\n This function never returns,\nbut it is an idiom to use it in C\u00a0functions\nas\n <code>\n  return luaL_error(\n  <em>\n   args\n  </em>\n  )\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_execresult",
      "body": "<pre>int luaL_execresult (lua_State *L, int stat);</pre>\n<p>\n This function produces the return values for\nprocess-related functions in the standard library\n(\n <a href=\"#pdf-os.execute\">\n  <code>\n   os.execute\n  </code>\n </a>\n and\n <a href=\"#pdf-io.close\">\n  <code>\n   io.close\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_fileresult",
      "body": "<pre>int luaL_fileresult (lua_State *L, int stat, const char *fname);</pre>\n<p>\n This function produces the return values for\nfile-related functions in the standard library\n(\n <a href=\"#pdf-io.open\">\n  <code>\n   io.open\n  </code>\n </a>\n ,\n <a href=\"#pdf-os.rename\">\n  <code>\n   os.rename\n  </code>\n </a>\n ,\n <a href=\"#pdf-file:seek\">\n  <code>\n   file:seek\n  </code>\n </a>\n , etc.).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_getmetafield",
      "body": "<pre>int luaL_getmetafield (lua_State *L, int obj, const char *e);</pre>\n<p>\n Pushes onto the stack the field\n <code>\n  e\n </code>\n from the metatable\nof the object at index\n <code>\n  obj\n </code>\n and returns the type of the pushed value.\nIf the object does not have a metatable,\nor if the metatable does not have this field,\npushes nothing and returns\n <code>\n  LUA_TNIL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_getmetatable",
      "body": "<pre>int luaL_getmetatable (lua_State *L, const char *tname);</pre>\n<p>\n Pushes onto the stack the metatable associated with the name\n <code>\n  tname\n </code>\n in the registry (see\n <a href=\"#luaL_newmetatable\">\n  <code>\n   luaL_newmetatable\n  </code>\n </a>\n ),\nor\n <b>\n  nil\n </b>\n if there is no metatable associated with that name.\nReturns the type of the pushed value.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_getsubtable",
      "body": "<pre>int luaL_getsubtable (lua_State *L, int idx, const char *fname);</pre>\n<p>\n Ensures that the value\n <code>\n  t[fname]\n </code>\n ,\nwhere\n <code>\n  t\n </code>\n is the value at index\n <code>\n  idx\n </code>\n ,\nis a table,\nand pushes that table onto the stack.\nReturns true if it finds a previous table there\nand false if it creates a new table.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_gsub",
      "body": "<pre>const char *luaL_gsub (lua_State *L,\n                       const char *s,\n                       const char *p,\n                       const char *r);</pre>\n<p>\n Creates a copy of string\n <code>\n  s\n </code>\n ,\nreplacing any occurrence of the string\n <code>\n  p\n </code>\n with the string\n <code>\n  r\n </code>\n .\nPushes the resulting string on the stack and returns it.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_len",
      "body": "<pre>lua_Integer luaL_len (lua_State *L, int index);</pre>\n<p>\n Returns the \"length\" of the value at the given index\nas a number;\nit is equivalent to the '\n <code>\n  #\n </code>\n ' operator in Lua (see\n <a href=\"#3.4.7\">\n  \u00a73.4.7\n </a>\n ).\nRaises an error if the result of the operation is not an integer.\n(This case can only happen through metamethods.)\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_loadbuffer",
      "body": "<pre>int luaL_loadbuffer (lua_State *L,\n                     const char *buff,\n                     size_t sz,\n                     const char *name);</pre>\n<p>\n Equivalent to\n <a href=\"#luaL_loadbufferx\">\n  <code>\n   luaL_loadbufferx\n  </code>\n </a>\n with\n <code>\n  mode\n </code>\n equal to\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_loadbufferx",
      "body": "<pre>int luaL_loadbufferx (lua_State *L,\n                      const char *buff,\n                      size_t sz,\n                      const char *name,\n                      const char *mode);</pre>\n<p>\n Loads a buffer as a Lua chunk.\nThis function uses\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n to load the chunk in the\nbuffer pointed to by\n <code>\n  buff\n </code>\n with size\n <code>\n  sz\n </code>\n .\n</p>\n<p>\n This function returns the same results as\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n .\n <code>\n  name\n </code>\n is the chunk name,\nused for debug information and error messages.\nThe string\n <code>\n  mode\n </code>\n works as in the function\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_loadfile",
      "body": "<pre>int luaL_loadfile (lua_State *L, const char *filename);</pre>\n<p>\n Equivalent to\n <a href=\"#luaL_loadfilex\">\n  <code>\n   luaL_loadfilex\n  </code>\n </a>\n with\n <code>\n  mode\n </code>\n equal to\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_loadfilex",
      "body": "<pre>int luaL_loadfilex (lua_State *L, const char *filename,\n                                            const char *mode);</pre>\n<p>\n Loads a file as a Lua chunk.\nThis function uses\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n to load the chunk in the file\nnamed\n <code>\n  filename\n </code>\n .\nIf\n <code>\n  filename\n </code>\n is\n <code>\n  NULL\n </code>\n ,\nthen it loads from the standard input.\nThe first line in the file is ignored if it starts with a\n <code>\n  #\n </code>\n .\n</p>\n<p>\n The string\n <code>\n  mode\n </code>\n works as in the function\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n .\n</p>\n<p>\n This function returns the same results as\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n or\n <a href=\"#pdf-LUA_ERRFILE\">\n  <code>\n   LUA_ERRFILE\n  </code>\n </a>\n for file-related errors.\n</p>\n<p>\n As\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n , this function only loads the chunk;\nit does not run it.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_loadstring",
      "body": "<pre>int luaL_loadstring (lua_State *L, const char *s);</pre>\n<p>\n Loads a string as a Lua chunk.\nThis function uses\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n to load the chunk in\nthe zero-terminated string\n <code>\n  s\n </code>\n .\n</p>\n<p>\n This function returns the same results as\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n .\n</p>\n<p>\n Also as\n <a href=\"#lua_load\">\n  <code>\n   lua_load\n  </code>\n </a>\n , this function only loads the chunk;\nit does not run it.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_newlib",
      "body": "<pre>void luaL_newlib (lua_State *L, const luaL_Reg l[]);</pre>\n<p>\n Creates a new table and registers there\nthe functions in the list\n <code>\n  l\n </code>\n .\n</p>\n<p>\n It is implemented as the following macro:\n</p>\n<pre>     (luaL_newlibtable(L,l), luaL_setfuncs(L,l,0))\n</pre>\n<p>\n The array\n <code>\n  l\n </code>\n must be the actual array,\nnot a pointer to it.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_newlibtable",
      "body": "<pre>void luaL_newlibtable (lua_State *L, const luaL_Reg l[]);</pre>\n<p>\n Creates a new table with a size optimized\nto store all entries in the array\n <code>\n  l\n </code>\n (but does not actually store them).\nIt is intended to be used in conjunction with\n <a href=\"#luaL_setfuncs\">\n  <code>\n   luaL_setfuncs\n  </code>\n </a>\n (see\n <a href=\"#luaL_newlib\">\n  <code>\n   luaL_newlib\n  </code>\n </a>\n ).\n</p>\n<p>\n It is implemented as a macro.\nThe array\n <code>\n  l\n </code>\n must be the actual array,\nnot a pointer to it.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_newmetatable",
      "body": "<pre>int luaL_newmetatable (lua_State *L, const char *tname);</pre>\n<p>\n If the registry already has the key\n <code>\n  tname\n </code>\n ,\nreturns 0.\nOtherwise,\ncreates a new table to be used as a metatable for userdata,\nadds to this new table the pair\n <code>\n  __name = tname\n </code>\n ,\nadds to the registry the pair\n <code>\n  [tname] = new table\n </code>\n ,\nand returns 1.\n</p>\n<p>\n In both cases,\nthe function pushes onto the stack the final value associated\nwith\n <code>\n  tname\n </code>\n in the registry.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_newstate",
      "body": "<pre>lua_State *luaL_newstate (void);</pre>\n<p>\n Creates a new Lua state.\nIt calls\n <a href=\"#lua_newstate\">\n  <code>\n   lua_newstate\n  </code>\n </a>\n with an\nallocator based on the standard\u00a0C allocation functions\nand then sets a warning function and a panic function (see\n <a href=\"#4.4\">\n  \u00a74.4\n </a>\n )\nthat print messages to the standard error output.\n</p>\n<p>\n Returns the new state,\nor\n <code>\n  NULL\n </code>\n if there is a memory allocation error.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_openlibs",
      "body": "<pre>void luaL_openlibs (lua_State *L);</pre>\n<p>\n Opens all standard Lua libraries into the given state.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_opt",
      "body": "<pre>T luaL_opt (L, func, arg, dflt);</pre>\n<p>\n This macro is defined as follows:\n</p>\n<pre>     (lua_isnoneornil(L,(arg)) ? (dflt) : func(L,(arg)))\n</pre>\n<p>\n In words, if the argument\n <code>\n  arg\n </code>\n is nil or absent,\nthe macro results in the default\n <code>\n  dflt\n </code>\n .\nOtherwise, it results in the result of calling\n <code>\n  func\n </code>\n with the state\n <code>\n  L\n </code>\n and the argument index\n <code>\n  arg\n </code>\n as\narguments.\nNote that it evaluates the expression\n <code>\n  dflt\n </code>\n only if needed.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_optinteger",
      "body": "<pre>lua_Integer luaL_optinteger (lua_State *L,\n                             int arg,\n                             lua_Integer d);</pre>\n<p>\n If the function argument\n <code>\n  arg\n </code>\n is an integer\n(or it is convertible to an integer),\nreturns this integer.\nIf this argument is absent or is\n <b>\n  nil\n </b>\n ,\nreturns\n <code>\n  d\n </code>\n .\nOtherwise, raises an error.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_optlstring",
      "body": "<pre>const char *luaL_optlstring (lua_State *L,\n                             int arg,\n                             const char *d,\n                             size_t *l);</pre>\n<p>\n If the function argument\n <code>\n  arg\n </code>\n is a string,\nreturns this string.\nIf this argument is absent or is\n <b>\n  nil\n </b>\n ,\nreturns\n <code>\n  d\n </code>\n .\nOtherwise, raises an error.\n</p>\n<p>\n If\n <code>\n  l\n </code>\n is not\n <code>\n  NULL\n </code>\n ,\nfills its referent with the result's length.\nIf the result is\n <code>\n  NULL\n </code>\n (only possible when returning\n <code>\n  d\n </code>\n and\n <code>\n  d == NULL\n </code>\n ),\nits length is considered zero.\n</p>\n<p>\n This function uses\n <a href=\"#lua_tolstring\">\n  <code>\n   lua_tolstring\n  </code>\n </a>\n to get its result,\nso all conversions and caveats of that function apply here.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_optnumber",
      "body": "<pre>lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number d);</pre>\n<p>\n If the function argument\n <code>\n  arg\n </code>\n is a number,\nreturns this number as a\n <code>\n  lua_Number\n </code>\n .\nIf this argument is absent or is\n <b>\n  nil\n </b>\n ,\nreturns\n <code>\n  d\n </code>\n .\nOtherwise, raises an error.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_optstring",
      "body": "<pre>const char *luaL_optstring (lua_State *L,\n                            int arg,\n                            const char *d);</pre>\n<p>\n If the function argument\n <code>\n  arg\n </code>\n is a string,\nreturns this string.\nIf this argument is absent or is\n <b>\n  nil\n </b>\n ,\nreturns\n <code>\n  d\n </code>\n .\nOtherwise, raises an error.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_prepbuffer",
      "body": "<pre>char *luaL_prepbuffer (luaL_Buffer *B);</pre>\n<p>\n Equivalent to\n <a href=\"#luaL_prepbuffsize\">\n  <code>\n   luaL_prepbuffsize\n  </code>\n </a>\n with the predefined size\n <a name=\"pdf-LUAL_BUFFERSIZE\">\n  <code>\n   LUAL_BUFFERSIZE\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_prepbuffsize",
      "body": "<pre>char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz);</pre>\n<p>\n Returns an address to a space of size\n <code>\n  sz\n </code>\n where you can copy a string to be added to buffer\n <code>\n  B\n </code>\n (see\n <a href=\"#luaL_Buffer\">\n  <code>\n   luaL_Buffer\n  </code>\n </a>\n ).\nAfter copying the string into this space you must call\n <a href=\"#luaL_addsize\">\n  <code>\n   luaL_addsize\n  </code>\n </a>\n with the size of the string to actually add\nit to the buffer.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_pushfail",
      "body": "<pre>void luaL_pushfail (lua_State *L);</pre>\n<p>\n Pushes the\n <b>\n  fail\n </b>\n value onto the stack (see\n <a href=\"#6\">\n  \u00a76\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_pushresult",
      "body": "<pre>void luaL_pushresult (luaL_Buffer *B);</pre>\n<p>\n Finishes the use of buffer\n <code>\n  B\n </code>\n leaving the final string on\nthe top of the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_pushresultsize",
      "body": "<pre>void luaL_pushresultsize (luaL_Buffer *B, size_t sz);</pre>\n<p>\n Equivalent to the sequence\n <a href=\"#luaL_addsize\">\n  <code>\n   luaL_addsize\n  </code>\n </a>\n ,\n <a href=\"#luaL_pushresult\">\n  <code>\n   luaL_pushresult\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_ref",
      "body": "<pre>int luaL_ref (lua_State *L, int t);</pre>\n<p>\n Creates and returns a\n <em>\n  reference\n </em>\n ,\nin the table at index\n <code>\n  t\n </code>\n ,\nfor the object on the top of the stack (and pops the object).\n</p>\n<p>\n A reference is a unique integer key.\nAs long as you do not manually add integer keys into the table\n <code>\n  t\n </code>\n ,\n <a href=\"#luaL_ref\">\n  <code>\n   luaL_ref\n  </code>\n </a>\n ensures the uniqueness of the key it returns.\nYou can retrieve an object referred by the reference\n <code>\n  r\n </code>\n by calling\n <code>\n  lua_rawgeti(L, t, r)\n </code>\n .\nThe function\n <a href=\"#luaL_unref\">\n  <code>\n   luaL_unref\n  </code>\n </a>\n frees a reference.\n</p>\n<p>\n If the object on the top of the stack is\n <b>\n  nil\n </b>\n ,\n <a href=\"#luaL_ref\">\n  <code>\n   luaL_ref\n  </code>\n </a>\n returns the constant\n <a name=\"pdf-LUA_REFNIL\">\n  <code>\n   LUA_REFNIL\n  </code>\n </a>\n .\nThe constant\n <a name=\"pdf-LUA_NOREF\">\n  <code>\n   LUA_NOREF\n  </code>\n </a>\n is guaranteed to be different\nfrom any reference returned by\n <a href=\"#luaL_ref\">\n  <code>\n   luaL_ref\n  </code>\n </a>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_Reg",
      "body": "<pre>typedef struct luaL_Reg {\n  const char *name;\n  lua_CFunction func;\n} luaL_Reg;</pre>\n<p>\n Type for arrays of functions to be registered by\n <a href=\"#luaL_setfuncs\">\n  <code>\n   luaL_setfuncs\n  </code>\n </a>\n .\n <code>\n  name\n </code>\n is the function name and\n <code>\n  func\n </code>\n is a pointer to\nthe function.\nAny array of\n <a href=\"#luaL_Reg\">\n  <code>\n   luaL_Reg\n  </code>\n </a>\n must end with a sentinel entry\nin which both\n <code>\n  name\n </code>\n and\n <code>\n  func\n </code>\n are\n <code>\n  NULL\n </code>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_requiref",
      "body": "<pre>void luaL_requiref (lua_State *L, const char *modname,\n                    lua_CFunction openf, int glb);</pre>\n<p>\n If\n <code>\n  package.loaded[modname]\n </code>\n is not true,\ncalls the function\n <code>\n  openf\n </code>\n with the string\n <code>\n  modname\n </code>\n as an argument\nand sets the call result to\n <code>\n  package.loaded[modname]\n </code>\n ,\nas if that function has been called through\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n .\n</p>\n<p>\n If\n <code>\n  glb\n </code>\n is true,\nalso stores the module into the global\n <code>\n  modname\n </code>\n .\n</p>\n<p>\n Leaves a copy of the module on the stack.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_setfuncs",
      "body": "<pre>void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup);</pre>\n<p>\n Registers all functions in the array\n <code>\n  l\n </code>\n (see\n <a href=\"#luaL_Reg\">\n  <code>\n   luaL_Reg\n  </code>\n </a>\n ) into the table on the top of the stack\n(below optional upvalues, see next).\n</p>\n<p>\n When\n <code>\n  nup\n </code>\n is not zero,\nall functions are created with\n <code>\n  nup\n </code>\n upvalues,\ninitialized with copies of the\n <code>\n  nup\n </code>\n values\npreviously pushed on the stack\non top of the library table.\nThese values are popped from the stack after the registration.\n</p>\n<p>\n A function with a\n <code>\n  NULL\n </code>\n value represents a placeholder,\nwhich is filled with\n <b>\n  false\n </b>\n .\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_setmetatable",
      "body": "<pre>void luaL_setmetatable (lua_State *L, const char *tname);</pre>\n<p>\n Sets the metatable of the object on the top of the stack\nas the metatable associated with name\n <code>\n  tname\n </code>\n in the registry (see\n <a href=\"#luaL_newmetatable\">\n  <code>\n   luaL_newmetatable\n  </code>\n </a>\n ).\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_Stream",
      "body": "<pre>typedef struct luaL_Stream {\n  FILE *f;\n  lua_CFunction closef;\n} luaL_Stream;</pre>\n<p>\n The standard representation for file handles\nused by the standard I/O library.\n</p>\n<p>\n A file handle is implemented as a full userdata,\nwith a metatable called\n <code>\n  LUA_FILEHANDLE\n </code>\n (where\n <code>\n  LUA_FILEHANDLE\n </code>\n is a macro with the actual metatable's name).\nThe metatable is created by the I/O library\n(see\n <a href=\"#luaL_newmetatable\">\n  <code>\n   luaL_newmetatable\n  </code>\n </a>\n ).\n</p>\n<p>\n This userdata must start with the structure\n <code>\n  luaL_Stream\n </code>\n ;\nit can contain other data after this initial structure.\nThe field\n <code>\n  f\n </code>\n points to the corresponding C stream\n(or it can be\n <code>\n  NULL\n </code>\n to indicate an incompletely created handle).\nThe field\n <code>\n  closef\n </code>\n points to a Lua function\nthat will be called to close the stream\nwhen the handle is closed or collected;\nthis function receives the file handle as its sole argument and\nmust return either a true value, in case of success,\nor a false value plus an error message, in case of error.\nOnce Lua calls this field,\nit changes the field value to\n <code>\n  NULL\n </code>\n to signal that the handle is closed.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_testudata",
      "body": "<pre>void *luaL_testudata (lua_State *L, int arg, const char *tname);</pre>\n<p>\n This function works like\n <a href=\"#luaL_checkudata\">\n  <code>\n   luaL_checkudata\n  </code>\n </a>\n ,\nexcept that, when the test fails,\nit returns\n <code>\n  NULL\n </code>\n instead of raising an error.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_tolstring",
      "body": "<pre>const char *luaL_tolstring (lua_State *L, int idx, size_t *len);</pre>\n<p>\n Converts any Lua value at the given index to a C\u00a0string\nin a reasonable format.\nThe resulting string is pushed onto the stack and also\nreturned by the function (see\n <a href=\"#4.1.3\">\n  \u00a74.1.3\n </a>\n ).\nIf\n <code>\n  len\n </code>\n is not\n <code>\n  NULL\n </code>\n ,\nthe function also sets\n <code>\n  *len\n </code>\n with the string length.\n</p>\n<p>\n If the value has a metatable with a\n <code>\n  __tostring\n </code>\n field,\nthen\n <code>\n  luaL_tolstring\n </code>\n calls the corresponding metamethod\nwith the value as argument,\nand uses the result of the call as its result.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_traceback",
      "body": "<pre>void luaL_traceback (lua_State *L, lua_State *L1, const char *msg,\n                     int level);</pre>\n<p>\n Creates and pushes a traceback of the stack\n <code>\n  L1\n </code>\n .\nIf\n <code>\n  msg\n </code>\n is not\n <code>\n  NULL\n </code>\n , it is appended\nat the beginning of the traceback.\nThe\n <code>\n  level\n </code>\n parameter tells at which level\nto start the traceback.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_typeerror",
      "body": "<pre>const char *luaL_typeerror (lua_State *L,\n                                      int arg,\n                                      const char *tname);</pre>\n<p>\n Raises a type error for the argument\n <code>\n  arg\n </code>\n of the C\u00a0function that called it,\nusing a standard message;\n <code>\n  tname\n </code>\n is a \"name\" for the expected type.\nThis function never returns.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_typename",
      "body": "<pre>const char *luaL_typename (lua_State *L, int index);</pre>\n<p>\n Returns the name of the type of the value at the given index.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_unref",
      "body": "<pre>void luaL_unref (lua_State *L, int t, int ref);</pre>\n<p>\n Releases the reference\n <code>\n  ref\n </code>\n from the table at index\n <code>\n  t\n </code>\n (see\n <a href=\"#luaL_ref\">\n  <code>\n   luaL_ref\n  </code>\n </a>\n ).\nThe entry is removed from the table,\nso that the referred object can be collected.\nThe reference\n <code>\n  ref\n </code>\n is also freed to be used again.\n</p>\n<p>\n If\n <code>\n  ref\n </code>\n is\n <a href=\"#pdf-LUA_NOREF\">\n  <code>\n   LUA_NOREF\n  </code>\n </a>\n or\n <a href=\"#pdf-LUA_REFNIL\">\n  <code>\n   LUA_REFNIL\n  </code>\n </a>\n ,\n <a href=\"#luaL_unref\">\n  <code>\n   luaL_unref\n  </code>\n </a>\n does nothing.\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "luaL_where",
      "body": "<pre>void luaL_where (lua_State *L, int lvl);</pre>\n<p>\n Pushes onto the stack a string identifying the current position\nof the control at level\n <code>\n  lvl\n </code>\n in the call stack.\nTypically this string has the following format:\n</p>\n<pre>     <em>chunkname</em>:<em>currentline</em>:\n</pre>\n<p>\n Level\u00a00 is the running function,\nlevel\u00a01 is the function that called the running function,\netc.\n</p>\n<p>\n This function is used to build a prefix for error messages.\n</p>\n<h1>\n 6 \u2013\n <a name=\"6\">\n  The Standard Libraries\n </a>\n</h1>\n<p>\n The standard Lua libraries provide useful functions\nthat are implemented in\u00a0C through the C\u00a0API.\nSome of these functions provide essential services to the language\n(e.g.,\n <a href=\"#pdf-type\">\n  <code>\n   type\n  </code>\n </a>\n and\n <a href=\"#pdf-getmetatable\">\n  <code>\n   getmetatable\n  </code>\n </a>\n );\nothers provide access to outside services (e.g., I/O);\nand others could be implemented in Lua itself,\nbut that for different reasons\ndeserve an implementation in C (e.g.,\n <a href=\"#pdf-table.sort\">\n  <code>\n   table.sort\n  </code>\n </a>\n ).\n</p>\n<p>\n All libraries are implemented through the official C\u00a0API\nand are provided as separate C\u00a0modules.\nUnless otherwise noted,\nthese library functions do not adjust its number of arguments\nto its expected parameters.\nFor instance, a function documented as\n <code>\n  foo(arg)\n </code>\n should not be called without an argument.\n</p>\n<p>\n The notation\n <b>\n  fail\n </b>\n means a false value representing\nsome kind of failure.\n(Currently,\n <b>\n  fail\n </b>\n is equal to\n <b>\n  nil\n </b>\n ,\nbut that may change in future versions.\nThe recommendation is to always test the success of these functions\nwith\n <code>\n  (not status)\n </code>\n , instead of\n <code>\n  (status == nil)\n </code>\n .)\n</p>\n<p>\n Currently, Lua has the following standard libraries:\n</p>\n<ul>\n <li>\n  basic library (\n  <a href=\"#6.1\">\n   \u00a76.1\n  </a>\n  );\n </li>\n <li>\n  coroutine library (\n  <a href=\"#6.2\">\n   \u00a76.2\n  </a>\n  );\n </li>\n <li>\n  package library (\n  <a href=\"#6.3\">\n   \u00a76.3\n  </a>\n  );\n </li>\n <li>\n  string manipulation (\n  <a href=\"#6.4\">\n   \u00a76.4\n  </a>\n  );\n </li>\n <li>\n  basic UTF-8 support (\n  <a href=\"#6.5\">\n   \u00a76.5\n  </a>\n  );\n </li>\n <li>\n  table manipulation (\n  <a href=\"#6.6\">\n   \u00a76.6\n  </a>\n  );\n </li>\n <li>\n  mathematical functions (\n  <a href=\"#6.7\">\n   \u00a76.7\n  </a>\n  ) (sin, log, etc.);\n </li>\n <li>\n  input and output (\n  <a href=\"#6.8\">\n   \u00a76.8\n  </a>\n  );\n </li>\n <li>\n  operating system facilities (\n  <a href=\"#6.9\">\n   \u00a76.9\n  </a>\n  );\n </li>\n <li>\n  debug facilities (\n  <a href=\"#6.10\">\n   \u00a76.10\n  </a>\n  ).\n </li>\n</ul>\n<p>\n Except for the basic and the package libraries,\neach library provides all its functions as fields of a global table\nor as methods of its objects.\n</p>\n<p>\n To have access to these libraries,\nthe C\u00a0host program should call the\n <a href=\"#luaL_openlibs\">\n  <code>\n   luaL_openlibs\n  </code>\n </a>\n function,\nwhich opens all standard libraries.\nAlternatively,\nthe host program can open them individually by using\n <a href=\"#luaL_requiref\">\n  <code>\n   luaL_requiref\n  </code>\n </a>\n to call\n <a name=\"pdf-luaopen_base\">\n  <code>\n   luaopen_base\n  </code>\n </a>\n (for the basic library),\n <a name=\"pdf-luaopen_package\">\n  <code>\n   luaopen_package\n  </code>\n </a>\n (for the package library),\n <a name=\"pdf-luaopen_coroutine\">\n  <code>\n   luaopen_coroutine\n  </code>\n </a>\n (for the coroutine library),\n <a name=\"pdf-luaopen_string\">\n  <code>\n   luaopen_string\n  </code>\n </a>\n (for the string library),\n <a name=\"pdf-luaopen_utf8\">\n  <code>\n   luaopen_utf8\n  </code>\n </a>\n (for the UTF-8 library),\n <a name=\"pdf-luaopen_table\">\n  <code>\n   luaopen_table\n  </code>\n </a>\n (for the table library),\n <a name=\"pdf-luaopen_math\">\n  <code>\n   luaopen_math\n  </code>\n </a>\n (for the mathematical library),\n <a name=\"pdf-luaopen_io\">\n  <code>\n   luaopen_io\n  </code>\n </a>\n (for the I/O library),\n <a name=\"pdf-luaopen_os\">\n  <code>\n   luaopen_os\n  </code>\n </a>\n (for the operating system library),\nand\n <a name=\"pdf-luaopen_debug\">\n  <code>\n   luaopen_debug\n  </code>\n </a>\n (for the debug library).\nThese functions are declared in\n <a name=\"pdf-lualib.h\">\n  <code>\n   lualib.h\n  </code>\n </a>\n .\n</p>\n<h2>\n 6.1 \u2013\n <a name=\"6.1\">\n  Basic Functions\n </a>\n</h2>\n<p>\n The basic library provides core functions to Lua.\nIf you do not include this library in your application,\nyou should check carefully whether you need to provide\nimplementations for some of its facilities.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "assert (v [, message])",
      "body": "<p>\n Raises an error if\nthe value of its argument\n <code>\n  v\n </code>\n is false (i.e.,\n <b>\n  nil\n </b>\n or\n <b>\n  false\n </b>\n );\notherwise, returns all its arguments.\nIn case of error,\n <code>\n  message\n </code>\n is the error object;\nwhen absent, it defaults to \"\n <code>\n  assertion failed!\n </code>\n \"\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "collectgarbage ([opt [, arg]])",
      "body": "<p>\n This function is a generic interface to the garbage collector.\nIt performs different functions according to its first argument,\n <code>\n  opt\n </code>\n :\n</p>\n<ul>\n <li>\n  <b>\n   \"\n   <code>\n    collect\n   </code>\n   \":\n  </b>\n  Performs a full garbage-collection cycle.\nThis is the default option.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    stop\n   </code>\n   \":\n  </b>\n  Stops automatic execution of the garbage collector.\nThe collector will run only when explicitly invoked,\nuntil a call to restart it.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    restart\n   </code>\n   \":\n  </b>\n  Restarts automatic execution of the garbage collector.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    count\n   </code>\n   \":\n  </b>\n  Returns the total memory in use by Lua in Kbytes.\nThe value has a fractional part,\nso that it multiplied by 1024\ngives the exact number of bytes in use by Lua.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    step\n   </code>\n   \":\n  </b>\n  Performs a garbage-collection step.\nThe step \"size\" is controlled by\n  <code>\n   arg\n  </code>\n  .\nWith a zero value,\nthe collector will perform one basic (indivisible) step.\nFor non-zero values,\nthe collector will perform as if that amount of memory\n(in Kbytes) had been allocated by Lua.\nReturns\n  <b>\n   true\n  </b>\n  if the step finished a collection cycle.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    isrunning\n   </code>\n   \":\n  </b>\n  Returns a boolean that tells whether the collector is running\n(i.e., not stopped).\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    incremental\n   </code>\n   \":\n  </b>\n  Change the collector mode to incremental.\nThis option can be followed by three numbers:\nthe garbage-collector pause,\nthe step multiplier,\nand the step size (see\n  <a href=\"#2.5.1\">\n   \u00a72.5.1\n  </a>\n  ).\nA zero means to not change that value.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    generational\n   </code>\n   \":\n  </b>\n  Change the collector mode to generational.\nThis option can be followed by two numbers:\nthe garbage-collector minor multiplier\nand the major multiplier (see\n  <a href=\"#2.5.2\">\n   \u00a72.5.2\n  </a>\n  ).\nA zero means to not change that value.\n </li>\n</ul>\n<p>\n See\n <a href=\"#2.5\">\n  \u00a72.5\n </a>\n for more details about garbage collection\nand some of these options.\n</p>\n<p>\n This function should not be called by a finalizer.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "dofile ([filename])",
      "body": "<code>\n dofile\n</code>\n<code>\n stdin\n</code>\n<code>\n dofile\n</code>\n<code>\n dofile\n</code>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "error (message [, level])",
      "body": "<a href=\"#2.3\">\n \u00a72.3\n</a>\n<code>\n message\n</code>\n<p>\n Usually,\n <code>\n  error\n </code>\n adds some information about the error position\nat the beginning of the message, if the message is a string.\nThe\n <code>\n  level\n </code>\n argument specifies how to get the error position.\nWith level\u00a01 (the default), the error position is where the\n <code>\n  error\n </code>\n function was called.\nLevel\u00a02 points the error to where the function\nthat called\n <code>\n  error\n </code>\n was called; and so on.\nPassing a level\u00a00 avoids the addition of error position information\nto the message.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "_G",
      "body": "<a href=\"#2.2\">\n \u00a72.2\n</a>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "getmetatable (object)",
      "body": "<p>\n If\n <code>\n  object\n </code>\n does not have a metatable, returns\n <b>\n  nil\n </b>\n .\nOtherwise,\nif the object's metatable has a\n <code>\n  __metatable\n </code>\n field,\nreturns the associated value.\nOtherwise, returns the metatable of the given object.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "ipairs (t)",
      "body": "<p>\n Returns three values (an iterator function, the table\n <code>\n  t\n </code>\n , and 0)\nso that the construction\n</p>\n<pre>     for i,v in ipairs(t) do <em>body</em> end\n</pre>\n<p>\n will iterate over the key\u2013value pairs\n(\n <code>\n  1,t[1]\n </code>\n ), (\n <code>\n  2,t[2]\n </code>\n ), ...,\nup to the first absent index.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "load (chunk [, chunkname [, mode [, env]]])",
      "body": "<p>\n Loads a chunk.\n</p>\n<p>\n If\n <code>\n  chunk\n </code>\n is a string, the chunk is this string.\nIf\n <code>\n  chunk\n </code>\n is a function,\n <code>\n  load\n </code>\n calls it repeatedly to get the chunk pieces.\nEach call to\n <code>\n  chunk\n </code>\n must return a string that concatenates\nwith previous results.\nA return of an empty string,\n <b>\n  nil\n </b>\n , or no value signals the end of the chunk.\n</p>\n<p>\n If there are no syntactic errors,\n <code>\n  load\n </code>\n returns the compiled chunk as a function;\notherwise, it returns\n <b>\n  fail\n </b>\n plus the error message.\n</p>\n<p>\n When you load a main chunk,\nthe resulting function will always have exactly one upvalue,\nthe\n <code>\n  _ENV\n </code>\n variable (see\n <a href=\"#2.2\">\n  \u00a72.2\n </a>\n ).\nHowever,\nwhen you load a binary chunk created from a function (see\n <a href=\"#pdf-string.dump\">\n  <code>\n   string.dump\n  </code>\n </a>\n ),\nthe resulting function can have an arbitrary number of upvalues,\nand there is no guarantee that its first upvalue will be\nthe\n <code>\n  _ENV\n </code>\n variable.\n(A non-main function may not even have an\n <code>\n  _ENV\n </code>\n upvalue.)\n</p>\n<p>\n Regardless, if the resulting function has any upvalues,\nits first upvalue is set to the value of\n <code>\n  env\n </code>\n ,\nif that parameter is given,\nor to the value of the global environment.\nOther upvalues are initialized with\n <b>\n  nil\n </b>\n .\nAll upvalues are fresh, that is,\nthey are not shared with any other function.\n</p>\n<p>\n <code>\n  chunkname\n </code>\n is used as the name of the chunk for error messages\nand debug information (see\n <a href=\"#4.7\">\n  \u00a74.7\n </a>\n ).\nWhen absent,\nit defaults to\n <code>\n  chunk\n </code>\n , if\n <code>\n  chunk\n </code>\n is a string,\nor to \"\n <code>\n  =(load)\n </code>\n \" otherwise.\n</p>\n<p>\n The string\n <code>\n  mode\n </code>\n controls whether the chunk can be text or binary\n(that is, a precompiled chunk).\nIt may be the string \"\n <code>\n  b\n </code>\n \" (only binary chunks),\n\"\n <code>\n  t\n </code>\n \" (only text chunks),\nor \"\n <code>\n  bt\n </code>\n \" (both binary and text).\nThe default is \"\n <code>\n  bt\n </code>\n \".\n</p>\n<p>\n It is safe to load malformed binary chunks;\n <code>\n  load\n </code>\n signals an appropriate error.\nHowever,\nLua does not check the consistency of the code inside binary chunks;\nrunning maliciously crafted bytecode can crash the interpreter.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "loadfile ([filename [, mode [, env]]])",
      "body": "<p>\n Similar to\n <a href=\"#pdf-load\">\n  <code>\n   load\n  </code>\n </a>\n ,\nbut gets the chunk from file\n <code>\n  filename\n </code>\n or from the standard input,\nif no file name is given.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "next (table [, index])",
      "body": "<p>\n Allows a program to traverse all fields of a table.\nIts first argument is a table and its second argument\nis an index in this table.\nA call to\n <code>\n  next\n </code>\n returns the next index of the table\nand its associated value.\nWhen called with\n <b>\n  nil\n </b>\n as its second argument,\n <code>\n  next\n </code>\n returns an initial index\nand its associated value.\nWhen called with the last index,\nor with\n <b>\n  nil\n </b>\n in an empty table,\n <code>\n  next\n </code>\n returns\n <b>\n  nil\n </b>\n .\nIf the second argument is absent, then it is interpreted as\n <b>\n  nil\n </b>\n .\nIn particular,\nyou can use\n <code>\n  next(t)\n </code>\n to check whether a table is empty.\n</p>\n<p>\n The order in which the indices are enumerated is not specified,\n <em>\n  even for numeric indices\n </em>\n .\n(To traverse a table in numerical order,\nuse a numerical\n <b>\n  for\n </b>\n .)\n</p>\n<p>\n You should not assign any value to a non-existent field in a table\nduring its traversal.\nYou may however modify existing fields.\nIn particular, you may set existing fields to nil.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "pairs (t)",
      "body": "<p>\n If\n <code>\n  t\n </code>\n has a metamethod\n <code>\n  __pairs\n </code>\n ,\ncalls it with\n <code>\n  t\n </code>\n as argument and returns the first three\nresults from the call.\n</p>\n<p>\n Otherwise,\nreturns three values: the\n <a href=\"#pdf-next\">\n  <code>\n   next\n  </code>\n </a>\n function, the table\n <code>\n  t\n </code>\n , and\n <b>\n  nil\n </b>\n ,\nso that the construction\n</p>\n<pre>     for k,v in pairs(t) do <em>body</em> end\n</pre>\n<p>\n will iterate over all key\u2013value pairs of table\n <code>\n  t\n </code>\n .\n</p>\n<p>\n See function\n <a href=\"#pdf-next\">\n  <code>\n   next\n  </code>\n </a>\n for the caveats of modifying\nthe table during its traversal.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "pcall (f [, arg1, \u00b7\u00b7\u00b7])",
      "body": "<p>\n Calls the function\n <code>\n  f\n </code>\n with\nthe given arguments in\n <em>\n  protected mode\n </em>\n .\nThis means that any error inside\n <code>\n  f\n </code>\n is not propagated;\ninstead,\n <code>\n  pcall\n </code>\n catches the error\nand returns a status code.\nIts first result is the status code (a boolean),\nwhich is\n <b>\n  true\n </b>\n if the call succeeds without errors.\nIn such case,\n <code>\n  pcall\n </code>\n also returns all results from the call,\nafter this first result.\nIn case of any error,\n <code>\n  pcall\n </code>\n returns\n <b>\n  false\n </b>\n plus the error object.\nNote that errors caught by\n <code>\n  pcall\n </code>\n do not call a message handler.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "print (\u00b7\u00b7\u00b7)",
      "body": "<code>\n stdout\n</code>\n<a href=\"#pdf-tostring\">\n <code>\n  tostring\n </code>\n</a>\n<p>\n The function\n <code>\n  print\n </code>\n is not intended for formatted output,\nbut only as a quick way to show a value,\nfor instance for debugging.\nFor complete control over the output,\nuse\n <a href=\"#pdf-string.format\">\n  <code>\n   string.format\n  </code>\n </a>\n and\n <a href=\"#pdf-io.write\">\n  <code>\n   io.write\n  </code>\n </a>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "rawequal (v1, v2)",
      "body": "<code>\n v1\n</code>\n<code>\n v2\n</code>\n<code>\n __eq\n</code>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "rawget (table, index)",
      "body": "<code>\n table[index]\n</code>\n<code>\n __index\n</code>\n<code>\n table\n</code>\n<code>\n index\n</code>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "rawlen (v)",
      "body": "<code>\n v\n</code>\n<code>\n __len\n</code>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "rawset (table, index, value)",
      "body": "<code>\n table[index]\n</code>\n<code>\n value\n</code>\n<code>\n __newindex\n</code>\n<code>\n table\n</code>\n<code>\n index\n</code>\n<b>\n nil\n</b>\n<code>\n value\n</code>\n<p>\n This function returns\n <code>\n  table\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "select (index, \u00b7\u00b7\u00b7)",
      "body": "<p>\n If\n <code>\n  index\n </code>\n is a number,\nreturns all arguments after argument number\n <code>\n  index\n </code>\n ;\na negative number indexes from the end (-1 is the last argument).\nOtherwise,\n <code>\n  index\n </code>\n must be the string\n <code>\n  \"#\"\n </code>\n ,\nand\n <code>\n  select\n </code>\n returns the total number of extra arguments it received.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "setmetatable (table, metatable)",
      "body": "<p>\n Sets the metatable for the given table.\nIf\n <code>\n  metatable\n </code>\n is\n <b>\n  nil\n </b>\n ,\nremoves the metatable of the given table.\nIf the original metatable has a\n <code>\n  __metatable\n </code>\n field,\nraises an error.\n</p>\n<p>\n This function returns\n <code>\n  table\n </code>\n .\n</p>\n<p>\n To change the metatable of other types from Lua code,\nyou must use the debug library (\n <a href=\"#6.10\">\n  \u00a76.10\n </a>\n ).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "tonumber (e [, base])",
      "body": "<p>\n When called with no\n <code>\n  base\n </code>\n ,\n <code>\n  tonumber\n </code>\n tries to convert its argument to a number.\nIf the argument is already a number or\na string convertible to a number,\nthen\n <code>\n  tonumber\n </code>\n returns this number;\notherwise, it returns\n <b>\n  fail\n </b>\n .\n</p>\n<p>\n The conversion of strings can result in integers or floats,\naccording to the lexical conventions of Lua (see\n <a href=\"#3.1\">\n  \u00a73.1\n </a>\n ).\nThe string may have leading and trailing spaces and a sign.\n</p>\n<p>\n When called with\n <code>\n  base\n </code>\n ,\nthen\n <code>\n  e\n </code>\n must be a string to be interpreted as\nan integer numeral in that base.\nThe base may be any integer between 2 and 36, inclusive.\nIn bases above\u00a010, the letter '\n <code>\n  A\n </code>\n ' (in either upper or lower case)\nrepresents\u00a010, '\n <code>\n  B\n </code>\n ' represents\u00a011, and so forth,\nwith '\n <code>\n  Z\n </code>\n ' representing 35.\nIf the string\n <code>\n  e\n </code>\n is not a valid numeral in the given base,\nthe function returns\n <b>\n  fail\n </b>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "tostring (v)",
      "body": "<p>\n Receives a value of any type and\nconverts it to a string in a human-readable format.\n</p>\n<p>\n If the metatable of\n <code>\n  v\n </code>\n has a\n <code>\n  __tostring\n </code>\n field,\nthen\n <code>\n  tostring\n </code>\n calls the corresponding value\nwith\n <code>\n  v\n </code>\n as argument,\nand uses the result of the call as its result.\nOtherwise, if the metatable of\n <code>\n  v\n </code>\n has a\n <code>\n  __name\n </code>\n field\nwith a string value,\n <code>\n  tostring\n </code>\n may use that string in its final result.\n</p>\n<p>\n For complete control of how numbers are converted,\nuse\n <a href=\"#pdf-string.format\">\n  <code>\n   string.format\n  </code>\n </a>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "type (v)",
      "body": "<p>\n Returns the type of its only argument, coded as a string.\nThe possible results of this function are\n\"\n <code>\n  nil\n </code>\n \" (a string, not the value\n <b>\n  nil\n </b>\n ),\n\"\n <code>\n  number\n </code>\n \",\n\"\n <code>\n  string\n </code>\n \",\n\"\n <code>\n  boolean\n </code>\n \",\n\"\n <code>\n  table\n </code>\n \",\n\"\n <code>\n  function\n </code>\n \",\n\"\n <code>\n  thread\n </code>\n \",\nand \"\n <code>\n  userdata\n </code>\n \".\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "_VERSION",
      "body": "<p>\n A global variable (not a function) that\nholds a string containing the running Lua version.\nThe current value of this variable is \"\n <code>\n  Lua 5.4\n </code>\n \".\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "warn (msg1, \u00b7\u00b7\u00b7)",
      "body": "<p>\n Emits a warning with a message composed by the concatenation\nof all its arguments (which should be strings).\n</p>\n<p>\n By convention,\na one-piece message starting with '\n <code>\n  @\n </code>\n '\nis intended to be a\n <em>\n  control message\n </em>\n ,\nwhich is a message to the warning system itself.\nIn particular, the standard warning function in Lua\nrecognizes the control messages \"\n <code>\n  @off\n </code>\n \",\nto stop the emission of warnings,\nand \"\n <code>\n  @on\n </code>\n \", to (re)start the emission;\nit ignores unknown control messages.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "xpcall (f, msgh [, arg1, \u00b7\u00b7\u00b7])",
      "body": "<p>\n This function is similar to\n <a href=\"#pdf-pcall\">\n  <code>\n   pcall\n  </code>\n </a>\n ,\nexcept that it sets a new message handler\n <code>\n  msgh\n </code>\n .\n</p>\n<h2>\n 6.2 \u2013\n <a name=\"6.2\">\n  Coroutine Manipulation\n </a>\n</h2>\n<p>\n This library comprises the operations to manipulate coroutines,\nwhich come inside the table\n <a name=\"pdf-coroutine\">\n  <code>\n   coroutine\n  </code>\n </a>\n .\nSee\n <a href=\"#2.6\">\n  \u00a72.6\n </a>\n for a general description of coroutines.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "coroutine.close (co)",
      "body": "<p>\n Closes coroutine\n <code>\n  co\n </code>\n ,\nthat is,\ncloses all its pending to-be-closed variables\nand puts the coroutine in a dead state.\nThe given coroutine must be dead or suspended.\nIn case of error\n(either the original error that stopped the coroutine or\nerrors in closing methods),\nreturns\n <b>\n  false\n </b>\n plus the error object;\notherwise returns\n <b>\n  true\n </b>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "coroutine.create (f)",
      "body": "<p>\n Creates a new coroutine, with body\n <code>\n  f\n </code>\n .\n <code>\n  f\n </code>\n must be a function.\nReturns this new coroutine,\nan object with type\n <code>\n  \"thread\"\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "coroutine.isyieldable ([co])",
      "body": "<p>\n Returns\n <b>\n  true\n </b>\n when the coroutine\n <code>\n  co\n </code>\n can yield.\nThe default for\n <code>\n  co\n </code>\n is the running coroutine.\n</p>\n<p>\n A coroutine is yieldable if it is not the main thread and\nit is not inside a non-yieldable C\u00a0function.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "coroutine.resume (co [, val1, \u00b7\u00b7\u00b7])",
      "body": "<p>\n Starts or continues the execution of coroutine\n <code>\n  co\n </code>\n .\nThe first time you resume a coroutine,\nit starts running its body.\nThe values\n <code>\n  val1\n </code>\n , ... are passed\nas the arguments to the body function.\nIf the coroutine has yielded,\n <code>\n  resume\n </code>\n restarts it;\nthe values\n <code>\n  val1\n </code>\n , ... are passed\nas the results from the yield.\n</p>\n<p>\n If the coroutine runs without any errors,\n <code>\n  resume\n </code>\n returns\n <b>\n  true\n </b>\n plus any values passed to\n <code>\n  yield\n </code>\n (when the coroutine yields) or any values returned by the body function\n(when the coroutine terminates).\nIf there is any error,\n <code>\n  resume\n </code>\n returns\n <b>\n  false\n </b>\n plus the error message.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "coroutine.running ()",
      "body": "<p>\n Returns the running coroutine plus a boolean,\n <b>\n  true\n </b>\n when the running coroutine is the main one.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "coroutine.status (co)",
      "body": "<p>\n Returns the status of the coroutine\n <code>\n  co\n </code>\n , as a string:\n <code>\n  \"running\"\n </code>\n ,\nif the coroutine is running\n(that is, it is the one that called\n <code>\n  status\n </code>\n );\n <code>\n  \"suspended\"\n </code>\n , if the coroutine is suspended in a call to\n <code>\n  yield\n </code>\n ,\nor if it has not started running yet;\n <code>\n  \"normal\"\n </code>\n if the coroutine is active but not running\n(that is, it has resumed another coroutine);\nand\n <code>\n  \"dead\"\n </code>\n if the coroutine has finished its body function,\nor if it has stopped with an error.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "coroutine.wrap (f)",
      "body": "<p>\n Creates a new coroutine, with body\n <code>\n  f\n </code>\n ;\n <code>\n  f\n </code>\n must be a function.\nReturns a function that resumes the coroutine each time it is called.\nAny arguments passed to this function behave as the\nextra arguments to\n <code>\n  resume\n </code>\n .\nThe function returns the same values returned by\n <code>\n  resume\n </code>\n ,\nexcept the first boolean.\nIn case of error,\nthe function closes the coroutine and propagates the error.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "coroutine.yield (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Suspends the execution of the calling coroutine.\nAny arguments to\n <code>\n  yield\n </code>\n are passed as extra results to\n <code>\n  resume\n </code>\n .\n</p>\n<h2>\n 6.3 \u2013\n <a name=\"6.3\">\n  Modules\n </a>\n</h2>\n<p>\n The package library provides basic\nfacilities for loading modules in Lua.\nIt exports one function directly in the global environment:\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n .\nEverything else is exported in the table\n <a name=\"pdf-package\">\n  <code>\n   package\n  </code>\n </a>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "require (modname)",
      "body": "<p>\n Loads the given module.\nThe function starts by looking into the\n <a href=\"#pdf-package.loaded\">\n  <code>\n   package.loaded\n  </code>\n </a>\n table\nto determine whether\n <code>\n  modname\n </code>\n is already loaded.\nIf it is, then\n <code>\n  require\n </code>\n returns the value stored\nat\n <code>\n  package.loaded[modname]\n </code>\n .\n(The absence of a second result in this case\nsignals that this call did not have to load the module.)\nOtherwise, it tries to find a\n <em>\n  loader\n </em>\n for the module.\n</p>\n<p>\n To find a loader,\n <code>\n  require\n </code>\n is guided by the table\n <a href=\"#pdf-package.searchers\">\n  <code>\n   package.searchers\n  </code>\n </a>\n .\nEach item in this table is a search function,\nthat searches for the module in a particular way.\nBy changing this table,\nwe can change how\n <code>\n  require\n </code>\n looks for a module.\nThe following explanation is based on the default configuration\nfor\n <a href=\"#pdf-package.searchers\">\n  <code>\n   package.searchers\n  </code>\n </a>\n .\n</p>\n<p>\n First\n <code>\n  require\n </code>\n queries\n <code>\n  package.preload[modname]\n </code>\n .\nIf it has a value,\nthis value (which must be a function) is the loader.\nOtherwise\n <code>\n  require\n </code>\n searches for a Lua loader using the\npath stored in\n <a href=\"#pdf-package.path\">\n  <code>\n   package.path\n  </code>\n </a>\n .\nIf that also fails, it searches for a C\u00a0loader using the\npath stored in\n <a href=\"#pdf-package.cpath\">\n  <code>\n   package.cpath\n  </code>\n </a>\n .\nIf that also fails,\nit tries an\n <em>\n  all-in-one\n </em>\n loader (see\n <a href=\"#pdf-package.searchers\">\n  <code>\n   package.searchers\n  </code>\n </a>\n ).\n</p>\n<p>\n Once a loader is found,\n <code>\n  require\n </code>\n calls the loader with two arguments:\n <code>\n  modname\n </code>\n and an extra value,\na\n <em>\n  loader data\n </em>\n ,\nalso returned by the searcher.\nThe loader data can be any value useful to the module;\nfor the default searchers,\nit indicates where the loader was found.\n(For instance, if the loader came from a file,\nthis extra value is the file path.)\nIf the loader returns any non-nil value,\n <code>\n  require\n </code>\n assigns the returned value to\n <code>\n  package.loaded[modname]\n </code>\n .\nIf the loader does not return a non-nil value and\nhas not assigned any value to\n <code>\n  package.loaded[modname]\n </code>\n ,\nthen\n <code>\n  require\n </code>\n assigns\n <b>\n  true\n </b>\n to this entry.\nIn any case,\n <code>\n  require\n </code>\n returns the\nfinal value of\n <code>\n  package.loaded[modname]\n </code>\n .\nBesides that value,\n <code>\n  require\n </code>\n also returns as a second result\nthe loader data returned by the searcher,\nwhich indicates how\n <code>\n  require\n </code>\n found the module.\n</p>\n<p>\n If there is any error loading or running the module,\nor if it cannot find any loader for the module,\nthen\n <code>\n  require\n </code>\n raises an error.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "package.config",
      "body": "<p>\n A string describing some compile-time configurations for packages.\nThis string is a sequence of lines:\n</p>\n<ul>\n <li>\n  The first line is the directory separator string.\nDefault is '\n  <code>\n   \\\n  </code>\n  ' for Windows and '\n  <code>\n   /\n  </code>\n  ' for all other systems.\n </li>\n <li>\n  The second line is the character that separates templates in a path.\nDefault is '\n  <code>\n   ;\n  </code>\n  '.\n </li>\n <li>\n  The third line is the string that marks the\nsubstitution points in a template.\nDefault is '\n  <code>\n   ?\n  </code>\n  '.\n </li>\n <li>\n  The fourth line is a string that, in a path in Windows,\nis replaced by the executable's directory.\nDefault is '\n  <code>\n   !\n  </code>\n  '.\n </li>\n <li>\n  The fifth line is a mark to ignore all text after it\nwhen building the\n  <code>\n   luaopen_\n  </code>\n  function name.\nDefault is '\n  <code>\n   -\n  </code>\n  '.\n </li>\n</ul>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "package.cpath",
      "body": "<p>\n A string with the path used by\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n to search for a C\u00a0loader.\n</p>\n<p>\n Lua initializes the C\u00a0path\n <a href=\"#pdf-package.cpath\">\n  <code>\n   package.cpath\n  </code>\n </a>\n in the same way\nit initializes the Lua path\n <a href=\"#pdf-package.path\">\n  <code>\n   package.path\n  </code>\n </a>\n ,\nusing the environment variable\n <a name=\"pdf-LUA_CPATH_5_4\">\n  <code>\n   LUA_CPATH_5_4\n  </code>\n </a>\n ,\nor the environment variable\n <a name=\"pdf-LUA_CPATH\">\n  <code>\n   LUA_CPATH\n  </code>\n </a>\n ,\nor a default path defined in\n <code>\n  luaconf.h\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "package.loaded",
      "body": "<p>\n A table used by\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n to control which\nmodules are already loaded.\nWhen you require a module\n <code>\n  modname\n </code>\n and\n <code>\n  package.loaded[modname]\n </code>\n is not false,\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n simply returns the value stored there.\n</p>\n<p>\n This variable is only a reference to the real table;\nassignments to this variable do not change the\ntable used by\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "package.loadlib (libname, funcname)",
      "body": "<p>\n Dynamically links the host program with the C\u00a0library\n <code>\n  libname\n </code>\n .\n</p>\n<p>\n If\n <code>\n  funcname\n </code>\n is \"\n <code>\n  *\n </code>\n \",\nthen it only links with the library,\nmaking the symbols exported by the library\navailable to other dynamically linked libraries.\nOtherwise,\nit looks for a function\n <code>\n  funcname\n </code>\n inside the library\nand returns this function as a C\u00a0function.\nSo,\n <code>\n  funcname\n </code>\n must follow the\n <a href=\"#lua_CFunction\">\n  <code>\n   lua_CFunction\n  </code>\n </a>\n prototype\n(see\n <a href=\"#lua_CFunction\">\n  <code>\n   lua_CFunction\n  </code>\n </a>\n ).\n</p>\n<p>\n This is a low-level function.\nIt completely bypasses the package and module system.\nUnlike\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n ,\nit does not perform any path searching and\ndoes not automatically adds extensions.\n <code>\n  libname\n </code>\n must be the complete file name of the C\u00a0library,\nincluding if necessary a path and an extension.\n <code>\n  funcname\n </code>\n must be the exact name exported by the C\u00a0library\n(which may depend on the C\u00a0compiler and linker used).\n</p>\n<p>\n This function is not supported by Standard\u00a0C.\nAs such, it is only available on some platforms\n(Windows, Linux, Mac OS X, Solaris, BSD,\nplus other Unix systems that support the\n <code>\n  dlfcn\n </code>\n standard).\n</p>\n<p>\n This function is inherently insecure,\nas it allows Lua to call any function in any readable dynamic\nlibrary in the system.\n(Lua calls any function assuming the function\nhas a proper prototype and respects a proper protocol\n(see\n <a href=\"#lua_CFunction\">\n  <code>\n   lua_CFunction\n  </code>\n </a>\n ).\nTherefore,\ncalling an arbitrary function in an arbitrary dynamic library\nmore often than not results in an access violation.)\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "package.path",
      "body": "<p>\n A string with the path used by\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n to search for a Lua loader.\n</p>\n<p>\n At start-up, Lua initializes this variable with\nthe value of the environment variable\n <a name=\"pdf-LUA_PATH_5_4\">\n  <code>\n   LUA_PATH_5_4\n  </code>\n </a>\n or\nthe environment variable\n <a name=\"pdf-LUA_PATH\">\n  <code>\n   LUA_PATH\n  </code>\n </a>\n or\nwith a default path defined in\n <code>\n  luaconf.h\n </code>\n ,\nif those environment variables are not defined.\nA \"\n <code>\n  ;;\n </code>\n \" in the value of the environment variable\nis replaced by the default path.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "package.preload",
      "body": "<p>\n A table to store loaders for specific modules\n(see\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n ).\n</p>\n<p>\n This variable is only a reference to the real table;\nassignments to this variable do not change the\ntable used by\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "package.searchers",
      "body": "<p>\n A table used by\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n to control how to find modules.\n</p>\n<p>\n Each entry in this table is a\n <em>\n  searcher function\n </em>\n .\nWhen looking for a module,\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n calls each of these searchers in ascending order,\nwith the module name (the argument given to\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n ) as its\nsole argument.\nIf the searcher finds the module,\nit returns another function, the module\n <em>\n  loader\n </em>\n ,\nplus an extra value, a\n <em>\n  loader data\n </em>\n ,\nthat will be passed to that loader and\nreturned as a second result by\n <a href=\"#pdf-require\">\n  <code>\n   require\n  </code>\n </a>\n .\nIf it cannot find the module,\nit returns a string explaining why\n(or\n <b>\n  nil\n </b>\n if it has nothing to say).\n</p>\n<p>\n Lua initializes this table with four searcher functions.\n</p>\n<p>\n The first searcher simply looks for a loader in the\n <a href=\"#pdf-package.preload\">\n  <code>\n   package.preload\n  </code>\n </a>\n table.\n</p>\n<p>\n The second searcher looks for a loader as a Lua library,\nusing the path stored at\n <a href=\"#pdf-package.path\">\n  <code>\n   package.path\n  </code>\n </a>\n .\nThe search is done as described in function\n <a href=\"#pdf-package.searchpath\">\n  <code>\n   package.searchpath\n  </code>\n </a>\n .\n</p>\n<p>\n The third searcher looks for a loader as a C\u00a0library,\nusing the path given by the variable\n <a href=\"#pdf-package.cpath\">\n  <code>\n   package.cpath\n  </code>\n </a>\n .\nAgain,\nthe search is done as described in function\n <a href=\"#pdf-package.searchpath\">\n  <code>\n   package.searchpath\n  </code>\n </a>\n .\nFor instance,\nif the C\u00a0path is the string\n</p>\n<pre>     \"./?.so;./?.dll;/usr/local/?/init.so\"\n</pre>\n<p>\n the searcher for module\n <code>\n  foo\n </code>\n will try to open the files\n <code>\n  ./foo.so\n </code>\n ,\n <code>\n  ./foo.dll\n </code>\n ,\nand\n <code>\n  /usr/local/foo/init.so\n </code>\n , in that order.\nOnce it finds a C\u00a0library,\nthis searcher first uses a dynamic link facility to link the\napplication with the library.\nThen it tries to find a C\u00a0function inside the library to\nbe used as the loader.\nThe name of this C\u00a0function is the string \"\n <code>\n  luaopen_\n </code>\n \"\nconcatenated with a copy of the module name where each dot\nis replaced by an underscore.\nMoreover, if the module name has a hyphen,\nits suffix after (and including) the first hyphen is removed.\nFor instance, if the module name is\n <code>\n  a.b.c-v2.1\n </code>\n ,\nthe function name will be\n <code>\n  luaopen_a_b_c\n </code>\n .\n</p>\n<p>\n The fourth searcher tries an\n <em>\n  all-in-one loader\n </em>\n .\nIt searches the C\u00a0path for a library for\nthe root name of the given module.\nFor instance, when requiring\n <code>\n  a.b.c\n </code>\n ,\nit will search for a C\u00a0library for\n <code>\n  a\n </code>\n .\nIf found, it looks into it for an open function for\nthe submodule;\nin our example, that would be\n <code>\n  luaopen_a_b_c\n </code>\n .\nWith this facility, a package can pack several C\u00a0submodules\ninto one single library,\nwith each submodule keeping its original open function.\n</p>\n<p>\n All searchers except the first one (preload) return as the extra value\nthe file path where the module was found,\nas returned by\n <a href=\"#pdf-package.searchpath\">\n  <code>\n   package.searchpath\n  </code>\n </a>\n .\nThe first searcher always returns the string \"\n <code>\n  :preload:\n </code>\n \".\n</p>\n<p>\n Searchers should raise no errors and have no side effects in Lua.\n(They may have side effects in C,\nfor instance by linking the application with a library.)\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "package.searchpath (name, path [, sep [, rep]])",
      "body": "<p>\n Searches for the given\n <code>\n  name\n </code>\n in the given\n <code>\n  path\n </code>\n .\n</p>\n<p>\n A path is a string containing a sequence of\n <em>\n  templates\n </em>\n separated by semicolons.\nFor each template,\nthe function replaces each interrogation mark (if any)\nin the template with a copy of\n <code>\n  name\n </code>\n wherein all occurrences of\n <code>\n  sep\n </code>\n (a dot, by default)\nwere replaced by\n <code>\n  rep\n </code>\n (the system's directory separator, by default),\nand then tries to open the resulting file name.\n</p>\n<p>\n For instance, if the path is the string\n</p>\n<pre>     \"./?.lua;./?.lc;/usr/local/?/init.lua\"\n</pre>\n<p>\n the search for the name\n <code>\n  foo.a\n </code>\n will try to open the files\n <code>\n  ./foo/a.lua\n </code>\n ,\n <code>\n  ./foo/a.lc\n </code>\n , and\n <code>\n  /usr/local/foo/a/init.lua\n </code>\n , in that order.\n</p>\n<p>\n Returns the resulting name of the first file that it can\nopen in read mode (after closing the file),\nor\n <b>\n  fail\n </b>\n plus an error message if none succeeds.\n(This error message lists all file names it tried to open.)\n</p>\n<h2>\n 6.4 \u2013\n <a name=\"6.4\">\n  String Manipulation\n </a>\n</h2>\n<p>\n This library provides generic functions for string manipulation,\nsuch as finding and extracting substrings, and pattern matching.\nWhen indexing a string in Lua, the first character is at position\u00a01\n(not at\u00a00, as in C).\nIndices are allowed to be negative and are interpreted as indexing backwards,\nfrom the end of the string.\nThus, the last character is at position -1, and so on.\n</p>\n<p>\n The string library provides all its functions inside the table\n <a name=\"pdf-string\">\n  <code>\n   string\n  </code>\n </a>\n .\nIt also sets a metatable for strings\nwhere the\n <code>\n  __index\n </code>\n field points to the\n <code>\n  string\n </code>\n table.\nTherefore, you can use the string functions in object-oriented style.\nFor instance,\n <code>\n  string.byte(s,i)\n </code>\n can be written as\n <code>\n  s:byte(i)\n </code>\n .\n</p>\n<p>\n The string library assumes one-byte character encodings.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.byte (s [, i [, j]])",
      "body": "<code>\n s[i]\n</code>\n<code>\n s[i+1]\n</code>\n<code>\n s[j]\n</code>\n<code>\n i\n</code>\n<code>\n j\n</code>\n<code>\n i\n</code>\n<a href=\"#pdf-string.sub\">\n <code>\n  string.sub\n </code>\n</a>\n<p>\n Numeric codes are not necessarily portable across platforms.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.char (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Numeric codes are not necessarily portable across platforms.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.dump (function [, strip])",
      "body": "<p>\n Returns a string containing a binary representation\n(a\n <em>\n  binary chunk\n </em>\n )\nof the given function,\nso that a later\n <a href=\"#pdf-load\">\n  <code>\n   load\n  </code>\n </a>\n on this string returns\na copy of the function (but with new upvalues).\nIf\n <code>\n  strip\n </code>\n is a true value,\nthe binary representation may not include all debug information\nabout the function,\nto save space.\n</p>\n<p>\n Functions with upvalues have only their number of upvalues saved.\nWhen (re)loaded,\nthose upvalues receive fresh instances.\n(See the\n <a href=\"#pdf-load\">\n  <code>\n   load\n  </code>\n </a>\n function for details about\nhow these upvalues are initialized.\nYou can use the debug library to serialize\nand reload the upvalues of a function\nin a way adequate to your needs.)\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.find (s, pattern [, init [, plain]])",
      "body": "<p>\n Looks for the first match of\n <code>\n  pattern\n </code>\n (see\n <a href=\"#6.4.1\">\n  \u00a76.4.1\n </a>\n ) in the string\n <code>\n  s\n </code>\n .\nIf it finds a match, then\n <code>\n  find\n </code>\n returns the indices of\n <code>\n  s\n </code>\n where this occurrence starts and ends;\notherwise, it returns\n <b>\n  fail\n </b>\n .\nA third, optional numeric argument\n <code>\n  init\n </code>\n specifies\nwhere to start the search;\nits default value is\u00a01 and can be negative.\nA\n <b>\n  true\n </b>\n as a fourth, optional argument\n <code>\n  plain\n </code>\n turns off the pattern matching facilities,\nso the function does a plain \"find substring\" operation,\nwith no characters in\n <code>\n  pattern\n </code>\n being considered magic.\n</p>\n<p>\n If the pattern has captures,\nthen in a successful match\nthe captured values are also returned,\nafter the two indices.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.format (formatstring, \u00b7\u00b7\u00b7)",
      "body": "<p>\n Returns a formatted version of its variable number of arguments\nfollowing the description given in its first argument,\nwhich must be a string.\nThe format string follows the same rules as the ISO\u00a0C function\n <code>\n  sprintf\n </code>\n .\nThe only differences are that the conversion specifiers and modifiers\n <code>\n  F\n </code>\n ,\n <code>\n  n\n </code>\n ,\n <code>\n  *\n </code>\n ,\n <code>\n  h\n </code>\n ,\n <code>\n  L\n </code>\n , and\n <code>\n  l\n </code>\n are not supported\nand that there is an extra specifier,\n <code>\n  q\n </code>\n .\nBoth width and precision, when present,\nare limited to two digits.\n</p>\n<p>\n The specifier\n <code>\n  q\n </code>\n formats booleans, nil, numbers, and strings\nin a way that the result is a valid constant in Lua source code.\nBooleans and nil are written in the obvious way\n(\n <code>\n  true\n </code>\n ,\n <code>\n  false\n </code>\n ,\n <code>\n  nil\n </code>\n ).\nFloats are written in hexadecimal,\nto preserve full precision.\nA string is written between double quotes,\nusing escape sequences when necessary to ensure that\nit can safely be read back by the Lua interpreter.\nFor instance, the call\n</p>\n<pre>     string.format('%q', 'a string with \"quotes\" and \\n new line')\n</pre>\n<p>\n may produce the string:\n</p>\n<pre>     \"a string with \\\"quotes\\\" and \\\n      new line\"\n</pre>\n<p>\n This specifier does not support modifiers (flags, width, precision).\n</p>\n<p>\n The conversion specifiers\n <code>\n  A\n </code>\n ,\n <code>\n  a\n </code>\n ,\n <code>\n  E\n </code>\n ,\n <code>\n  e\n </code>\n ,\n <code>\n  f\n </code>\n ,\n <code>\n  G\n </code>\n , and\n <code>\n  g\n </code>\n all expect a number as argument.\nThe specifiers\n <code>\n  c\n </code>\n ,\n <code>\n  d\n </code>\n ,\n <code>\n  i\n </code>\n ,\n <code>\n  o\n </code>\n ,\n <code>\n  u\n </code>\n ,\n <code>\n  X\n </code>\n , and\n <code>\n  x\n </code>\n expect an integer.\nWhen Lua is compiled with a C89 compiler,\nthe specifiers\n <code>\n  A\n </code>\n and\n <code>\n  a\n </code>\n (hexadecimal floats)\ndo not support modifiers.\n</p>\n<p>\n The specifier\n <code>\n  s\n </code>\n expects a string;\nif its argument is not a string,\nit is converted to one following the same rules of\n <a href=\"#pdf-tostring\">\n  <code>\n   tostring\n  </code>\n </a>\n .\nIf the specifier has any modifier,\nthe corresponding string argument should not contain embedded zeros.\n</p>\n<p>\n The specifier\n <code>\n  p\n </code>\n formats the pointer\nreturned by\n <a href=\"#lua_topointer\">\n  <code>\n   lua_topointer\n  </code>\n </a>\n .\nThat gives a unique string identifier for tables, userdata,\nthreads, strings, and functions.\nFor other values (numbers, nil, booleans),\nthis specifier results in a string representing\nthe pointer\n <code>\n  NULL\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.gmatch (s, pattern [, init])",
      "body": "<code>\n pattern\n</code>\n<a href=\"#6.4.1\">\n \u00a76.4.1\n</a>\n<code>\n s\n</code>\n<code>\n pattern\n</code>\n<code>\n init\n</code>\n<p>\n As an example, the following loop\nwill iterate over all the words from string\n <code>\n  s\n </code>\n ,\nprinting one per line:\n</p>\n<pre>     s = \"hello world from Lua\"\n     for w in string.gmatch(s, \"%a+\") do\n       print(w)\n     end\n</pre>\n<p>\n The next example collects all pairs\n <code>\n  key=value\n </code>\n from the\ngiven string into a table:\n</p>\n<pre>     t = {}\n     s = \"from=world, to=Lua\"\n     for k, v in string.gmatch(s, \"(%w+)=(%w+)\") do\n       t[k] = v\n     end\n</pre>\n<p>\n For this function, a caret '\n <code>\n  ^\n </code>\n ' at the start of a pattern does not\nwork as an anchor, as this would prevent the iteration.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.gsub (s, pattern, repl [, n])",
      "body": "<code>\n s\n</code>\n<code>\n n\n</code>\n<code>\n pattern\n</code>\n<a href=\"#6.4.1\">\n \u00a76.4.1\n</a>\n<code>\n repl\n</code>\n<code>\n gsub\n</code>\n<code>\n gsub\n</code>\n<em>\n Global SUBstitution\n</em>\n<p>\n If\n <code>\n  repl\n </code>\n is a string, then its value is used for replacement.\nThe character\n <code>\n  %\n </code>\n works as an escape character:\nany sequence in\n <code>\n  repl\n </code>\n of the form\n <code>\n  %\n  <em>\n   d\n  </em>\n </code>\n ,\nwith\n <em>\n  d\n </em>\n between 1 and 9,\nstands for the value of the\n <em>\n  d\n </em>\n -th captured substring;\nthe sequence\n <code>\n  %0\n </code>\n stands for the whole match;\nthe sequence\n <code>\n  %%\n </code>\n stands for a single\n <code>\n  %\n </code>\n .\n</p>\n<p>\n If\n <code>\n  repl\n </code>\n is a table, then the table is queried for every match,\nusing the first capture as the key.\n</p>\n<p>\n If\n <code>\n  repl\n </code>\n is a function, then this function is called every time a\nmatch occurs, with all captured substrings passed as arguments,\nin order.\n</p>\n<p>\n In any case,\nif the pattern specifies no captures,\nthen it behaves as if the whole pattern was inside a capture.\n</p>\n<p>\n If the value returned by the table query or by the function call\nis a string or a number,\nthen it is used as the replacement string;\notherwise, if it is\n <b>\n  false\n </b>\n or\n <b>\n  nil\n </b>\n ,\nthen there is no replacement\n(that is, the original match is kept in the string).\n</p>\n<p>\n Here are some examples:\n</p>\n<pre>     x = string.gsub(\"hello world\", \"(%w+)\", \"%1 %1\")\n     --&gt; x=\"hello hello world world\"\n     \n     x = string.gsub(\"hello world\", \"%w+\", \"%0 %0\", 1)\n     --&gt; x=\"hello hello world\"\n     \n     x = string.gsub(\"hello world from Lua\", \"(%w+)%s*(%w+)\", \"%2 %1\")\n     --&gt; x=\"world hello Lua from\"\n     \n     x = string.gsub(\"home = $HOME, user = $USER\", \"%$(%w+)\", os.getenv)\n     --&gt; x=\"home = /home/roberto, user = roberto\"\n     \n     x = string.gsub(\"4+5 = $return 4+5$\", \"%$(.-)%$\", function (s)\n           return load(s)()\n         end)\n     --&gt; x=\"4+5 = 9\"\n     \n     local t = {name=\"lua\", version=\"5.4\"}\n     x = string.gsub(\"$name-$version.tar.gz\", \"%$(%w+)\", t)\n     --&gt; x=\"lua-5.4.tar.gz\"\n</pre>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.len (s)",
      "body": "<p>\n Receives a string and returns its length.\nThe empty string\n <code>\n  \"\"\n </code>\n has length 0.\nEmbedded zeros are counted,\nso\n <code>\n  \"a\\000bc\\000\"\n </code>\n has length 5.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.lower (s)",
      "body": "<p>\n Receives a string and returns a copy of this string with all\nuppercase letters changed to lowercase.\nAll other characters are left unchanged.\nThe definition of what an uppercase letter is depends on the current locale.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.match (s, pattern [, init])",
      "body": "<p>\n Looks for the first\n <em>\n  match\n </em>\n of\nthe\n <code>\n  pattern\n </code>\n (see\n <a href=\"#6.4.1\">\n  \u00a76.4.1\n </a>\n ) in the string\n <code>\n  s\n </code>\n .\nIf it finds one, then\n <code>\n  match\n </code>\n returns\nthe captures from the pattern;\notherwise it returns\n <b>\n  fail\n </b>\n .\nIf\n <code>\n  pattern\n </code>\n specifies no captures,\nthen the whole match is returned.\nA third, optional numeric argument\n <code>\n  init\n </code>\n specifies\nwhere to start the search;\nits default value is\u00a01 and can be negative.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.pack (fmt, v1, v2, \u00b7\u00b7\u00b7)",
      "body": "<p>\n Returns a binary string containing the values\n <code>\n  v1\n </code>\n ,\n <code>\n  v2\n </code>\n , etc.\nserialized in binary form (packed)\naccording to the format string\n <code>\n  fmt\n </code>\n (see\n <a href=\"#6.4.2\">\n  \u00a76.4.2\n </a>\n ).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.packsize (fmt)",
      "body": "<p>\n Returns the size of a string resulting from\n <a href=\"#pdf-string.pack\">\n  <code>\n   string.pack\n  </code>\n </a>\n with the given format.\nThe format string cannot have the variable-length options\n'\n <code>\n  s\n </code>\n ' or '\n <code>\n  z\n </code>\n ' (see\n <a href=\"#6.4.2\">\n  \u00a76.4.2\n </a>\n ).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.rep (s, n [, sep])",
      "body": "<p>\n Returns a string that is the concatenation of\n <code>\n  n\n </code>\n copies of\nthe string\n <code>\n  s\n </code>\n separated by the string\n <code>\n  sep\n </code>\n .\nThe default value for\n <code>\n  sep\n </code>\n is the empty string\n(that is, no separator).\nReturns the empty string if\n <code>\n  n\n </code>\n is not positive.\n</p>\n<p>\n (Note that it is very easy to exhaust the memory of your machine\nwith a single call to this function.)\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.reverse (s)",
      "body": "<p>\n Returns a string that is the string\n <code>\n  s\n </code>\n reversed.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.sub (s, i [, j])",
      "body": "<p>\n Returns the substring of\n <code>\n  s\n </code>\n that\nstarts at\n <code>\n  i\n </code>\n and continues until\n <code>\n  j\n </code>\n ;\n <code>\n  i\n </code>\n and\n <code>\n  j\n </code>\n can be negative.\nIf\n <code>\n  j\n </code>\n is absent, then it is assumed to be equal to -1\n(which is the same as the string length).\nIn particular,\nthe call\n <code>\n  string.sub(s,1,j)\n </code>\n returns a prefix of\n <code>\n  s\n </code>\n with length\n <code>\n  j\n </code>\n ,\nand\n <code>\n  string.sub(s, -i)\n </code>\n (for a positive\n <code>\n  i\n </code>\n )\nreturns a suffix of\n <code>\n  s\n </code>\n with length\n <code>\n  i\n </code>\n .\n</p>\n<p>\n If, after the translation of negative indices,\n <code>\n  i\n </code>\n is less than 1,\nit is corrected to 1.\nIf\n <code>\n  j\n </code>\n is greater than the string length,\nit is corrected to that length.\nIf, after these corrections,\n <code>\n  i\n </code>\n is greater than\n <code>\n  j\n </code>\n ,\nthe function returns the empty string.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.unpack (fmt, s [, pos])",
      "body": "<p>\n Returns the values packed in string\n <code>\n  s\n </code>\n (see\n <a href=\"#pdf-string.pack\">\n  <code>\n   string.pack\n  </code>\n </a>\n )\naccording to the format string\n <code>\n  fmt\n </code>\n (see\n <a href=\"#6.4.2\">\n  \u00a76.4.2\n </a>\n ).\nAn optional\n <code>\n  pos\n </code>\n marks where\nto start reading in\n <code>\n  s\n </code>\n (default is 1).\nAfter the read values,\nthis function also returns the index of the first unread byte in\n <code>\n  s\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "string.upper (s)",
      "body": "<p>\n Receives a string and returns a copy of this string with all\nlowercase letters changed to uppercase.\nAll other characters are left unchanged.\nThe definition of what a lowercase letter is depends on the current locale.\n</p>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "utf8.char (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Receives zero or more integers,\nconverts each one to its corresponding UTF-8 byte sequence\nand returns a string with the concatenation of all these sequences.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "utf8.charpattern",
      "body": "<p>\n The pattern (a string, not a function) \"\n <code>\n  [\\0-\\x7F\\xC2-\\xFD][\\x80-\\xBF]*\n </code>\n \"\n(see\n <a href=\"#6.4.1\">\n  \u00a76.4.1\n </a>\n ),\nwhich matches exactly one UTF-8 byte sequence,\nassuming that the subject is a valid UTF-8 string.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "utf8.codes (s [, lax])",
      "body": "<p>\n Returns values so that the construction\n</p>\n<pre>     for p, c in utf8.codes(s) do <em>body</em> end\n</pre>\n<p>\n will iterate over all UTF-8 characters in string\n <code>\n  s\n </code>\n ,\nwith\n <code>\n  p\n </code>\n being the position (in bytes) and\n <code>\n  c\n </code>\n the code point\nof each character.\nIt raises an error if it meets any invalid byte sequence.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "utf8.codepoint (s [, i [, j [, lax]]])",
      "body": "<p>\n Returns the code points (as integers) from all characters in\n <code>\n  s\n </code>\n that start between byte position\n <code>\n  i\n </code>\n and\n <code>\n  j\n </code>\n (both included).\nThe default for\n <code>\n  i\n </code>\n is 1 and for\n <code>\n  j\n </code>\n is\n <code>\n  i\n </code>\n .\nIt raises an error if it meets any invalid byte sequence.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "utf8.len (s [, i [, j [, lax]]])",
      "body": "<p>\n Returns the number of UTF-8 characters in string\n <code>\n  s\n </code>\n that start between positions\n <code>\n  i\n </code>\n and\n <code>\n  j\n </code>\n (both inclusive).\nThe default for\n <code>\n  i\n </code>\n is 1 and for\n <code>\n  j\n </code>\n is -1.\nIf it finds any invalid byte sequence,\nreturns\n <b>\n  fail\n </b>\n plus the position of the first invalid byte.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "utf8.offset (s, n [, i])",
      "body": "<p>\n Returns the position (in bytes) where the encoding of the\n <code>\n  n\n </code>\n -th character of\n <code>\n  s\n </code>\n (counting from position\n <code>\n  i\n </code>\n ) starts.\nA negative\n <code>\n  n\n </code>\n gets characters before position\n <code>\n  i\n </code>\n .\nThe default for\n <code>\n  i\n </code>\n is 1 when\n <code>\n  n\n </code>\n is non-negative\nand\n <code>\n  #s + 1\n </code>\n otherwise,\nso that\n <code>\n  utf8.offset(s, -n)\n </code>\n gets the offset of the\n <code>\n  n\n </code>\n -th character from the end of the string.\nIf the specified character is neither in the subject\nnor right after its end,\nthe function returns\n <b>\n  fail\n </b>\n .\n</p>\n<p>\n As a special case,\nwhen\n <code>\n  n\n </code>\n is 0 the function returns the start of the encoding\nof the character that contains the\n <code>\n  i\n </code>\n -th byte of\n <code>\n  s\n </code>\n .\n</p>\n<p>\n This function assumes that\n <code>\n  s\n </code>\n is a valid UTF-8 string.\n</p>\n<h2>\n 6.6 \u2013\n <a name=\"6.6\">\n  Table Manipulation\n </a>\n</h2>\n<p>\n This library provides generic functions for table manipulation.\nIt provides all its functions inside the table\n <a name=\"pdf-table\">\n  <code>\n   table\n  </code>\n </a>\n .\n</p>\n<p>\n Remember that, whenever an operation needs the length of a table,\nall caveats about the length operator apply (see\n <a href=\"#3.4.7\">\n  \u00a73.4.7\n </a>\n ).\nAll functions ignore non-numeric keys\nin the tables given as arguments.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "table.concat (list [, sep [, i [, j]]])",
      "body": "<p>\n Given a list where all elements are strings or numbers,\nreturns the string\n <code>\n  list[i]..sep..list[i+1] \u00b7\u00b7\u00b7 sep..list[j]\n </code>\n .\nThe default value for\n <code>\n  sep\n </code>\n is the empty string,\nthe default for\n <code>\n  i\n </code>\n is 1,\nand the default for\n <code>\n  j\n </code>\n is\n <code>\n  #list\n </code>\n .\nIf\n <code>\n  i\n </code>\n is greater than\n <code>\n  j\n </code>\n , returns the empty string.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "table.insert (list, [pos,] value)",
      "body": "<p>\n Inserts element\n <code>\n  value\n </code>\n at position\n <code>\n  pos\n </code>\n in\n <code>\n  list\n </code>\n ,\nshifting up the elements\n <code>\n  list[pos], list[pos+1], \u00b7\u00b7\u00b7, list[#list]\n </code>\n .\nThe default value for\n <code>\n  pos\n </code>\n is\n <code>\n  #list+1\n </code>\n ,\nso that a call\n <code>\n  table.insert(t,x)\n </code>\n inserts\n <code>\n  x\n </code>\n at the end\nof the list\n <code>\n  t\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "table.move (a1, f, e, t [,a2])",
      "body": "<p>\n Moves elements from the table\n <code>\n  a1\n </code>\n to the table\n <code>\n  a2\n </code>\n ,\nperforming the equivalent to the following\nmultiple assignment:\n <code>\n  a2[t],\u00b7\u00b7\u00b7 = a1[f],\u00b7\u00b7\u00b7,a1[e]\n </code>\n .\nThe default for\n <code>\n  a2\n </code>\n is\n <code>\n  a1\n </code>\n .\nThe destination range can overlap with the source range.\nThe number of elements to be moved must fit in a Lua integer.\n</p>\n<p>\n Returns the destination table\n <code>\n  a2\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "table.pack (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Returns a new table with all arguments stored into keys 1, 2, etc.\nand with a field \"\n <code>\n  n\n </code>\n \" with the total number of arguments.\nNote that the resulting table may not be a sequence,\nif some arguments are\n <b>\n  nil\n </b>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "table.remove (list [, pos])",
      "body": "<p>\n Removes from\n <code>\n  list\n </code>\n the element at position\n <code>\n  pos\n </code>\n ,\nreturning the value of the removed element.\nWhen\n <code>\n  pos\n </code>\n is an integer between 1 and\n <code>\n  #list\n </code>\n ,\nit shifts down the elements\n <code>\n  list[pos+1], list[pos+2], \u00b7\u00b7\u00b7, list[#list]\n </code>\n and erases element\n <code>\n  list[#list]\n </code>\n ;\nThe index\n <code>\n  pos\n </code>\n can also be 0 when\n <code>\n  #list\n </code>\n is 0,\nor\n <code>\n  #list + 1\n </code>\n .\n</p>\n<p>\n The default value for\n <code>\n  pos\n </code>\n is\n <code>\n  #list\n </code>\n ,\nso that a call\n <code>\n  table.remove(l)\n </code>\n removes the last element\nof the list\n <code>\n  l\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "table.sort (list [, comp])",
      "body": "<p>\n Sorts the list elements in a given order,\n <em>\n  in-place\n </em>\n ,\nfrom\n <code>\n  list[1]\n </code>\n to\n <code>\n  list[#list]\n </code>\n .\nIf\n <code>\n  comp\n </code>\n is given,\nthen it must be a function that receives two list elements\nand returns true when the first element must come\nbefore the second in the final order,\nso that, after the sort,\n <code>\n  i &lt;= j\n </code>\n implies\n <code>\n  not comp(list[j],list[i])\n </code>\n .\nIf\n <code>\n  comp\n </code>\n is not given,\nthen the standard Lua operator\n <code>\n  &lt;\n </code>\n is used instead.\n</p>\n<p>\n The\n <code>\n  comp\n </code>\n function must define a consistent order;\nmore formally, the function must define a strict weak order.\n(A weak order is similar to a total order,\nbut it can equate different elements for comparison purposes.)\n</p>\n<p>\n The sort algorithm is not stable:\nDifferent elements considered equal by the given order\nmay have their relative positions changed by the sort.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "table.unpack (list [, i [, j]])",
      "body": "<p>\n Returns the elements from the given list.\nThis function is equivalent to\n</p>\n<pre>     return list[i], list[i+1], \u00b7\u00b7\u00b7, list[j]\n</pre>\n<p>\n By default,\n <code>\n  i\n </code>\n is\u00a01 and\n <code>\n  j\n </code>\n is\n <code>\n  #list\n </code>\n .\n</p>\n<h2>\n 6.7 \u2013\n <a name=\"6.7\">\n  Mathematical Functions\n </a>\n</h2>\n<p>\n This library provides basic mathematical functions.\nIt provides all its functions and constants inside the table\n <a name=\"pdf-math\">\n  <code>\n   math\n  </code>\n </a>\n .\nFunctions with the annotation \"\n <code>\n  integer/float\n </code>\n \" give\ninteger results for integer arguments\nand float results for non-integer arguments.\nThe rounding functions\n <a href=\"#pdf-math.ceil\">\n  <code>\n   math.ceil\n  </code>\n </a>\n ,\n <a href=\"#pdf-math.floor\">\n  <code>\n   math.floor\n  </code>\n </a>\n , and\n <a href=\"#pdf-math.modf\">\n  <code>\n   math.modf\n  </code>\n </a>\n return an integer when the result fits in the range of an integer,\nor a float otherwise.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.abs (x)",
      "body": "<p>\n Returns the maximum value between\n <code>\n  x\n </code>\n and\n <code>\n  -x\n </code>\n . (integer/float)\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.acos (x)",
      "body": "<p>\n Returns the arc cosine of\n <code>\n  x\n </code>\n (in radians).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.asin (x)",
      "body": "<p>\n Returns the arc sine of\n <code>\n  x\n </code>\n (in radians).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.atan (y [, x])",
      "body": "<p>\n Returns the arc tangent of\n <code>\n  y/x\n </code>\n (in radians),\nbut uses the signs of both arguments to find the\nquadrant of the result.\nIt also handles correctly the case of\n <code>\n  x\n </code>\n being zero.\n</p>\n<p>\n The default value for\n <code>\n  x\n </code>\n is 1,\nso that the call\n <code>\n  math.atan(y)\n </code>\n returns the arc tangent of\n <code>\n  y\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.ceil (x)",
      "body": "<p>\n Returns the smallest integral value greater than or equal to\n <code>\n  x\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.cos (x)",
      "body": "<p>\n Returns the cosine of\n <code>\n  x\n </code>\n (assumed to be in radians).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.deg (x)",
      "body": "<p>\n Converts the angle\n <code>\n  x\n </code>\n from radians to degrees.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.exp (x)",
      "body": "<p>\n Returns the value\n <em>\n  e\n  <sup>\n   x\n  </sup>\n </em>\n (where\n <code>\n  e\n </code>\n is the base of natural logarithms).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.floor (x)",
      "body": "<p>\n Returns the largest integral value less than or equal to\n <code>\n  x\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.fmod (x, y)",
      "body": "<p>\n Returns the remainder of the division of\n <code>\n  x\n </code>\n by\n <code>\n  y\n </code>\n that rounds the quotient towards zero. (integer/float)\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.huge",
      "body": "<p>\n The float value\n <code>\n  HUGE_VAL\n </code>\n ,\na value greater than any other numeric value.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.log (x [, base])",
      "body": "<p>\n Returns the logarithm of\n <code>\n  x\n </code>\n in the given base.\nThe default for\n <code>\n  base\n </code>\n is\n <em>\n  e\n </em>\n (so that the function returns the natural logarithm of\n <code>\n  x\n </code>\n ).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.max (x, \u00b7\u00b7\u00b7)",
      "body": "<p>\n Returns the argument with the maximum value,\naccording to the Lua operator\n <code>\n  &lt;\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.maxinteger",
      "body": "<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.min (x, \u00b7\u00b7\u00b7)",
      "body": "<p>\n Returns the argument with the minimum value,\naccording to the Lua operator\n <code>\n  &lt;\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.mininteger",
      "body": "<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.modf (x)",
      "body": "<p>\n Returns the integral part of\n <code>\n  x\n </code>\n and the fractional part of\n <code>\n  x\n </code>\n .\nIts second result is always a float.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.pi",
      "body": "<p>\n The value of\n <em>\n  \u03c0\n </em>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.rad (x)",
      "body": "<p>\n Converts the angle\n <code>\n  x\n </code>\n from degrees to radians.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.random ([m [, n]])",
      "body": "<p>\n When called without arguments,\nreturns a pseudo-random float with uniform distribution\nin the range\n <em>\n  [0,1)\n </em>\n .  \nWhen called with two integers\n <code>\n  m\n </code>\n and\n <code>\n  n\n </code>\n ,\n <code>\n  math.random\n </code>\n returns a pseudo-random integer\nwith uniform distribution in the range\n <em>\n  [m, n]\n </em>\n .\nThe call\n <code>\n  math.random(n)\n </code>\n , for a positive\n <code>\n  n\n </code>\n ,\nis equivalent to\n <code>\n  math.random(1,n)\n </code>\n .\nThe call\n <code>\n  math.random(0)\n </code>\n produces an integer with\nall bits (pseudo)random.\n</p>\n<p>\n This function uses the\n <code>\n  xoshiro256**\n </code>\n algorithm to produce\npseudo-random 64-bit integers,\nwhich are the results of calls with argument\u00a00.\nOther results (ranges and floats)\nare unbiased extracted from these integers.\n</p>\n<p>\n Lua initializes its pseudo-random generator with the equivalent of\na call to\n <a href=\"#pdf-math.randomseed\">\n  <code>\n   math.randomseed\n  </code>\n </a>\n with no arguments,\nso that\n <code>\n  math.random\n </code>\n should generate\ndifferent sequences of results each time the program runs.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.randomseed ([x [, y]])",
      "body": "<p>\n When called with at least one argument,\nthe integer parameters\n <code>\n  x\n </code>\n and\n <code>\n  y\n </code>\n are\njoined into a 128-bit\n <em>\n  seed\n </em>\n that\nis used to reinitialize the pseudo-random generator;\nequal seeds produce equal sequences of numbers.\nThe default for\n <code>\n  y\n </code>\n is zero.\n</p>\n<p>\n When called with no arguments,\nLua generates a seed with\na weak attempt for randomness.\n</p>\n<p>\n This function returns the two seed components\nthat were effectively used,\nso that setting them again repeats the sequence.\n</p>\n<p>\n To ensure a required level of randomness to the initial state\n(or contrarily, to have a deterministic sequence,\nfor instance when debugging a program),\nyou should call\n <a href=\"#pdf-math.randomseed\">\n  <code>\n   math.randomseed\n  </code>\n </a>\n with explicit arguments.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.sin (x)",
      "body": "<p>\n Returns the sine of\n <code>\n  x\n </code>\n (assumed to be in radians).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.sqrt (x)",
      "body": "<p>\n Returns the square root of\n <code>\n  x\n </code>\n .\n(You can also use the expression\n <code>\n  x^0.5\n </code>\n to compute this value.)\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.tan (x)",
      "body": "<p>\n Returns the tangent of\n <code>\n  x\n </code>\n (assumed to be in radians).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.tointeger (x)",
      "body": "<p>\n If the value\n <code>\n  x\n </code>\n is convertible to an integer,\nreturns that integer.\nOtherwise, returns\n <b>\n  fail\n </b>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.type (x)",
      "body": "<p>\n Returns \"\n <code>\n  integer\n </code>\n \" if\n <code>\n  x\n </code>\n is an integer,\n\"\n <code>\n  float\n </code>\n \" if it is a float,\nor\n <b>\n  fail\n </b>\n if\n <code>\n  x\n </code>\n is not a number.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "math.ult (m, n)",
      "body": "<p>\n Returns a boolean,\n <b>\n  true\n </b>\n if and only if integer\n <code>\n  m\n </code>\n is below integer\n <code>\n  n\n </code>\n when\nthey are compared as unsigned integers.\n</p>\n<h2>\n 6.8 \u2013\n <a name=\"6.8\">\n  Input and Output Facilities\n </a>\n</h2>\n<p>\n The I/O library provides two different styles for file manipulation.\nThe first one uses implicit file handles;\nthat is, there are operations to set a default input file and a\ndefault output file,\nand all input/output operations are done over these default files.\nThe second style uses explicit file handles.\n</p>\n<p>\n When using implicit file handles,\nall operations are supplied by table\n <a name=\"pdf-io\">\n  <code>\n   io\n  </code>\n </a>\n .\nWhen using explicit file handles,\nthe operation\n <a href=\"#pdf-io.open\">\n  <code>\n   io.open\n  </code>\n </a>\n returns a file handle\nand then all operations are supplied as methods of the file handle.\n</p>\n<p>\n The metatable for file handles provides metamethods\nfor\n <code>\n  __gc\n </code>\n and\n <code>\n  __close\n </code>\n that try\nto close the file when called.\n</p>\n<p>\n The table\n <code>\n  io\n </code>\n also provides\nthree predefined file handles with their usual meanings from C:\n <a name=\"pdf-io.stdin\">\n  <code>\n   io.stdin\n  </code>\n </a>\n ,\n <a name=\"pdf-io.stdout\">\n  <code>\n   io.stdout\n  </code>\n </a>\n , and\n <a name=\"pdf-io.stderr\">\n  <code>\n   io.stderr\n  </code>\n </a>\n .\nThe I/O library never closes these files.\n</p>\n<p>\n Unless otherwise stated,\nall I/O functions return\n <b>\n  fail\n </b>\n on failure,\nplus an error message as a second result and\na system-dependent error code as a third result,\nand some non-false value on success.\nOn non-POSIX systems,\nthe computation of the error message and error code\nin case of errors\nmay be not thread safe,\nbecause they rely on the global C variable\n <code>\n  errno\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.close ([file])",
      "body": "<p>\n Equivalent to\n <code>\n  file:close()\n </code>\n .\nWithout a\n <code>\n  file\n </code>\n , closes the default output file.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.flush ()",
      "body": "<p>\n Equivalent to\n <code>\n  io.output():flush()\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.input ([file])",
      "body": "<p>\n When called with a file name, it opens the named file (in text mode),\nand sets its handle as the default input file.\nWhen called with a file handle,\nit simply sets this file handle as the default input file.\nWhen called without arguments,\nit returns the current default input file.\n</p>\n<p>\n In case of errors this function raises the error,\ninstead of returning an error code.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.lines ([filename, \u00b7\u00b7\u00b7])",
      "body": "<p>\n Opens the given file name in read mode\nand returns an iterator function that\nworks like\n <code>\n  file:lines(\u00b7\u00b7\u00b7)\n </code>\n over the opened file.\nWhen the iterator function fails to read any value,\nit automatically closes the file.\nBesides the iterator function,\n <code>\n  io.lines\n </code>\n returns three other values:\ntwo\n <b>\n  nil\n </b>\n values as placeholders,\nplus the created file handle.\nTherefore, when used in a generic\n <b>\n  for\n </b>\n loop,\nthe file is closed also if the loop is interrupted by an\nerror or a\n <b>\n  break\n </b>\n .\n</p>\n<p>\n The call\n <code>\n  io.lines()\n </code>\n (with no file name) is equivalent\nto\n <code>\n  io.input():lines(\"l\")\n </code>\n ;\nthat is, it iterates over the lines of the default input file.\nIn this case, the iterator does not close the file when the loop ends.\n</p>\n<p>\n In case of errors opening the file,\nthis function raises the error,\ninstead of returning an error code.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.open (filename [, mode])",
      "body": "<p>\n This function opens a file,\nin the mode specified in the string\n <code>\n  mode\n </code>\n .\nIn case of success,\nit returns a new file handle.\n</p>\n<p>\n The\n <code>\n  mode\n </code>\n string can be any of the following:\n</p>\n<ul>\n <li>\n  <b>\n   \"\n   <code>\n    r\n   </code>\n   \":\n  </b>\n  read mode (the default);\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    w\n   </code>\n   \":\n  </b>\n  write mode;\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    a\n   </code>\n   \":\n  </b>\n  append mode;\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    r+\n   </code>\n   \":\n  </b>\n  update mode, all previous data is preserved;\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    w+\n   </code>\n   \":\n  </b>\n  update mode, all previous data is erased;\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    a+\n   </code>\n   \":\n  </b>\n  append update mode, previous data is preserved,\n  writing is only allowed at the end of file.\n </li>\n</ul>\n<p>\n The\n <code>\n  mode\n </code>\n string can also have a '\n <code>\n  b\n </code>\n ' at the end,\nwhich is needed in some systems to open the file in binary mode.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.output ([file])",
      "body": "<p>\n Similar to\n <a href=\"#pdf-io.input\">\n  <code>\n   io.input\n  </code>\n </a>\n , but operates over the default output file.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.popen (prog [, mode])",
      "body": "<p>\n This function is system dependent and is not available\non all platforms.\n</p>\n<p>\n Starts the program\n <code>\n  prog\n </code>\n in a separated process and returns\na file handle that you can use to read data from this program\n(if\n <code>\n  mode\n </code>\n is\n <code>\n  \"r\"\n </code>\n , the default)\nor to write data to this program\n(if\n <code>\n  mode\n </code>\n is\n <code>\n  \"w\"\n </code>\n ).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.read (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Equivalent to\n <code>\n  io.input():read(\u00b7\u00b7\u00b7)\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.tmpfile ()",
      "body": "<p>\n In case of success,\nreturns a handle for a temporary file.\nThis file is opened in update mode\nand it is automatically removed when the program ends.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.type (obj)",
      "body": "<p>\n Checks whether\n <code>\n  obj\n </code>\n is a valid file handle.\nReturns the string\n <code>\n  \"file\"\n </code>\n if\n <code>\n  obj\n </code>\n is an open file handle,\n <code>\n  \"closed file\"\n </code>\n if\n <code>\n  obj\n </code>\n is a closed file handle,\nor\n <b>\n  fail\n </b>\n if\n <code>\n  obj\n </code>\n is not a file handle.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "io.write (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Equivalent to\n <code>\n  io.output():write(\u00b7\u00b7\u00b7)\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "file:close ()",
      "body": "<p>\n Closes\n <code>\n  file\n </code>\n .\nNote that files are automatically closed when\ntheir handles are garbage collected,\nbut that takes an unpredictable amount of time to happen.\n</p>\n<p>\n When closing a file handle created with\n <a href=\"#pdf-io.popen\">\n  <code>\n   io.popen\n  </code>\n </a>\n ,\n <a href=\"#pdf-file:close\">\n  <code>\n   file:close\n  </code>\n </a>\n returns the same values\nreturned by\n <a href=\"#pdf-os.execute\">\n  <code>\n   os.execute\n  </code>\n </a>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "file:flush ()",
      "body": "<p>\n Saves any written data to\n <code>\n  file\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "file:lines (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Returns an iterator function that,\neach time it is called,\nreads the file according to the given formats.\nWhen no format is given,\nuses \"\n <code>\n  l\n </code>\n \" as a default.\nAs an example, the construction\n</p>\n<pre>     for c in file:lines(1) do <em>body</em> end\n</pre>\n<p>\n will iterate over all characters of the file,\nstarting at the current position.\nUnlike\n <a href=\"#pdf-io.lines\">\n  <code>\n   io.lines\n  </code>\n </a>\n , this function does not close the file\nwhen the loop ends.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "file:read (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Reads the file\n <code>\n  file\n </code>\n ,\naccording to the given formats, which specify what to read.\nFor each format,\nthe function returns a string or a number with the characters read,\nor\n <b>\n  fail\n </b>\n if it cannot read data with the specified format.\n(In this latter case,\nthe function does not read subsequent formats.)\nWhen called without arguments,\nit uses a default format that reads the next line\n(see below).\n</p>\n<p>\n The available formats are\n</p>\n<ul>\n <li>\n  <b>\n   \"\n   <code>\n    n\n   </code>\n   \":\n  </b>\n  reads a numeral and returns it as a float or an integer,\nfollowing the lexical conventions of Lua.\n(The numeral may have leading whitespaces and a sign.)\nThis format always reads the longest input sequence that\nis a valid prefix for a numeral;\nif that prefix does not form a valid numeral\n(e.g., an empty string, \"\n  <code>\n   0x\n  </code>\n  \", or \"\n  <code>\n   3.4e-\n  </code>\n  \")\nor it is too long (more than 200 characters),\nit is discarded and the format returns\n  <b>\n   fail\n  </b>\n  .\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    a\n   </code>\n   \":\n  </b>\n  reads the whole file, starting at the current position.\nOn end of file, it returns the empty string;\nthis format never fails.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    l\n   </code>\n   \":\n  </b>\n  reads the next line skipping the end of line,\nreturning\n  <b>\n   fail\n  </b>\n  on end of file.\nThis is the default format.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    L\n   </code>\n   \":\n  </b>\n  reads the next line keeping the end-of-line character (if present),\nreturning\n  <b>\n   fail\n  </b>\n  on end of file.\n </li>\n <li>\n  <b>\n   <em>\n    number\n   </em>\n   :\n  </b>\n  reads a string with up to this number of bytes,\nreturning\n  <b>\n   fail\n  </b>\n  on end of file.\nIf\n  <code>\n   number\n  </code>\n  is zero,\nit reads nothing and returns an empty string,\nor\n  <b>\n   fail\n  </b>\n  on end of file.\n </li>\n</ul>\n<p>\n The formats \"\n <code>\n  l\n </code>\n \" and \"\n <code>\n  L\n </code>\n \" should be used only for text files.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "file:seek ([whence [, offset]])",
      "body": "<p>\n Sets and gets the file position,\nmeasured from the beginning of the file,\nto the position given by\n <code>\n  offset\n </code>\n plus a base\nspecified by the string\n <code>\n  whence\n </code>\n , as follows:\n</p>\n<ul>\n <li>\n  <b>\n   \"\n   <code>\n    set\n   </code>\n   \":\n  </b>\n  base is position 0 (beginning of the file);\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    cur\n   </code>\n   \":\n  </b>\n  base is current position;\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    end\n   </code>\n   \":\n  </b>\n  base is end of file;\n </li>\n</ul>\n<p>\n In case of success,\n <code>\n  seek\n </code>\n returns the final file position,\nmeasured in bytes from the beginning of the file.\nIf\n <code>\n  seek\n </code>\n fails, it returns\n <b>\n  fail\n </b>\n ,\nplus a string describing the error.\n</p>\n<p>\n The default value for\n <code>\n  whence\n </code>\n is\n <code>\n  \"cur\"\n </code>\n ,\nand for\n <code>\n  offset\n </code>\n is 0.\nTherefore, the call\n <code>\n  file:seek()\n </code>\n returns the current\nfile position, without changing it;\nthe call\n <code>\n  file:seek(\"set\")\n </code>\n sets the position to the\nbeginning of the file (and returns 0);\nand the call\n <code>\n  file:seek(\"end\")\n </code>\n sets the position to the\nend of the file, and returns its size.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "file:setvbuf (mode [, size])",
      "body": "<p>\n Sets the buffering mode for a file.\nThere are three available modes:\n</p>\n<ul>\n <li>\n  <b>\n   \"\n   <code>\n    no\n   </code>\n   \":\n  </b>\n  no buffering.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    full\n   </code>\n   \":\n  </b>\n  full buffering.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    line\n   </code>\n   \":\n  </b>\n  line buffering.\n </li>\n</ul>\n<p>\n For the last two cases,\n <code>\n  size\n </code>\n is a hint for the size of the buffer, in bytes.\nThe default is an appropriate size.\n</p>\n<p>\n The specific behavior of each mode is non portable;\ncheck the underlying ISO\u00a0C function\n <code>\n  setvbuf\n </code>\n in your platform for\nmore details.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "file:write (\u00b7\u00b7\u00b7)",
      "body": "<p>\n Writes the value of each of its arguments to\n <code>\n  file\n </code>\n .\nThe arguments must be strings or numbers.\n</p>\n<p>\n In case of success, this function returns\n <code>\n  file\n </code>\n .\n</p>\n<h2>\n 6.9 \u2013\n <a name=\"6.9\">\n  Operating System Facilities\n </a>\n</h2>\n<p>\n This library is implemented through table\n <a name=\"pdf-os\">\n  <code>\n   os\n  </code>\n </a>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.clock ()",
      "body": "<p>\n Returns an approximation of the amount in seconds of CPU time\nused by the program,\nas returned by the underlying ISO\u00a0C function\n <code>\n  clock\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.date ([format [, time]])",
      "body": "<p>\n Returns a string or a table containing date and time,\nformatted according to the given string\n <code>\n  format\n </code>\n .\n</p>\n<p>\n If the\n <code>\n  time\n </code>\n argument is present,\nthis is the time to be formatted\n(see the\n <a href=\"#pdf-os.time\">\n  <code>\n   os.time\n  </code>\n </a>\n function for a description of this value).\nOtherwise,\n <code>\n  date\n </code>\n formats the current time.\n</p>\n<p>\n If\n <code>\n  format\n </code>\n starts with '\n <code>\n  !\n </code>\n ',\nthen the date is formatted in Coordinated Universal Time.\nAfter this optional character,\nif\n <code>\n  format\n </code>\n is the string \"\n <code>\n  *t\n </code>\n \",\nthen\n <code>\n  date\n </code>\n returns a table with the following fields:\n <code>\n  year\n </code>\n ,\n <code>\n  month\n </code>\n (1\u201312),\n <code>\n  day\n </code>\n (1\u201331),\n <code>\n  hour\n </code>\n (0\u201323),\n <code>\n  min\n </code>\n (0\u201359),\n <code>\n  sec\n </code>\n (0\u201361, due to leap seconds),\n <code>\n  wday\n </code>\n (weekday, 1\u20137, Sunday is\u00a01),\n <code>\n  yday\n </code>\n (day of the year, 1\u2013366),\nand\n <code>\n  isdst\n </code>\n (daylight saving flag, a boolean).\nThis last field may be absent\nif the information is not available.\n</p>\n<p>\n If\n <code>\n  format\n </code>\n is not \"\n <code>\n  *t\n </code>\n \",\nthen\n <code>\n  date\n </code>\n returns the date as a string,\nformatted according to the same rules as the ISO\u00a0C function\n <code>\n  strftime\n </code>\n .\n</p>\n<p>\n If\n <code>\n  format\n </code>\n is absent, it defaults to \"\n <code>\n  %c\n </code>\n \",\nwhich gives a human-readable date and time representation\nusing the current locale.\n</p>\n<p>\n On non-POSIX systems,\nthis function may be not thread safe\nbecause of its reliance on C\u00a0function\n <code>\n  gmtime\n </code>\n and C\u00a0function\n <code>\n  localtime\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.difftime (t2, t1)",
      "body": "<p>\n Returns the difference, in seconds,\nfrom time\n <code>\n  t1\n </code>\n to time\n <code>\n  t2\n </code>\n (where the times are values returned by\n <a href=\"#pdf-os.time\">\n  <code>\n   os.time\n  </code>\n </a>\n ).\nIn POSIX, Windows, and some other systems,\nthis value is exactly\n <code>\n  t2\n </code>\n <em>\n  -\n </em>\n <code>\n  t1\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.execute ([command])",
      "body": "<p>\n This function is equivalent to the ISO\u00a0C function\n <code>\n  system\n </code>\n .\nIt passes\n <code>\n  command\n </code>\n to be executed by an operating system shell.\nIts first result is\n <b>\n  true\n </b>\n if the command terminated successfully,\nor\n <b>\n  fail\n </b>\n otherwise.\nAfter this first result\nthe function returns a string plus a number,\nas follows:\n</p>\n<ul>\n <li>\n  <b>\n   \"\n   <code>\n    exit\n   </code>\n   \":\n  </b>\n  the command terminated normally;\nthe following number is the exit status of the command.\n </li>\n <li>\n  <b>\n   \"\n   <code>\n    signal\n   </code>\n   \":\n  </b>\n  the command was terminated by a signal;\nthe following number is the signal that terminated the command.\n </li>\n</ul>\n<p>\n When called without a\n <code>\n  command\n </code>\n ,\n <code>\n  os.execute\n </code>\n returns a boolean that is true if a shell is available.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.exit ([code [, close]])",
      "body": "<p>\n Calls the ISO\u00a0C function\n <code>\n  exit\n </code>\n to terminate the host program.\nIf\n <code>\n  code\n </code>\n is\n <b>\n  true\n </b>\n ,\nthe returned status is\n <code>\n  EXIT_SUCCESS\n </code>\n ;\nif\n <code>\n  code\n </code>\n is\n <b>\n  false\n </b>\n ,\nthe returned status is\n <code>\n  EXIT_FAILURE\n </code>\n ;\nif\n <code>\n  code\n </code>\n is a number,\nthe returned status is this number.\nThe default value for\n <code>\n  code\n </code>\n is\n <b>\n  true\n </b>\n .\n</p>\n<p>\n If the optional second argument\n <code>\n  close\n </code>\n is true,\ncloses the Lua state before exiting.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.getenv (varname)",
      "body": "<p>\n Returns the value of the process environment variable\n <code>\n  varname\n </code>\n or\n <b>\n  fail\n </b>\n if the variable is not defined.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.remove (filename)",
      "body": "<p>\n Deletes the file (or empty directory, on POSIX systems)\nwith the given name.\nIf this function fails, it returns\n <b>\n  fail\n </b>\n plus a string describing the error and the error code.\nOtherwise, it returns true.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.rename (oldname, newname)",
      "body": "<p>\n Renames the file or directory named\n <code>\n  oldname\n </code>\n to\n <code>\n  newname\n </code>\n .\nIf this function fails, it returns\n <b>\n  fail\n </b>\n ,\nplus a string describing the error and the error code.\nOtherwise, it returns true.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.setlocale (locale [, category])",
      "body": "<p>\n Sets the current locale of the program.\n <code>\n  locale\n </code>\n is a system-dependent string specifying a locale;\n <code>\n  category\n </code>\n is an optional string describing which category to change:\n <code>\n  \"all\"\n </code>\n ,\n <code>\n  \"collate\"\n </code>\n ,\n <code>\n  \"ctype\"\n </code>\n ,\n <code>\n  \"monetary\"\n </code>\n ,\n <code>\n  \"numeric\"\n </code>\n , or\n <code>\n  \"time\"\n </code>\n ;\nthe default category is\n <code>\n  \"all\"\n </code>\n .\nThe function returns the name of the new locale,\nor\n <b>\n  fail\n </b>\n if the request cannot be honored.\n</p>\n<p>\n If\n <code>\n  locale\n </code>\n is the empty string,\nthe current locale is set to an implementation-defined native locale.\nIf\n <code>\n  locale\n </code>\n is the string \"\n <code>\n  C\n </code>\n \",\nthe current locale is set to the standard C locale.\n</p>\n<p>\n When called with\n <b>\n  nil\n </b>\n as the first argument,\nthis function only returns the name of the current locale\nfor the given category.\n</p>\n<p>\n This function may be not thread safe\nbecause of its reliance on C\u00a0function\n <code>\n  setlocale\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.time ([table])",
      "body": "<p>\n Returns the current time when called without arguments,\nor a time representing the local date and time specified by the given table.\nThis table must have fields\n <code>\n  year\n </code>\n ,\n <code>\n  month\n </code>\n , and\n <code>\n  day\n </code>\n ,\nand may have fields\n <code>\n  hour\n </code>\n (default is 12),\n <code>\n  min\n </code>\n (default is 0),\n <code>\n  sec\n </code>\n (default is 0),\nand\n <code>\n  isdst\n </code>\n (default is\n <b>\n  nil\n </b>\n ).\nOther fields are ignored.\nFor a description of these fields, see the\n <a href=\"#pdf-os.date\">\n  <code>\n   os.date\n  </code>\n </a>\n function.\n</p>\n<p>\n When the function is called,\nthe values in these fields do not need to be inside their valid ranges.\nFor instance, if\n <code>\n  sec\n </code>\n is -10,\nit means 10 seconds before the time specified by the other fields;\nif\n <code>\n  hour\n </code>\n is 1000,\nit means 1000 hours after the time specified by the other fields.\n</p>\n<p>\n The returned value is a number, whose meaning depends on your system.\nIn POSIX, Windows, and some other systems,\nthis number counts the number\nof seconds since some given start time (the \"epoch\").\nIn other systems, the meaning is not specified,\nand the number returned by\n <code>\n  time\n </code>\n can be used only as an argument to\n <a href=\"#pdf-os.date\">\n  <code>\n   os.date\n  </code>\n </a>\n and\n <a href=\"#pdf-os.difftime\">\n  <code>\n   os.difftime\n  </code>\n </a>\n .\n</p>\n<p>\n When called with a table,\n <code>\n  os.time\n </code>\n also normalizes all the fields\ndocumented in the\n <a href=\"#pdf-os.date\">\n  <code>\n   os.date\n  </code>\n </a>\n function,\nso that they represent the same time as before the call\nbut with values inside their valid ranges.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "os.tmpname ()",
      "body": "<p>\n Returns a string with a file name that can\nbe used for a temporary file.\nThe file must be explicitly opened before its use\nand explicitly removed when no longer needed.\n</p>\n<p>\n In POSIX systems,\nthis function also creates a file with that name,\nto avoid security risks.\n(Someone else might create the file with wrong permissions\nin the time between getting the name and creating the file.)\nYou still have to open the file to use it\nand to remove it (even if you do not use it).\n</p>\n<p>\n When possible,\nyou may prefer to use\n <a href=\"#pdf-io.tmpfile\">\n  <code>\n   io.tmpfile\n  </code>\n </a>\n ,\nwhich automatically removes the file when the program ends.\n</p>\n<h2>\n 6.10 \u2013\n <a name=\"6.10\">\n  The Debug Library\n </a>\n</h2>\n<p>\n This library provides\nthe functionality of the debug interface (\n <a href=\"#4.7\">\n  \u00a74.7\n </a>\n ) to Lua programs.\nYou should exert care when using this library.\nSeveral of its functions\nviolate basic assumptions about Lua code\n(e.g., that variables local to a function\ncannot be accessed from outside;\nthat userdata metatables cannot be changed by Lua code;\nthat Lua programs do not crash)\nand therefore can compromise otherwise secure code.\nMoreover, some functions in this library may be slow.\n</p>\n<p>\n All functions in this library are provided\ninside the\n <a name=\"pdf-debug\">\n  <code>\n   debug\n  </code>\n </a>\n table.\nAll functions that operate over a thread\nhave an optional first argument which is the\nthread to operate over.\nThe default is always the current thread.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.debug ()",
      "body": "<p>\n Enters an interactive mode with the user,\nrunning each string that the user enters.\nUsing simple commands and other debug facilities,\nthe user can inspect global and local variables,\nchange their values, evaluate expressions, and so on.\nA line containing only the word\n <code>\n  cont\n </code>\n finishes this function,\nso that the caller continues its execution.\n</p>\n<p>\n Note that commands for\n <code>\n  debug.debug\n </code>\n are not lexically nested\nwithin any function and so have no direct access to local variables.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.gethook ([thread])",
      "body": "<p>\n Returns the current hook settings of the thread, as three values:\nthe current hook function, the current hook mask,\nand the current hook count,\nas set by the\n <a href=\"#pdf-debug.sethook\">\n  <code>\n   debug.sethook\n  </code>\n </a>\n function.\n</p>\n<p>\n Returns\n <b>\n  fail\n </b>\n if there is no active hook.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.getinfo ([thread,] f [, what])",
      "body": "<p>\n Returns a table with information about a function.\nYou can give the function directly\nor you can give a number as the value of\n <code>\n  f\n </code>\n ,\nwhich means the function running at level\n <code>\n  f\n </code>\n of the call stack\nof the given thread:\nlevel\u00a00 is the current function (\n <code>\n  getinfo\n </code>\n itself);\nlevel\u00a01 is the function that called\n <code>\n  getinfo\n </code>\n (except for tail calls, which do not count in the stack);\nand so on.\nIf\n <code>\n  f\n </code>\n is a number greater than the number of active functions,\nthen\n <code>\n  getinfo\n </code>\n returns\n <b>\n  fail\n </b>\n .\n</p>\n<p>\n The returned table can contain all the fields returned by\n <a href=\"#lua_getinfo\">\n  <code>\n   lua_getinfo\n  </code>\n </a>\n ,\nwith the string\n <code>\n  what\n </code>\n describing which fields to fill in.\nThe default for\n <code>\n  what\n </code>\n is to get all information available,\nexcept the table of valid lines.\nIf present,\nthe option '\n <code>\n  f\n </code>\n '\nadds a field named\n <code>\n  func\n </code>\n with the function itself.\nIf present,\nthe option '\n <code>\n  L\n </code>\n '\nadds a field named\n <code>\n  activelines\n </code>\n with the table of\nvalid lines.\n</p>\n<p>\n For instance, the expression\n <code>\n  debug.getinfo(1,\"n\").name\n </code>\n returns\na name for the current function,\nif a reasonable name can be found,\nand the expression\n <code>\n  debug.getinfo(print)\n </code>\n returns a table with all available information\nabout the\n <a href=\"#pdf-print\">\n  <code>\n   print\n  </code>\n </a>\n function.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.getlocal ([thread,] f, local)",
      "body": "<p>\n This function returns the name and the value of the local variable\nwith index\n <code>\n  local\n </code>\n of the function at level\n <code>\n  f\n </code>\n of the stack.\nThis function accesses not only explicit local variables,\nbut also parameters and temporary values.\n</p>\n<p>\n The first parameter or local variable has index\u00a01, and so on,\nfollowing the order that they are declared in the code,\ncounting only the variables that are active\nin the current scope of the function.\nCompile-time constants may not appear in this listing,\nif they were optimized away by the compiler.\nNegative indices refer to vararg arguments;\n-1 is the first vararg argument.\nThe function returns\n <b>\n  fail\n </b>\n if there is no variable with the given index,\nand raises an error when called with a level out of range.\n(You can call\n <a href=\"#pdf-debug.getinfo\">\n  <code>\n   debug.getinfo\n  </code>\n </a>\n to check whether the level is valid.)\n</p>\n<p>\n Variable names starting with '\n <code>\n  (\n </code>\n ' (open parenthesis) \nrepresent variables with no known names\n(internal variables such as loop control variables,\nand variables from chunks saved without debug information).\n</p>\n<p>\n The parameter\n <code>\n  f\n </code>\n may also be a function.\nIn that case,\n <code>\n  getlocal\n </code>\n returns only the name of function parameters.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.getmetatable (value)",
      "body": "<p>\n Returns the metatable of the given\n <code>\n  value\n </code>\n or\n <b>\n  nil\n </b>\n if it does not have a metatable.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.getregistry ()",
      "body": "<p>\n Returns the registry table (see\n <a href=\"#4.3\">\n  \u00a74.3\n </a>\n ).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.getupvalue (f, up)",
      "body": "<p>\n This function returns the name and the value of the upvalue\nwith index\n <code>\n  up\n </code>\n of the function\n <code>\n  f\n </code>\n .\nThe function returns\n <b>\n  fail\n </b>\n if there is no upvalue with the given index.\n</p>\n<p>\n (For Lua functions,\nupvalues are the external local variables that the function uses,\nand that are consequently included in its closure.)\n</p>\n<p>\n For C\u00a0functions, this function uses the empty string\n <code>\n  \"\"\n </code>\n as a name for all upvalues.\n</p>\n<p>\n Variable name '\n <code>\n  ?\n </code>\n ' (interrogation mark)\nrepresents variables with no known names\n(variables from chunks saved without debug information).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.getuservalue (u, n)",
      "body": "<p>\n Returns the\n <code>\n  n\n </code>\n -th user value associated\nto the userdata\n <code>\n  u\n </code>\n plus a boolean,\n <b>\n  false\n </b>\n if the userdata does not have that value.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.sethook ([thread,] hook, mask [, count])",
      "body": "<p>\n Sets the given function as the debug hook.\nThe string\n <code>\n  mask\n </code>\n and the number\n <code>\n  count\n </code>\n describe\nwhen the hook will be called.\nThe string mask may have any combination of the following characters,\nwith the given meaning:\n</p>\n<ul>\n <li>\n  <b>\n   '\n   <code>\n    c\n   </code>\n   ':\n  </b>\n  the hook is called every time Lua calls a function;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    r\n   </code>\n   ':\n  </b>\n  the hook is called every time Lua returns from a function;\n </li>\n <li>\n  <b>\n   '\n   <code>\n    l\n   </code>\n   ':\n  </b>\n  the hook is called every time Lua enters a new line of code.\n </li>\n</ul>\n<p>\n Moreover,\nwith a\n <code>\n  count\n </code>\n different from zero,\nthe hook is called also after every\n <code>\n  count\n </code>\n instructions.\n</p>\n<p>\n When called without arguments,\n <a href=\"#pdf-debug.sethook\">\n  <code>\n   debug.sethook\n  </code>\n </a>\n turns off the hook.\n</p>\n<p>\n When the hook is called, its first parameter is a string\ndescribing the event that has triggered its call:\n <code>\n  \"call\"\n </code>\n ,\n <code>\n  \"tail call\"\n </code>\n ,\n <code>\n  \"return\"\n </code>\n ,\n <code>\n  \"line\"\n </code>\n , and\n <code>\n  \"count\"\n </code>\n .\nFor line events,\nthe hook also gets the new line number as its second parameter.\nInside a hook,\nyou can call\n <code>\n  getinfo\n </code>\n with level\u00a02 to get more information about\nthe running function.\n(Level\u00a00 is the\n <code>\n  getinfo\n </code>\n function,\nand level\u00a01 is the hook function.)\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.setlocal ([thread,] level, local, value)",
      "body": "<p>\n This function assigns the value\n <code>\n  value\n </code>\n to the local variable\nwith index\n <code>\n  local\n </code>\n of the function at level\n <code>\n  level\n </code>\n of the stack.\nThe function returns\n <b>\n  fail\n </b>\n if there is no local\nvariable with the given index,\nand raises an error when called with a\n <code>\n  level\n </code>\n out of range.\n(You can call\n <code>\n  getinfo\n </code>\n to check whether the level is valid.)\nOtherwise, it returns the name of the local variable.\n</p>\n<p>\n See\n <a href=\"#pdf-debug.getlocal\">\n  <code>\n   debug.getlocal\n  </code>\n </a>\n for more information about\nvariable indices and names.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.setmetatable (value, table)",
      "body": "<p>\n Sets the metatable for the given\n <code>\n  value\n </code>\n to the given\n <code>\n  table\n </code>\n (which can be\n <b>\n  nil\n </b>\n ).\nReturns\n <code>\n  value\n </code>\n .\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.setupvalue (f, up, value)",
      "body": "<p>\n This function assigns the value\n <code>\n  value\n </code>\n to the upvalue\nwith index\n <code>\n  up\n </code>\n of the function\n <code>\n  f\n </code>\n .\nThe function returns\n <b>\n  fail\n </b>\n if there is no upvalue\nwith the given index.\nOtherwise, it returns the name of the upvalue.\n</p>\n<p>\n See\n <a href=\"#pdf-debug.getupvalue\">\n  <code>\n   debug.getupvalue\n  </code>\n </a>\n for more information about upvalues.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.setuservalue (udata, value, n)",
      "body": "<p>\n Sets the given\n <code>\n  value\n </code>\n as\nthe\n <code>\n  n\n </code>\n -th user value associated to the given\n <code>\n  udata\n </code>\n .\n <code>\n  udata\n </code>\n must be a full userdata.\n</p>\n<p>\n Returns\n <code>\n  udata\n </code>\n ,\nor\n <b>\n  fail\n </b>\n if the userdata does not have that value.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.traceback ([thread,] [message [, level]])",
      "body": "<p>\n If\n <code>\n  message\n </code>\n is present but is neither a string nor\n <b>\n  nil\n </b>\n ,\nthis function returns\n <code>\n  message\n </code>\n without further processing.\nOtherwise,\nit returns a string with a traceback of the call stack.\nThe optional\n <code>\n  message\n </code>\n string is appended\nat the beginning of the traceback.\nAn optional\n <code>\n  level\n </code>\n number tells at which level\nto start the traceback\n(default is 1, the function calling\n <code>\n  traceback\n </code>\n ).\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.upvalueid (f, n)",
      "body": "<p>\n Returns a unique identifier (as a light userdata)\nfor the upvalue numbered\n <code>\n  n\n </code>\n from the given function.\n</p>\n<p>\n These unique identifiers allow a program to check whether different\nclosures share upvalues.\nLua closures that share an upvalue\n(that is, that access a same external local variable)\nwill return identical ids for those upvalue indices.\n</p>\n<p>\n</p>\n<hr/>\n"
  },
  {
      "group": "function",
      "type": [],
      "name": "debug.upvaluejoin (f1, n1, f2, n2)",
      "body": "<p>\n Make the\n <code>\n  n1\n </code>\n -th upvalue of the Lua closure\n <code>\n  f1\n </code>\n refer to the\n <code>\n  n2\n </code>\n -th upvalue of the Lua closure\n <code>\n  f2\n </code>\n .\n</p>\n<h1>\n 7 \u2013\n <a name=\"7\">\n  Lua Standalone\n </a>\n</h1>\n<p>\n Although Lua has been designed as an extension language,\nto be embedded in a host C\u00a0program,\nit is also frequently used as a standalone language.\nAn interpreter for Lua as a standalone language,\ncalled simply\n <code>\n  lua\n </code>\n ,\nis provided with the standard distribution.\nThe standalone interpreter includes\nall standard libraries.\nIts usage is:\n</p>\n<pre>     lua [options] [script [args]]\n</pre>\n<p>\n The options are:\n</p>\n<ul>\n <li>\n  <b>\n   <code>\n    -e\n    <em>\n     stat\n    </em>\n   </code>\n   :\n  </b>\n  execute string\n  <em>\n   stat\n  </em>\n  ;\n </li>\n <li>\n  <b>\n   <code>\n    -i\n   </code>\n   :\n  </b>\n  enter interactive mode after running\n  <em>\n   script\n  </em>\n  ;\n </li>\n <li>\n  <b>\n   <code>\n    -l\n    <em>\n     mod\n    </em>\n   </code>\n   :\n  </b>\n  \"require\"\n  <em>\n   mod\n  </em>\n  and assign the\n  result to global\n  <em>\n   mod\n  </em>\n  ;\n </li>\n <li>\n  <b>\n   <code>\n    -v\n   </code>\n   :\n  </b>\n  print version information;\n </li>\n <li>\n  <b>\n   <code>\n    -E\n   </code>\n   :\n  </b>\n  ignore environment variables;\n </li>\n <li>\n  <b>\n   <code>\n    -W\n   </code>\n   :\n  </b>\n  turn warnings on;\n </li>\n <li>\n  <b>\n   <code>\n    --\n   </code>\n   :\n  </b>\n  stop handling options;\n </li>\n <li>\n  <b>\n   <code>\n    -\n   </code>\n   :\n  </b>\n  execute\n  <code>\n   stdin\n  </code>\n  as a file and stop handling options.\n </li>\n</ul>\n<p>\n After handling its options,\n <code>\n  lua\n </code>\n runs the given\n <em>\n  script\n </em>\n .\nWhen called without arguments,\n <code>\n  lua\n </code>\n behaves as\n <code>\n  lua -v -i\n </code>\n when the standard input (\n <code>\n  stdin\n </code>\n ) is a terminal,\nand as\n <code>\n  lua -\n </code>\n otherwise.\n</p>\n<p>\n When called without the option\n <code>\n  -E\n </code>\n ,\nthe interpreter checks for an environment variable\n <a name=\"pdf-LUA_INIT_5_4\">\n  <code>\n   LUA_INIT_5_4\n  </code>\n </a>\n (or\n <a name=\"pdf-LUA_INIT\">\n  <code>\n   LUA_INIT\n  </code>\n </a>\n if the versioned name is not defined)\nbefore running any argument.\nIf the variable content has the format\n <code>\n  @\n  <em>\n   filename\n  </em>\n </code>\n ,\nthen\n <code>\n  lua\n </code>\n executes the file.\nOtherwise,\n <code>\n  lua\n </code>\n executes the string itself.\n</p>\n<p>\n When called with the option\n <code>\n  -E\n </code>\n ,\nLua does not consult any environment variables.\nIn particular,\nthe values of\n <a href=\"#pdf-package.path\">\n  <code>\n   package.path\n  </code>\n </a>\n and\n <a href=\"#pdf-package.cpath\">\n  <code>\n   package.cpath\n  </code>\n </a>\n are set with the default paths defined in\n <code>\n  luaconf.h\n </code>\n .\n</p>\n<p>\n The options\n <code>\n  -e\n </code>\n ,\n <code>\n  -l\n </code>\n , and\n <code>\n  -W\n </code>\n are handled in\nthe order they appear.\nFor instance, an invocation like\n</p>\n<pre>     $ lua -e 'a=1' -llib1 script.lua\n</pre>\n<p>\n will first set\n <code>\n  a\n </code>\n to 1, then require the library\n <code>\n  lib1\n </code>\n ,\nand finally run the file\n <code>\n  script.lua\n </code>\n with no arguments.\n(Here\n <code>\n  $\n </code>\n is the shell prompt. Your prompt may be different.)\n</p>\n<p>\n Before running any code,\n <code>\n  lua\n </code>\n collects all command-line arguments\nin a global table called\n <code>\n  arg\n </code>\n .\nThe script name goes to index 0,\nthe first argument after the script name goes to index 1,\nand so on.\nAny arguments before the script name\n(that is, the interpreter name plus its options)\ngo to negative indices.\nFor instance, in the call\n</p>\n<pre>     $ lua -la b.lua t1 t2\n</pre>\n<p>\n the table is like this:\n</p>\n<pre>     arg = { [-2] = \"lua\", [-1] = \"-la\",\n             [0] = \"b.lua\",\n             [1] = \"t1\", [2] = \"t2\" }\n</pre>\n<p>\n If there is no script in the call,\nthe interpreter name goes to index 0,\nfollowed by the other arguments.\nFor instance, the call\n</p>\n<pre>     $ lua -e \"print(arg[1])\"\n</pre>\n<p>\n will print \"\n <code>\n  -e\n </code>\n \".\nIf there is a script,\nthe script is called with arguments\n <code>\n  arg[1]\n </code>\n , \u00b7\u00b7\u00b7,\n <code>\n  arg[#arg]\n </code>\n .\nLike all chunks in Lua,\nthe script is compiled as a vararg function.\n</p>\n<p>\n In interactive mode,\nLua repeatedly prompts and waits for a line.\nAfter reading a line,\nLua first try to interpret the line as an expression.\nIf it succeeds, it prints its value.\nOtherwise, it interprets the line as a statement.\nIf you write an incomplete statement,\nthe interpreter waits for its completion\nby issuing a different prompt.\n</p>\n<p>\n If the global variable\n <a name=\"pdf-_PROMPT\">\n  <code>\n   _PROMPT\n  </code>\n </a>\n contains a string,\nthen its value is used as the prompt.\nSimilarly, if the global variable\n <a name=\"pdf-_PROMPT2\">\n  <code>\n   _PROMPT2\n  </code>\n </a>\n contains a string,\nits value is used as the secondary prompt\n(issued during incomplete statements).\n</p>\n<p>\n In case of unprotected errors in the script,\nthe interpreter reports the error to the standard error stream.\nIf the error object is not a string but\nhas a metamethod\n <code>\n  __tostring\n </code>\n ,\nthe interpreter calls this metamethod to produce the final message.\nOtherwise, the interpreter converts the error object to a string\nand adds a stack traceback to it.\nWhen warnings are on,\nthey are simply printed in the standard error output.\n</p>\n<p>\n When finishing normally,\nthe interpreter closes its main Lua state\n(see\n <a href=\"#lua_close\">\n  <code>\n   lua_close\n  </code>\n </a>\n ).\nThe script can avoid this step by\ncalling\n <a href=\"#pdf-os.exit\">\n  <code>\n   os.exit\n  </code>\n </a>\n to terminate.\n</p>\n<p>\n To allow the use of Lua as a\nscript interpreter in Unix systems,\nLua skips the first line of a file chunk if it starts with\n <code>\n  #\n </code>\n .\nTherefore, Lua scripts can be made into executable programs\nby using\n <code>\n  chmod +x\n </code>\n and the\n <code>\n  #!\n </code>\n form,\nas in\n</p>\n<pre>     #!/usr/local/bin/lua\n</pre>\n<p>\n Of course,\nthe location of the Lua interpreter may be different in your machine.\nIf\n <code>\n  lua\n </code>\n is in your\n <code>\n  PATH\n </code>\n ,\nthen\n</p>\n<pre>     #!/usr/bin/env lua\n</pre>\n<p>\n is a more portable solution.\n</p>\n<h1>\n 8 \u2013\n <a name=\"8\">\n  Incompatibilities with the Previous Version\n </a>\n</h1>\n<p>\n Here we list the incompatibilities that you may find when moving a program\nfrom Lua\u00a05.3 to Lua\u00a05.4.\n</p>\n<p>\n You can avoid some incompatibilities by compiling Lua with\nappropriate options (see file\n <code>\n  luaconf.h\n </code>\n ).\nHowever,\nall these compatibility options will be removed in the future.\nMore often than not,\ncompatibility issues arise when these compatibility options\nare removed.\nSo, whenever you have the chance,\nyou should try to test your code with a version of Lua compiled\nwith all compatibility options turned off.\nThat will ease transitions to newer versions of Lua.\n</p>\n<p>\n Lua versions can always change the C API in ways that\ndo not imply source-code changes in a program,\nsuch as the numeric values for constants\nor the implementation of functions as macros.\nTherefore,\nyou should never assume that binaries are compatible between\ndifferent Lua versions.\nAlways recompile clients of the Lua API when\nusing a new version.\n</p>\n<p>\n Similarly, Lua versions can always change the internal representation\nof precompiled chunks;\nprecompiled chunks are not compatible between different Lua versions.\n</p>\n<p>\n The standard paths in the official distribution may\nchange between versions.\n</p>\n<h2>\n 8.1 \u2013\n <a name=\"8.1\">\n  Incompatibilities in the Language\n </a>\n</h2>\n<ul>\n <li>\n  The coercion of strings to numbers in\narithmetic and bitwise operations\nhas been removed from the core language.\nThe string library does a similar job\nfor arithmetic (but not for bitwise) operations\nusing the string metamethods.\nHowever, unlike in previous versions,\nthe new implementation preserves the implicit type of the numeral\nin the string.\nFor instance, the result of\n  <code>\n   \"1\" + \"2\"\n  </code>\n  now is an integer,\nnot a float.\n </li>\n <li>\n  Literal decimal integer constants that overflow are read as floats,\ninstead of wrapping around.\nYou can use hexadecimal notation for such constants if you\nwant the old behavior\n(reading them as integers with wrap around).\n </li>\n <li>\n  The use of the\n  <code>\n   __lt\n  </code>\n  metamethod to emulate\n  <code>\n   __le\n  </code>\n  has been removed.\nWhen needed, this metamethod must be explicitly defined.\n </li>\n <li>\n  The semantics of the numerical\n  <b>\n   for\n  </b>\n  loop\nover integers changed in some details.\nIn particular, the control variable never wraps around.\n </li>\n <li>\n  A label for a\n  <b>\n   goto\n  </b>\n  cannot be declared where a label with the same\nname is visible, even if this other label is declared in an enclosing\nblock.\n </li>\n <li>\n  When finalizing an object,\nLua does not ignore\n  <code>\n   __gc\n  </code>\n  metamethods that are not functions.\nAny value will be called, if present.\n(Non-callable values will generate a warning,\nlike any other error when calling a finalizer.)\n </li>\n</ul>\n<h2>\n 8.2 \u2013\n <a name=\"8.2\">\n  Incompatibilities in the Libraries\n </a>\n</h2>\n<ul>\n <li>\n  The function\n  <a href=\"#pdf-print\">\n   <code>\n    print\n   </code>\n  </a>\n  does not call\n  <a href=\"#pdf-tostring\">\n   <code>\n    tostring\n   </code>\n  </a>\n  to format its arguments;\ninstead, it has this functionality hardwired.\nYou should use\n  <code>\n   __tostring\n  </code>\n  to modify how values are printed.\n </li>\n <li>\n  The pseudo-random number generator used by the function\n  <a href=\"#pdf-math.random\">\n   <code>\n    math.random\n   </code>\n  </a>\n  now starts with a somewhat random seed.\nMoreover, it uses a different algorithm.\n </li>\n <li>\n  By default, the decoding functions in the\n  <a href=\"#pdf-utf8\">\n   <code>\n    utf8\n   </code>\n  </a>\n  library\ndo not accept surrogates as valid code points.\nAn extra parameter in these functions makes them more permissive.\n </li>\n <li>\n  The options \"\n  <code>\n   setpause\n  </code>\n  \" and \"\n  <code>\n   setstepmul\n  </code>\n  \"\nof the function\n  <a href=\"#pdf-collectgarbage\">\n   <code>\n    collectgarbage\n   </code>\n  </a>\n  are deprecated.\nYou should use the new option \"\n  <code>\n   incremental\n  </code>\n  \" to set them.\n </li>\n <li>\n  The function\n  <a href=\"#pdf-io.lines\">\n   <code>\n    io.lines\n   </code>\n  </a>\n  now returns four values,\ninstead of just one.\nThat can be a problem when it is used as the sole\nargument to another function that has optional parameters,\nsuch as in\n  <code>\n   load(io.lines(filename, \"L\"))\n  </code>\n  .\nTo fix that issue,\nyou can wrap the call into parentheses,\nto adjust its number of results to one.\n </li>\n</ul>\n<h2>\n 8.3 \u2013\n <a name=\"8.3\">\n  Incompatibilities in the API\n </a>\n</h2>\n<ul>\n <li>\n  Full userdata now has an arbitrary number of associated user values.\nTherefore, the functions\n  <code>\n   lua_newuserdata\n  </code>\n  ,\n  <code>\n   lua_setuservalue\n  </code>\n  , and\n  <code>\n   lua_getuservalue\n  </code>\n  were\nreplaced by\n  <a href=\"#lua_newuserdatauv\">\n   <code>\n    lua_newuserdatauv\n   </code>\n  </a>\n  ,\n  <a href=\"#lua_setiuservalue\">\n   <code>\n    lua_setiuservalue\n   </code>\n  </a>\n  , and\n  <a href=\"#lua_getiuservalue\">\n   <code>\n    lua_getiuservalue\n   </code>\n  </a>\n  ,\nwhich have an extra argument.\n  <p>\n   For compatibility, the old names still work as macros assuming\none single user value.\nNote, however, that userdata with zero user values\nare more efficient memory-wise.\n  </p>\n </li>\n <li>\n  The function\n  <a href=\"#lua_resume\">\n   <code>\n    lua_resume\n   </code>\n  </a>\n  has an extra parameter.\nThis out parameter returns the number of values on\nthe top of the stack that were yielded or returned by the coroutine.\n(In previous versions,\nthose values were the entire stack.)\n </li>\n <li>\n  The function\n  <a href=\"#lua_version\">\n   <code>\n    lua_version\n   </code>\n  </a>\n  returns the version number,\ninstead of an address of the version number.\nThe Lua core should work correctly with libraries using their\nown static copies of the same core,\nso there is no need to check whether they are using the same\naddress space.\n </li>\n <li>\n  The constant\n  <code>\n   LUA_ERRGCMM\n  </code>\n  was removed.\nErrors in finalizers are never propagated;\ninstead, they generate a warning.\n </li>\n <li>\n  The options\n  <code>\n   LUA_GCSETPAUSE\n  </code>\n  and\n  <code>\n   LUA_GCSETSTEPMUL\n  </code>\n  of the function\n  <a href=\"#lua_gc\">\n   <code>\n    lua_gc\n   </code>\n  </a>\n  are deprecated.\nYou should use the new option\n  <code>\n   LUA_GCINC\n  </code>\n  to set them.\n </li>\n</ul>\n<h1>\n 9 \u2013\n <a name=\"9\">\n  The Complete Syntax of Lua\n </a>\n</h1>\n<p>\n Here is the complete syntax of Lua in extended BNF.\nAs usual in extended BNF,\n{A} means 0 or more As,\nand [A] means an optional A.\n(For operator precedences, see\n <a href=\"#3.4.8\">\n  \u00a73.4.8\n </a>\n ;\nfor a description of the terminals\nName, Numeral,\nand LiteralString, see\n <a href=\"#3.1\">\n  \u00a73.1\n </a>\n .)\n</p>\n<pre>\n\tchunk ::= block\n\n\tblock ::= {stat} [retstat]\n\n\tstat ::=  \u2018<b>;</b>\u2019 | \n\t\t varlist \u2018<b>=</b>\u2019 explist | \n\t\t functioncall | \n\t\t label | \n\t\t <b>break</b> | \n\t\t <b>goto</b> Name | \n\t\t <b>do</b> block <b>end</b> | \n\t\t <b>while</b> exp <b>do</b> block <b>end</b> | \n\t\t <b>repeat</b> block <b>until</b> exp | \n\t\t <b>if</b> exp <b>then</b> block {<b>elseif</b> exp <b>then</b> block} [<b>else</b> block] <b>end</b> | \n\t\t <b>for</b> Name \u2018<b>=</b>\u2019 exp \u2018<b>,</b>\u2019 exp [\u2018<b>,</b>\u2019 exp] <b>do</b> block <b>end</b> | \n\t\t <b>for</b> namelist <b>in</b> explist <b>do</b> block <b>end</b> | \n\t\t <b>function</b> funcname funcbody | \n\t\t <b>local</b> <b>function</b> Name funcbody | \n\t\t <b>local</b> attnamelist [\u2018<b>=</b>\u2019 explist] \n\n\tattnamelist ::=  Name attrib {\u2018<b>,</b>\u2019 Name attrib}\n\n\tattrib ::= [\u2018<b>&lt;</b>\u2019 Name \u2018<b>&gt;</b>\u2019]\n\n\tretstat ::= <b>return</b> [explist] [\u2018<b>;</b>\u2019]\n\n\tlabel ::= \u2018<b>::</b>\u2019 Name \u2018<b>::</b>\u2019\n\n\tfuncname ::= Name {\u2018<b>.</b>\u2019 Name} [\u2018<b>:</b>\u2019 Name]\n\n\tvarlist ::= var {\u2018<b>,</b>\u2019 var}\n\n\tvar ::=  Name | prefixexp \u2018<b>[</b>\u2019 exp \u2018<b>]</b>\u2019 | prefixexp \u2018<b>.</b>\u2019 Name \n\n\tnamelist ::= Name {\u2018<b>,</b>\u2019 Name}\n\n\texplist ::= exp {\u2018<b>,</b>\u2019 exp}\n\n\texp ::=  <b>nil</b> | <b>false</b> | <b>true</b> | Numeral | LiteralString | \u2018<b>...</b>\u2019 | functiondef | \n\t\t prefixexp | tableconstructor | exp binop exp | unop exp \n\n\tprefixexp ::= var | functioncall | \u2018<b>(</b>\u2019 exp \u2018<b>)</b>\u2019\n\n\tfunctioncall ::=  prefixexp args | prefixexp \u2018<b>:</b>\u2019 Name args \n\n\targs ::=  \u2018<b>(</b>\u2019 [explist] \u2018<b>)</b>\u2019 | tableconstructor | LiteralString \n\n\tfunctiondef ::= <b>function</b> funcbody\n\n\tfuncbody ::= \u2018<b>(</b>\u2019 [parlist] \u2018<b>)</b>\u2019 block <b>end</b>\n\n\tparlist ::= namelist [\u2018<b>,</b>\u2019 \u2018<b>...</b>\u2019] | \u2018<b>...</b>\u2019\n\n\ttableconstructor ::= \u2018<b>{</b>\u2019 [fieldlist] \u2018<b>}</b>\u2019\n\n\tfieldlist ::= field {fieldsep field} [fieldsep]\n\n\tfield ::= \u2018<b>[</b>\u2019 exp \u2018<b>]</b>\u2019 \u2018<b>=</b>\u2019 exp | Name \u2018<b>=</b>\u2019 exp | exp\n\n\tfieldsep ::= \u2018<b>,</b>\u2019 | \u2018<b>;</b>\u2019\n\n\tbinop ::=  \u2018<b>+</b>\u2019 | \u2018<b>-</b>\u2019 | \u2018<b>*</b>\u2019 | \u2018<b>/</b>\u2019 | \u2018<b>//</b>\u2019 | \u2018<b>^</b>\u2019 | \u2018<b>%</b>\u2019 | \n\t\t \u2018<b>&amp;</b>\u2019 | \u2018<b>~</b>\u2019 | \u2018<b>|</b>\u2019 | \u2018<b>&gt;&gt;</b>\u2019 | \u2018<b>&lt;&lt;</b>\u2019 | \u2018<b>..</b>\u2019 | \n\t\t \u2018<b>&lt;</b>\u2019 | \u2018<b>&lt;=</b>\u2019 | \u2018<b>&gt;</b>\u2019 | \u2018<b>&gt;=</b>\u2019 | \u2018<b>==</b>\u2019 | \u2018<b>~=</b>\u2019 | \n\t\t <b>and</b> | <b>or</b>\n\n\tunop ::= \u2018<b>-</b>\u2019 | <b>not</b> | \u2018<b>#</b>\u2019 | \u2018<b>~</b>\u2019\n\n</pre>\n<p>\n</p>\n<p class=\"footer\">\n Last update:\nThu Jan 13 11:33:16 UTC 2022\n</p>\n"
  }
];

/**
 * Fuse.js v6.6.2 - Lightweight fuzzy-search (http://fusejs.io)
 *
 * Copyright (c) 2022 Kiro Risk (http://kiro.me)
 * All Rights Reserved. Apache Software License 2.0
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 */
var e, t;
(e = this),
  (t = function () {
    "use strict";
    function e(e, t) {
      var n = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(e);
        t &&
          (r = r.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })),
          n.push.apply(n, r);
      }
      return n;
    }
    function t(t) {
      for (var n = 1; n < arguments.length; n++) {
        var r = null != arguments[n] ? arguments[n] : {};
        n % 2
          ? e(Object(r), !0).forEach(function (e) {
              c(t, e, r[e]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r))
          : e(Object(r)).forEach(function (e) {
              Object.defineProperty(
                t,
                e,
                Object.getOwnPropertyDescriptor(r, e)
              );
            });
      }
      return t;
    }
    function n(e) {
      return (
        (n =
          "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
            ? function (e) {
                return typeof e;
              }
            : function (e) {
                return e &&
                  "function" == typeof Symbol &&
                  e.constructor === Symbol &&
                  e !== Symbol.prototype
                  ? "symbol"
                  : typeof e;
              }),
        n(e)
      );
    }
    function r(e, t) {
      if (!(e instanceof t))
        throw new TypeError("Cannot call a class as a function");
    }
    function i(e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];
        (r.enumerable = r.enumerable || !1),
          (r.configurable = !0),
          "value" in r && (r.writable = !0),
          Object.defineProperty(e, r.key, r);
      }
    }
    function o(e, t, n) {
      return (
        t && i(e.prototype, t),
        n && i(e, n),
        Object.defineProperty(e, "prototype", { writable: !1 }),
        e
      );
    }
    function c(e, t, n) {
      return (
        t in e
          ? Object.defineProperty(e, t, {
              value: n,
              enumerable: !0,
              configurable: !0,
              writable: !0,
            })
          : (e[t] = n),
        e
      );
    }
    function a(e, t) {
      if ("function" != typeof t && null !== t)
        throw new TypeError(
          "Super expression must either be null or a function"
        );
      Object.defineProperty(e, "prototype", {
        value: Object.create(t && t.prototype, {
          constructor: { value: e, writable: !0, configurable: !0 },
        }),
        writable: !1,
      }),
        t && u(e, t);
    }
    function s(e) {
      return (
        (s = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function (e) {
              return e.__proto__ || Object.getPrototypeOf(e);
            }),
        s(e)
      );
    }
    function u(e, t) {
      return (
        (u =
          Object.setPrototypeOf ||
          function (e, t) {
            return (e.__proto__ = t), e;
          }),
        u(e, t)
      );
    }
    function h(e, t) {
      if (t && ("object" == typeof t || "function" == typeof t)) return t;
      if (void 0 !== t)
        throw new TypeError(
          "Derived constructors may only return object or undefined"
        );
      return (function (e) {
        if (void 0 === e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        return e;
      })(e);
    }
    function l(e) {
      var t = (function () {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
          return (
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function () {})
            ),
            !0
          );
        } catch (e) {
          return !1;
        }
      })();
      return function () {
        var n,
          r = s(e);
        if (t) {
          var i = s(this).constructor;
          n = Reflect.construct(r, arguments, i);
        } else n = r.apply(this, arguments);
        return h(this, n);
      };
    }
    function f(e) {
      return (
        (function (e) {
          if (Array.isArray(e)) return d(e);
        })(e) ||
        (function (e) {
          if (
            ("undefined" != typeof Symbol && null != e[Symbol.iterator]) ||
            null != e["@@iterator"]
          )
            return Array.from(e);
        })(e) ||
        (function (e, t) {
          if (e) {
            if ("string" == typeof e) return d(e, t);
            var n = Object.prototype.toString.call(e).slice(8, -1);
            return (
              "Object" === n && e.constructor && (n = e.constructor.name),
              "Map" === n || "Set" === n
                ? Array.from(e)
                : "Arguments" === n ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                ? d(e, t)
                : void 0
            );
          }
        })(e) ||
        (function () {
          throw new TypeError(
            "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        })()
      );
    }
    function d(e, t) {
      (null == t || t > e.length) && (t = e.length);
      for (var n = 0, r = new Array(t); n < t; n++) r[n] = e[n];
      return r;
    }
    function v(e) {
      return Array.isArray ? Array.isArray(e) : "[object Array]" === b(e);
    }
    function g(e) {
      return "string" == typeof e;
    }
    function y(e) {
      return "number" == typeof e;
    }
    function p(e) {
      return (
        !0 === e ||
        !1 === e ||
        ((function (e) {
          return m(e) && null !== e;
        })(e) &&
          "[object Boolean]" == b(e))
      );
    }
    function m(e) {
      return "object" === n(e);
    }
    function k(e) {
      return null != e;
    }
    function M(e) {
      return !e.trim().length;
    }
    function b(e) {
      return null == e
        ? void 0 === e
          ? "[object Undefined]"
          : "[object Null]"
        : Object.prototype.toString.call(e);
    }
    var x = function (e) {
        return "Invalid value for key ".concat(e);
      },
      w = function (e) {
        return "Pattern length exceeds max of ".concat(e, ".");
      },
      L = Object.prototype.hasOwnProperty,
      S = (function () {
        function e(t) {
          var n = this;
          r(this, e), (this._keys = []), (this._keyMap = {});
          var i = 0;
          t.forEach(function (e) {
            var t = _(e);
            (i += t.weight),
              n._keys.push(t),
              (n._keyMap[t.id] = t),
              (i += t.weight);
          }),
            this._keys.forEach(function (e) {
              e.weight /= i;
            });
        }
        return (
          o(e, [
            {
              key: "get",
              value: function (e) {
                return this._keyMap[e];
              },
            },
            {
              key: "keys",
              value: function () {
                return this._keys;
              },
            },
            {
              key: "toJSON",
              value: function () {
                return JSON.stringify(this._keys);
              },
            },
          ]),
          e
        );
      })();
    function _(e) {
      var t = null,
        n = null,
        r = null,
        i = 1,
        o = null;
      if (g(e) || v(e)) (r = e), (t = O(e)), (n = j(e));
      else {
        if (!L.call(e, "name"))
          throw new Error(
            (function (e) {
              return "Missing ".concat(e, " property in key");
            })("name")
          );
        var c = e.name;
        if (((r = c), L.call(e, "weight") && (i = e.weight) <= 0))
          throw new Error(
            (function (e) {
              return "Property 'weight' in key '".concat(
                e,
                "' must be a positive integer"
              );
            })(c)
          );
        (t = O(c)), (n = j(c)), (o = e.getFn);
      }
      return { path: t, id: n, weight: i, src: r, getFn: o };
    }
    function O(e) {
      return v(e) ? e : e.split(".");
    }
    function j(e) {
      return v(e) ? e.join(".") : e;
    }
    var A = {
        useExtendedSearch: !1,
        getFn: function (e, t) {
          var n = [],
            r = !1;
          return (
            (function e(t, i, o) {
              if (k(t))
                if (i[o]) {
                  var c = t[i[o]];
                  if (!k(c)) return;
                  if (o === i.length - 1 && (g(c) || y(c) || p(c)))
                    n.push(
                      (function (e) {
                        return null == e
                          ? ""
                          : (function (e) {
                              if ("string" == typeof e) return e;
                              var t = e + "";
                              return "0" == t && 1 / e == -1 / 0 ? "-0" : t;
                            })(e);
                      })(c)
                    );
                  else if (v(c)) {
                    r = !0;
                    for (var a = 0, s = c.length; a < s; a += 1)
                      e(c[a], i, o + 1);
                  } else i.length && e(c, i, o + 1);
                } else n.push(t);
            })(e, g(t) ? t.split(".") : t, 0),
            r ? n : n[0]
          );
        },
        ignoreLocation: !1,
        ignoreFieldNorm: !1,
        fieldNormWeight: 1,
      },
      I = t(
        t(
          t(
            t(
              {},
              {
                isCaseSensitive: !1,
                includeScore: !1,
                keys: [],
                shouldSort: !0,
                sortFn: function (e, t) {
                  return e.score === t.score
                    ? e.idx < t.idx
                      ? -1
                      : 1
                    : e.score < t.score
                    ? -1
                    : 1;
                },
              }
            ),
            { includeMatches: !1, findAllMatches: !1, minMatchCharLength: 1 }
          ),
          { location: 0, threshold: 0.6, distance: 100 }
        ),
        A
      ),
      C = /[^ ]+/g;
    function E() {
      var e =
          arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3,
        n = new Map(),
        r = Math.pow(10, t);
      return {
        get: function (t) {
          var i = t.match(C).length;
          if (n.has(i)) return n.get(i);
          var o = 1 / Math.pow(i, 0.5 * e),
            c = parseFloat(Math.round(o * r) / r);
          return n.set(i, c), c;
        },
        clear: function () {
          n.clear();
        },
      };
    }
    var $ = (function () {
      function e() {
        var t =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          n = t.getFn,
          i = void 0 === n ? I.getFn : n,
          o = t.fieldNormWeight,
          c = void 0 === o ? I.fieldNormWeight : o;
        r(this, e),
          (this.norm = E(c, 3)),
          (this.getFn = i),
          (this.isCreated = !1),
          this.setIndexRecords();
      }
      return (
        o(e, [
          {
            key: "setSources",
            value: function () {
              var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : [];
              this.docs = e;
            },
          },
          {
            key: "setIndexRecords",
            value: function () {
              var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : [];
              this.records = e;
            },
          },
          {
            key: "setKeys",
            value: function () {
              var e = this,
                t =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : [];
              (this.keys = t),
                (this._keysMap = {}),
                t.forEach(function (t, n) {
                  e._keysMap[t.id] = n;
                });
            },
          },
          {
            key: "create",
            value: function () {
              var e = this;
              !this.isCreated &&
                this.docs.length &&
                ((this.isCreated = !0),
                g(this.docs[0])
                  ? this.docs.forEach(function (t, n) {
                      e._addString(t, n);
                    })
                  : this.docs.forEach(function (t, n) {
                      e._addObject(t, n);
                    }),
                this.norm.clear());
            },
          },
          {
            key: "add",
            value: function (e) {
              var t = this.size();
              g(e) ? this._addString(e, t) : this._addObject(e, t);
            },
          },
          {
            key: "removeAt",
            value: function (e) {
              this.records.splice(e, 1);
              for (var t = e, n = this.size(); t < n; t += 1)
                this.records[t].i -= 1;
            },
          },
          {
            key: "getValueForItemAtKeyId",
            value: function (e, t) {
              return e[this._keysMap[t]];
            },
          },
          {
            key: "size",
            value: function () {
              return this.records.length;
            },
          },
          {
            key: "_addString",
            value: function (e, t) {
              if (k(e) && !M(e)) {
                var n = { v: e, i: t, n: this.norm.get(e) };
                this.records.push(n);
              }
            },
          },
          {
            key: "_addObject",
            value: function (e, t) {
              var n = this,
                r = { i: t, $: {} };
              this.keys.forEach(function (t, i) {
                var o = t.getFn ? t.getFn(e) : n.getFn(e, t.path);
                if (k(o))
                  if (v(o))
                    !(function () {
                      for (
                        var e = [], t = [{ nestedArrIndex: -1, value: o }];
                        t.length;

                      ) {
                        var c = t.pop(),
                          a = c.nestedArrIndex,
                          s = c.value;
                        if (k(s))
                          if (g(s) && !M(s)) {
                            var u = { v: s, i: a, n: n.norm.get(s) };
                            e.push(u);
                          } else
                            v(s) &&
                              s.forEach(function (e, n) {
                                t.push({ nestedArrIndex: n, value: e });
                              });
                      }
                      r.$[i] = e;
                    })();
                  else if (g(o) && !M(o)) {
                    var c = { v: o, n: n.norm.get(o) };
                    r.$[i] = c;
                  }
              }),
                this.records.push(r);
            },
          },
          {
            key: "toJSON",
            value: function () {
              return { keys: this.keys, records: this.records };
            },
          },
        ]),
        e
      );
    })();
    function F(e, t) {
      var n =
          arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
        r = n.getFn,
        i = void 0 === r ? I.getFn : r,
        o = n.fieldNormWeight,
        c = void 0 === o ? I.fieldNormWeight : o,
        a = new $({ getFn: i, fieldNormWeight: c });
      return a.setKeys(e.map(_)), a.setSources(t), a.create(), a;
    }
    function R(e) {
      var t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = t.errors,
        r = void 0 === n ? 0 : n,
        i = t.currentLocation,
        o = void 0 === i ? 0 : i,
        c = t.expectedLocation,
        a = void 0 === c ? 0 : c,
        s = t.distance,
        u = void 0 === s ? I.distance : s,
        h = t.ignoreLocation,
        l = void 0 === h ? I.ignoreLocation : h,
        f = r / e.length;
      if (l) return f;
      var d = Math.abs(a - o);
      return u ? f + d / u : d ? 1 : f;
    }
    function N() {
      for (
        var e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
          t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : I.minMatchCharLength,
          n = [],
          r = -1,
          i = -1,
          o = 0,
          c = e.length;
        o < c;
        o += 1
      ) {
        var a = e[o];
        a && -1 === r
          ? (r = o)
          : a ||
            -1 === r ||
            ((i = o - 1) - r + 1 >= t && n.push([r, i]), (r = -1));
      }
      return e[o - 1] && o - r >= t && n.push([r, o - 1]), n;
    }
    var P = 32;
    function W(e) {
      for (var t = {}, n = 0, r = e.length; n < r; n += 1) {
        var i = e.charAt(n);
        t[i] = (t[i] || 0) | (1 << (r - n - 1));
      }
      return t;
    }
    var T = (function () {
        function e(t) {
          var n = this,
            i =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {},
            o = i.location,
            c = void 0 === o ? I.location : o,
            a = i.threshold,
            s = void 0 === a ? I.threshold : a,
            u = i.distance,
            h = void 0 === u ? I.distance : u,
            l = i.includeMatches,
            f = void 0 === l ? I.includeMatches : l,
            d = i.findAllMatches,
            v = void 0 === d ? I.findAllMatches : d,
            g = i.minMatchCharLength,
            y = void 0 === g ? I.minMatchCharLength : g,
            p = i.isCaseSensitive,
            m = void 0 === p ? I.isCaseSensitive : p,
            k = i.ignoreLocation,
            M = void 0 === k ? I.ignoreLocation : k;
          if (
            (r(this, e),
            (this.options = {
              location: c,
              threshold: s,
              distance: h,
              includeMatches: f,
              findAllMatches: v,
              minMatchCharLength: y,
              isCaseSensitive: m,
              ignoreLocation: M,
            }),
            (this.pattern = m ? t : t.toLowerCase()),
            (this.chunks = []),
            this.pattern.length)
          ) {
            var b = function (e, t) {
                n.chunks.push({ pattern: e, alphabet: W(e), startIndex: t });
              },
              x = this.pattern.length;
            if (x > P) {
              for (var w = 0, L = x % P, S = x - L; w < S; )
                b(this.pattern.substr(w, P), w), (w += P);
              if (L) {
                var _ = x - P;
                b(this.pattern.substr(_), _);
              }
            } else b(this.pattern, 0);
          }
        }
        return (
          o(e, [
            {
              key: "searchIn",
              value: function (e) {
                var t = this.options,
                  n = t.isCaseSensitive,
                  r = t.includeMatches;
                if ((n || (e = e.toLowerCase()), this.pattern === e)) {
                  var i = { isMatch: !0, score: 0 };
                  return r && (i.indices = [[0, e.length - 1]]), i;
                }
                var o = this.options,
                  c = o.location,
                  a = o.distance,
                  s = o.threshold,
                  u = o.findAllMatches,
                  h = o.minMatchCharLength,
                  l = o.ignoreLocation,
                  d = [],
                  v = 0,
                  g = !1;
                this.chunks.forEach(function (t) {
                  var n = t.pattern,
                    i = t.alphabet,
                    o = t.startIndex,
                    y = (function (e, t, n) {
                      var r =
                          arguments.length > 3 && void 0 !== arguments[3]
                            ? arguments[3]
                            : {},
                        i = r.location,
                        o = void 0 === i ? I.location : i,
                        c = r.distance,
                        a = void 0 === c ? I.distance : c,
                        s = r.threshold,
                        u = void 0 === s ? I.threshold : s,
                        h = r.findAllMatches,
                        l = void 0 === h ? I.findAllMatches : h,
                        f = r.minMatchCharLength,
                        d = void 0 === f ? I.minMatchCharLength : f,
                        v = r.includeMatches,
                        g = void 0 === v ? I.includeMatches : v,
                        y = r.ignoreLocation,
                        p = void 0 === y ? I.ignoreLocation : y;
                      if (t.length > P) throw new Error(w(P));
                      for (
                        var m,
                          k = t.length,
                          M = e.length,
                          b = Math.max(0, Math.min(o, M)),
                          x = u,
                          L = b,
                          S = d > 1 || g,
                          _ = S ? Array(M) : [];
                        (m = e.indexOf(t, L)) > -1;

                      ) {
                        var O = R(t, {
                          currentLocation: m,
                          expectedLocation: b,
                          distance: a,
                          ignoreLocation: p,
                        });
                        if (((x = Math.min(O, x)), (L = m + k), S))
                          for (var j = 0; j < k; ) (_[m + j] = 1), (j += 1);
                      }
                      L = -1;
                      for (
                        var A = [], C = 1, E = k + M, $ = 1 << (k - 1), F = 0;
                        F < k;
                        F += 1
                      ) {
                        for (var W = 0, T = E; W < T; )
                          R(t, {
                            errors: F,
                            currentLocation: b + T,
                            expectedLocation: b,
                            distance: a,
                            ignoreLocation: p,
                          }) <= x
                            ? (W = T)
                            : (E = T),
                            (T = Math.floor((E - W) / 2 + W));
                        E = T;
                        var z = Math.max(1, b - T + 1),
                          D = l ? M : Math.min(b + T, M) + k,
                          K = Array(D + 2);
                        K[D + 1] = (1 << F) - 1;
                        for (var q = D; q >= z; q -= 1) {
                          var B = q - 1,
                            J = n[e.charAt(B)];
                          if (
                            (S && (_[B] = +!!J),
                            (K[q] = ((K[q + 1] << 1) | 1) & J),
                            F &&
                              (K[q] |= ((A[q + 1] | A[q]) << 1) | 1 | A[q + 1]),
                            K[q] & $ &&
                              (C = R(t, {
                                errors: F,
                                currentLocation: B,
                                expectedLocation: b,
                                distance: a,
                                ignoreLocation: p,
                              })) <= x)
                          ) {
                            if (((x = C), (L = B) <= b)) break;
                            z = Math.max(1, 2 * b - L);
                          }
                        }
                        if (
                          R(t, {
                            errors: F + 1,
                            currentLocation: b,
                            expectedLocation: b,
                            distance: a,
                            ignoreLocation: p,
                          }) > x
                        )
                          break;
                        A = K;
                      }
                      var U = { isMatch: L >= 0, score: Math.max(0.001, C) };
                      if (S) {
                        var V = N(_, d);
                        V.length ? g && (U.indices = V) : (U.isMatch = !1);
                      }
                      return U;
                    })(e, n, i, {
                      location: c + o,
                      distance: a,
                      threshold: s,
                      findAllMatches: u,
                      minMatchCharLength: h,
                      includeMatches: r,
                      ignoreLocation: l,
                    }),
                    p = y.isMatch,
                    m = y.score,
                    k = y.indices;
                  p && (g = !0),
                    (v += m),
                    p && k && (d = [].concat(f(d), f(k)));
                });
                var y = { isMatch: g, score: g ? v / this.chunks.length : 1 };
                return g && r && (y.indices = d), y;
              },
            },
          ]),
          e
        );
      })(),
      z = (function () {
        function e(t) {
          r(this, e), (this.pattern = t);
        }
        return (
          o(
            e,
            [{ key: "search", value: function () {} }],
            [
              {
                key: "isMultiMatch",
                value: function (e) {
                  return D(e, this.multiRegex);
                },
              },
              {
                key: "isSingleMatch",
                value: function (e) {
                  return D(e, this.singleRegex);
                },
              },
            ]
          ),
          e
        );
      })();
    function D(e, t) {
      var n = e.match(t);
      return n ? n[1] : null;
    }
    var K = (function (e) {
        a(n, e);
        var t = l(n);
        function n(e) {
          return r(this, n), t.call(this, e);
        }
        return (
          o(
            n,
            [
              {
                key: "search",
                value: function (e) {
                  var t = e === this.pattern;
                  return {
                    isMatch: t,
                    score: t ? 0 : 1,
                    indices: [0, this.pattern.length - 1],
                  };
                },
              },
            ],
            [
              {
                key: "type",
                get: function () {
                  return "exact";
                },
              },
              {
                key: "multiRegex",
                get: function () {
                  return /^="(.*)"$/;
                },
              },
              {
                key: "singleRegex",
                get: function () {
                  return /^=(.*)$/;
                },
              },
            ]
          ),
          n
        );
      })(z),
      q = (function (e) {
        a(n, e);
        var t = l(n);
        function n(e) {
          return r(this, n), t.call(this, e);
        }
        return (
          o(
            n,
            [
              {
                key: "search",
                value: function (e) {
                  var t = -1 === e.indexOf(this.pattern);
                  return {
                    isMatch: t,
                    score: t ? 0 : 1,
                    indices: [0, e.length - 1],
                  };
                },
              },
            ],
            [
              {
                key: "type",
                get: function () {
                  return "inverse-exact";
                },
              },
              {
                key: "multiRegex",
                get: function () {
                  return /^!"(.*)"$/;
                },
              },
              {
                key: "singleRegex",
                get: function () {
                  return /^!(.*)$/;
                },
              },
            ]
          ),
          n
        );
      })(z),
      B = (function (e) {
        a(n, e);
        var t = l(n);
        function n(e) {
          return r(this, n), t.call(this, e);
        }
        return (
          o(
            n,
            [
              {
                key: "search",
                value: function (e) {
                  var t = e.startsWith(this.pattern);
                  return {
                    isMatch: t,
                    score: t ? 0 : 1,
                    indices: [0, this.pattern.length - 1],
                  };
                },
              },
            ],
            [
              {
                key: "type",
                get: function () {
                  return "prefix-exact";
                },
              },
              {
                key: "multiRegex",
                get: function () {
                  return /^\^"(.*)"$/;
                },
              },
              {
                key: "singleRegex",
                get: function () {
                  return /^\^(.*)$/;
                },
              },
            ]
          ),
          n
        );
      })(z),
      J = (function (e) {
        a(n, e);
        var t = l(n);
        function n(e) {
          return r(this, n), t.call(this, e);
        }
        return (
          o(
            n,
            [
              {
                key: "search",
                value: function (e) {
                  var t = !e.startsWith(this.pattern);
                  return {
                    isMatch: t,
                    score: t ? 0 : 1,
                    indices: [0, e.length - 1],
                  };
                },
              },
            ],
            [
              {
                key: "type",
                get: function () {
                  return "inverse-prefix-exact";
                },
              },
              {
                key: "multiRegex",
                get: function () {
                  return /^!\^"(.*)"$/;
                },
              },
              {
                key: "singleRegex",
                get: function () {
                  return /^!\^(.*)$/;
                },
              },
            ]
          ),
          n
        );
      })(z),
      U = (function (e) {
        a(n, e);
        var t = l(n);
        function n(e) {
          return r(this, n), t.call(this, e);
        }
        return (
          o(
            n,
            [
              {
                key: "search",
                value: function (e) {
                  var t = e.endsWith(this.pattern);
                  return {
                    isMatch: t,
                    score: t ? 0 : 1,
                    indices: [e.length - this.pattern.length, e.length - 1],
                  };
                },
              },
            ],
            [
              {
                key: "type",
                get: function () {
                  return "suffix-exact";
                },
              },
              {
                key: "multiRegex",
                get: function () {
                  return /^"(.*)"\$$/;
                },
              },
              {
                key: "singleRegex",
                get: function () {
                  return /^(.*)\$$/;
                },
              },
            ]
          ),
          n
        );
      })(z),
      V = (function (e) {
        a(n, e);
        var t = l(n);
        function n(e) {
          return r(this, n), t.call(this, e);
        }
        return (
          o(
            n,
            [
              {
                key: "search",
                value: function (e) {
                  var t = !e.endsWith(this.pattern);
                  return {
                    isMatch: t,
                    score: t ? 0 : 1,
                    indices: [0, e.length - 1],
                  };
                },
              },
            ],
            [
              {
                key: "type",
                get: function () {
                  return "inverse-suffix-exact";
                },
              },
              {
                key: "multiRegex",
                get: function () {
                  return /^!"(.*)"\$$/;
                },
              },
              {
                key: "singleRegex",
                get: function () {
                  return /^!(.*)\$$/;
                },
              },
            ]
          ),
          n
        );
      })(z),
      G = (function (e) {
        a(n, e);
        var t = l(n);
        function n(e) {
          var i,
            o =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {},
            c = o.location,
            a = void 0 === c ? I.location : c,
            s = o.threshold,
            u = void 0 === s ? I.threshold : s,
            h = o.distance,
            l = void 0 === h ? I.distance : h,
            f = o.includeMatches,
            d = void 0 === f ? I.includeMatches : f,
            v = o.findAllMatches,
            g = void 0 === v ? I.findAllMatches : v,
            y = o.minMatchCharLength,
            p = void 0 === y ? I.minMatchCharLength : y,
            m = o.isCaseSensitive,
            k = void 0 === m ? I.isCaseSensitive : m,
            M = o.ignoreLocation,
            b = void 0 === M ? I.ignoreLocation : M;
          return (
            r(this, n),
            ((i = t.call(this, e))._bitapSearch = new T(e, {
              location: a,
              threshold: u,
              distance: l,
              includeMatches: d,
              findAllMatches: g,
              minMatchCharLength: p,
              isCaseSensitive: k,
              ignoreLocation: b,
            })),
            i
          );
        }
        return (
          o(
            n,
            [
              {
                key: "search",
                value: function (e) {
                  return this._bitapSearch.searchIn(e);
                },
              },
            ],
            [
              {
                key: "type",
                get: function () {
                  return "fuzzy";
                },
              },
              {
                key: "multiRegex",
                get: function () {
                  return /^"(.*)"$/;
                },
              },
              {
                key: "singleRegex",
                get: function () {
                  return /^(.*)$/;
                },
              },
            ]
          ),
          n
        );
      })(z),
      H = (function (e) {
        a(n, e);
        var t = l(n);
        function n(e) {
          return r(this, n), t.call(this, e);
        }
        return (
          o(
            n,
            [
              {
                key: "search",
                value: function (e) {
                  for (
                    var t, n = 0, r = [], i = this.pattern.length;
                    (t = e.indexOf(this.pattern, n)) > -1;

                  )
                    (n = t + i), r.push([t, n - 1]);
                  var o = !!r.length;
                  return { isMatch: o, score: o ? 0 : 1, indices: r };
                },
              },
            ],
            [
              {
                key: "type",
                get: function () {
                  return "include";
                },
              },
              {
                key: "multiRegex",
                get: function () {
                  return /^'"(.*)"$/;
                },
              },
              {
                key: "singleRegex",
                get: function () {
                  return /^'(.*)$/;
                },
              },
            ]
          ),
          n
        );
      })(z),
      Q = [K, H, B, J, V, U, q, G],
      X = Q.length,
      Y = / +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;
    function Z(e) {
      var t =
        arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return e.split("|").map(function (e) {
        for (
          var n = e
              .trim()
              .split(Y)
              .filter(function (e) {
                return e && !!e.trim();
              }),
            r = [],
            i = 0,
            o = n.length;
          i < o;
          i += 1
        ) {
          for (var c = n[i], a = !1, s = -1; !a && ++s < X; ) {
            var u = Q[s],
              h = u.isMultiMatch(c);
            h && (r.push(new u(h, t)), (a = !0));
          }
          if (!a)
            for (s = -1; ++s < X; ) {
              var l = Q[s],
                f = l.isSingleMatch(c);
              if (f) {
                r.push(new l(f, t));
                break;
              }
            }
        }
        return r;
      });
    }
    var ee = new Set([G.type, H.type]),
      te = (function () {
        function e(t) {
          var n =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {},
            i = n.isCaseSensitive,
            o = void 0 === i ? I.isCaseSensitive : i,
            c = n.includeMatches,
            a = void 0 === c ? I.includeMatches : c,
            s = n.minMatchCharLength,
            u = void 0 === s ? I.minMatchCharLength : s,
            h = n.ignoreLocation,
            l = void 0 === h ? I.ignoreLocation : h,
            f = n.findAllMatches,
            d = void 0 === f ? I.findAllMatches : f,
            v = n.location,
            g = void 0 === v ? I.location : v,
            y = n.threshold,
            p = void 0 === y ? I.threshold : y,
            m = n.distance,
            k = void 0 === m ? I.distance : m;
          r(this, e),
            (this.query = null),
            (this.options = {
              isCaseSensitive: o,
              includeMatches: a,
              minMatchCharLength: u,
              findAllMatches: d,
              ignoreLocation: l,
              location: g,
              threshold: p,
              distance: k,
            }),
            (this.pattern = o ? t : t.toLowerCase()),
            (this.query = Z(this.pattern, this.options));
        }
        return (
          o(
            e,
            [
              {
                key: "searchIn",
                value: function (e) {
                  var t = this.query;
                  if (!t) return { isMatch: !1, score: 1 };
                  var n = this.options,
                    r = n.includeMatches;
                  e = n.isCaseSensitive ? e : e.toLowerCase();
                  for (
                    var i = 0, o = [], c = 0, a = 0, s = t.length;
                    a < s;
                    a += 1
                  ) {
                    var u = t[a];
                    (o.length = 0), (i = 0);
                    for (var h = 0, l = u.length; h < l; h += 1) {
                      var d = u[h],
                        v = d.search(e),
                        g = v.isMatch,
                        y = v.indices,
                        p = v.score;
                      if (!g) {
                        (c = 0), (i = 0), (o.length = 0);
                        break;
                      }
                      if (((i += 1), (c += p), r)) {
                        var m = d.constructor.type;
                        ee.has(m) ? (o = [].concat(f(o), f(y))) : o.push(y);
                      }
                    }
                    if (i) {
                      var k = { isMatch: !0, score: c / i };
                      return r && (k.indices = o), k;
                    }
                  }
                  return { isMatch: !1, score: 1 };
                },
              },
            ],
            [
              {
                key: "condition",
                value: function (e, t) {
                  return t.useExtendedSearch;
                },
              },
            ]
          ),
          e
        );
      })(),
      ne = [];
    function re(e, t) {
      for (var n = 0, r = ne.length; n < r; n += 1) {
        var i = ne[n];
        if (i.condition(e, t)) return new i(e, t);
      }
      return new T(e, t);
    }
    var ie = "$and",
      oe = "$or",
      ce = "$path",
      ae = "$val",
      se = function (e) {
        return !(!e[ie] && !e[oe]);
      },
      ue = function (e) {
        return !!e[ce];
      },
      he = function (e) {
        return !v(e) && m(e) && !se(e);
      },
      le = function (e) {
        return c(
          {},
          ie,
          Object.keys(e).map(function (t) {
            return c({}, t, e[t]);
          })
        );
      };
    function fe(e, t) {
      var n = t.ignoreFieldNorm,
        r = void 0 === n ? I.ignoreFieldNorm : n;
      e.forEach(function (e) {
        var t = 1;
        e.matches.forEach(function (e) {
          var n = e.key,
            i = e.norm,
            o = e.score,
            c = n ? n.weight : null;
          t *= Math.pow(
            0 === o && c ? Number.EPSILON : o,
            (c || 1) * (r ? 1 : i)
          );
        }),
          (e.score = t);
      });
    }
    function de(e, t) {
      var n = e.matches;
      (t.matches = []),
        k(n) &&
          n.forEach(function (e) {
            if (k(e.indices) && e.indices.length) {
              var n = { indices: e.indices, value: e.value };
              e.key && (n.key = e.key.src),
                e.idx > -1 && (n.refIndex = e.idx),
                t.matches.push(n);
            }
          });
    }
    function ve(e, t) {
      t.score = e.score;
    }
    function ge(e, t) {
      var n =
          arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
        r = n.includeMatches,
        i = void 0 === r ? I.includeMatches : r,
        o = n.includeScore,
        c = void 0 === o ? I.includeScore : o,
        a = [];
      return (
        i && a.push(de),
        c && a.push(ve),
        e.map(function (e) {
          var n = e.idx,
            r = { item: t[n], refIndex: n };
          return (
            a.length &&
              a.forEach(function (t) {
                t(e, r);
              }),
            r
          );
        })
      );
    }
    var ye = (function () {
      function e(n) {
        var i =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          o = arguments.length > 2 ? arguments[2] : void 0;
        r(this, e),
          (this.options = t(t({}, I), i)),
          this.options.useExtendedSearch,
          (this._keyStore = new S(this.options.keys)),
          this.setCollection(n, o);
      }
      return (
        o(e, [
          {
            key: "setCollection",
            value: function (e, t) {
              if (((this._docs = e), t && !(t instanceof $)))
                throw new Error("Incorrect 'index' type");
              this._myIndex =
                t ||
                F(this.options.keys, this._docs, {
                  getFn: this.options.getFn,
                  fieldNormWeight: this.options.fieldNormWeight,
                });
            },
          },
          {
            key: "add",
            value: function (e) {
              k(e) && (this._docs.push(e), this._myIndex.add(e));
            },
          },
          {
            key: "remove",
            value: function () {
              for (
                var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : function () {
                          return !1;
                        },
                  t = [],
                  n = 0,
                  r = this._docs.length;
                n < r;
                n += 1
              ) {
                var i = this._docs[n];
                e(i, n) && (this.removeAt(n), (n -= 1), (r -= 1), t.push(i));
              }
              return t;
            },
          },
          {
            key: "removeAt",
            value: function (e) {
              this._docs.splice(e, 1), this._myIndex.removeAt(e);
            },
          },
          {
            key: "getIndex",
            value: function () {
              return this._myIndex;
            },
          },
          {
            key: "search",
            value: function (e) {
              var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                n = t.limit,
                r = void 0 === n ? -1 : n,
                i = this.options,
                o = i.includeMatches,
                c = i.includeScore,
                a = i.shouldSort,
                s = i.sortFn,
                u = i.ignoreFieldNorm,
                h = g(e)
                  ? g(this._docs[0])
                    ? this._searchStringList(e)
                    : this._searchObjectList(e)
                  : this._searchLogical(e);
              return (
                fe(h, { ignoreFieldNorm: u }),
                a && h.sort(s),
                y(r) && r > -1 && (h = h.slice(0, r)),
                ge(h, this._docs, { includeMatches: o, includeScore: c })
              );
            },
          },
          {
            key: "_searchStringList",
            value: function (e) {
              var t = re(e, this.options),
                n = this._myIndex.records,
                r = [];
              return (
                n.forEach(function (e) {
                  var n = e.v,
                    i = e.i,
                    o = e.n;
                  if (k(n)) {
                    var c = t.searchIn(n),
                      a = c.isMatch,
                      s = c.score,
                      u = c.indices;
                    a &&
                      r.push({
                        item: n,
                        idx: i,
                        matches: [{ score: s, value: n, norm: o, indices: u }],
                      });
                  }
                }),
                r
              );
            },
          },
          {
            key: "_searchLogical",
            value: function (e) {
              var t = this,
                n = (function (e, t) {
                  var n = (
                      arguments.length > 2 && void 0 !== arguments[2]
                        ? arguments[2]
                        : {}
                    ).auto,
                    r = void 0 === n || n,
                    i = function e(n) {
                      var i = Object.keys(n),
                        o = ue(n);
                      if (!o && i.length > 1 && !se(n)) return e(le(n));
                      if (he(n)) {
                        var c = o ? n[ce] : i[0],
                          a = o ? n[ae] : n[c];
                        if (!g(a)) throw new Error(x(c));
                        var s = { keyId: j(c), pattern: a };
                        return r && (s.searcher = re(a, t)), s;
                      }
                      var u = { children: [], operator: i[0] };
                      return (
                        i.forEach(function (t) {
                          var r = n[t];
                          v(r) &&
                            r.forEach(function (t) {
                              u.children.push(e(t));
                            });
                        }),
                        u
                      );
                    };
                  return se(e) || (e = le(e)), i(e);
                })(e, this.options),
                r = function e(n, r, i) {
                  if (!n.children) {
                    var o = n.keyId,
                      c = n.searcher,
                      a = t._findMatches({
                        key: t._keyStore.get(o),
                        value: t._myIndex.getValueForItemAtKeyId(r, o),
                        searcher: c,
                      });
                    return a && a.length
                      ? [{ idx: i, item: r, matches: a }]
                      : [];
                  }
                  for (
                    var s = [], u = 0, h = n.children.length;
                    u < h;
                    u += 1
                  ) {
                    var l = e(n.children[u], r, i);
                    if (l.length) s.push.apply(s, f(l));
                    else if (n.operator === ie) return [];
                  }
                  return s;
                },
                i = this._myIndex.records,
                o = {},
                c = [];
              return (
                i.forEach(function (e) {
                  var t = e.$,
                    i = e.i;
                  if (k(t)) {
                    var a = r(n, t, i);
                    a.length &&
                      (o[i] ||
                        ((o[i] = { idx: i, item: t, matches: [] }),
                        c.push(o[i])),
                      a.forEach(function (e) {
                        var t,
                          n = e.matches;
                        (t = o[i].matches).push.apply(t, f(n));
                      }));
                  }
                }),
                c
              );
            },
          },
          {
            key: "_searchObjectList",
            value: function (e) {
              var t = this,
                n = re(e, this.options),
                r = this._myIndex,
                i = r.keys,
                o = r.records,
                c = [];
              return (
                o.forEach(function (e) {
                  var r = e.$,
                    o = e.i;
                  if (k(r)) {
                    var a = [];
                    i.forEach(function (e, i) {
                      a.push.apply(
                        a,
                        f(t._findMatches({ key: e, value: r[i], searcher: n }))
                      );
                    }),
                      a.length && c.push({ idx: o, item: r, matches: a });
                  }
                }),
                c
              );
            },
          },
          {
            key: "_findMatches",
            value: function (e) {
              var t = e.key,
                n = e.value,
                r = e.searcher;
              if (!k(n)) return [];
              var i = [];
              if (v(n))
                n.forEach(function (e) {
                  var n = e.v,
                    o = e.i,
                    c = e.n;
                  if (k(n)) {
                    var a = r.searchIn(n),
                      s = a.isMatch,
                      u = a.score,
                      h = a.indices;
                    s &&
                      i.push({
                        score: u,
                        key: t,
                        value: n,
                        idx: o,
                        norm: c,
                        indices: h,
                      });
                  }
                });
              else {
                var o = n.v,
                  c = n.n,
                  a = r.searchIn(o),
                  s = a.isMatch,
                  u = a.score,
                  h = a.indices;
                s &&
                  i.push({ score: u, key: t, value: o, norm: c, indices: h });
              }
              return i;
            },
          },
        ]),
        e
      );
    })();
    return (
      (ye.version = "6.6.2"),
      (ye.createIndex = F),
      (ye.parseIndex = function (e) {
        var t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          n = t.getFn,
          r = void 0 === n ? I.getFn : n,
          i = t.fieldNormWeight,
          o = void 0 === i ? I.fieldNormWeight : i,
          c = e.keys,
          a = e.records,
          s = new $({ getFn: r, fieldNormWeight: o });
        return s.setKeys(c), s.setIndexRecords(a), s;
      }),
      (ye.config = I),
      (function () {
        ne.push.apply(ne, arguments);
      })(te),
      ye
    );
  }),
  "object" == typeof exports && "undefined" != typeof module
    ? (module.exports = t())
    : "function" == typeof define && define.amd
    ? define(t)
    : ((e = "undefined" != typeof globalThis ? globalThis : e || self).Fuse =
        t());

// Hamle lekhya code
const options = {
  isCaseSensitive: false,
  includeScore: false,
  // shouldSort: true,
  // includeMatches: false,
  // findAllMatches: true,
  // minMatchCharLength: 1,
  // location: 0,
  threshold: 0.3,
  // distance: 100,
  useExtendedSearch: true,
  // ignoreLocation: false,
  // ignoreFieldNorm: false,
  // fieldNormWeight: 1,
  keys: ["name"],
};

function search(keyword, language) {
  if (language == "flask") {
    const fuse = new Fuse(flask, options);
    let toSearch = keyword;
    return fuse.search(toSearch);
  } else if (language == "vue") {
    const fuse2 = new Fuse(vue, options);
    let toSearch = keyword;
    return fuse2.search(toSearch);
  } else if (language == "lua") {
    const fuse3 = new Fuse(lua, options);
    let toSearch = keyword;
    return fuse3.search(toSearch);
  }
}

const vscode = acquireVsCodeApi();

// Handle messages sent from the extension to the webview
window.addEventListener("message", (event) => {
  const message = event.data; // The json data that the extension sent
  switch (message.type) {
    case "findDocs": {
      let language = message.language == "python" ? "flask" : message.language;
      findDocs(message.selection, language);
      break;
    }
    case "initBoilerplate": {
      findDocs("", language);
      console.log("INITING BOILERPLATE");
      break;
    }
  }
});

app = document.querySelector("#app");

function findDocs(selection, language) {
  console.log("IM RUNNING");
  let searched;
  if (selection == "") {
    console.log("INITING BOILERPLATE INSIDE MAIN");
    switch (language) {
      case "flask":
        searched = [
          {
            item: {
              group: "",
              name: "Boiler Plate For Flask:",
              body: "<pre>Helllo flask</pre>",
            },
          },
        ];
    }
  } else searched = search(selection, language);

  console.log(searched);
  if (searched.length == 0) {
    console.log("NOOO");
    app.innerHTML = `No results found. Please select a valid keyword and try again.`;
  } else {
    app.innerHTML = "";
    searched.forEach((searchItm, idx) => {
      app.innerHTML += `
        <details ${idx == 0 ? "open" : ""}>
        <summary>
          ${searchItm.item.name}
        </summary>
        <div>
          <p>
          ${searchItm.item.body}
          </p>
        </div>
        </details>
        </br>
      `;
    });
  }

  // searched.forEach((searchItm) => {
  //   app.innerHTML += searchItm.item.body;
  //   app.innerHTML += "</br>";
  // });
  //   app.innerHTML = testHTML;
  document.querySelectorAll("pre").forEach((preBlock) => {
    // Inserting a code element inside pre element
    let codeBlock = document.createElement("code");
    codeBlock.innerHTML = preBlock.innerHTML;
    preBlock.innerHTML = "";
    preBlock.appendChild(codeBlock);

    const button = document.createElement("button");
    let text = document.createTextNode("Add Snippet");
    button.appendChild(text);
    preBlock.parentElement.appendChild(button);
    button.addEventListener("click", () => {
      vscode.postMessage({ type: "addSnippet", value: codeBlock.textContent });
    });
  });
}
